package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Stack;

parser code
{:
    
    
    public void syntax_error(Symbol s){
       //pnlSalida.textPane.setText(pnlSalida.textPane.getText()+"Error sintáctico en la línea "+(s.right +1)+": "+ s.value+"\n");
       //System.out.println("Error R de sintaxis: "+ s.value +" en la Linea "+(s.right+1) );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //pnlSalida.textPane.setText(pnlSalida.textPane.getText()+"Error NR de sintaxis: "+ s.value +" en la Linea " +  (s.left+1)+"\n");
        //System.out.println("Error NR de sintaxis: "+ s.value +" en la Linea " + (s.left+1));
    }

    public ArrayList getvar_identificador() { return action_obj.var_identificador; }
    public ArrayList getvar_tipo_dato() { return action_obj.var_tipo_dato; }
    public ArrayList getvar_valor() { return action_obj.var_valor; }
    public ArrayList getvar_err_linea() { return action_obj.err_linea; }
    public ArrayList getvar_err_msj() { return action_obj.err_msj; }
    public ArrayList getvar_err_gramatica() { return action_obj.err_gramatica; }
    public ArrayList getvar_idSemantico() { return action_obj.var_idSem; }
                //Lineas de inicio y fin Config y Startup
    public ArrayList getvar_inicioConfig() { return action_obj.var_inicioConfig; }
    public ArrayList getvar_finConfig() { return action_obj.var_finConfig; }
    public ArrayList getvar_inicioStart() { return action_obj.var_inicioStart; }
    public ArrayList getvar_finStart() { return action_obj.var_finStart; }
                //ArrayList Para llenar la tabla de Simbolos
    public ArrayList getvar_idSimb() { return action_obj.var_idSimb; }
    public ArrayList getvar_rollSimb() { return action_obj.var_rollSimb; }
    public ArrayList getvar_tipoSimb() { return action_obj.var_tipoSimb; }
    public ArrayList getvar_lStartSimb() { return action_obj.var_lStartSimb; }
    public ArrayList getvar_lEndSimb() { return action_obj.var_lEndSimb; }
    public ArrayList getvar_linExp() { return action_obj.var_linExp; }

:};
action code
{://Codigo de acciones vamos a simular atributos heredados con variables globales
    String heredado="";
    String aux="";
    Stack<Display> display = new Stack<>();
    Display tmp;

    // para la tabla de simbolos
    public ArrayList var_inicioConfig = new ArrayList();
    public ArrayList var_finConfig = new ArrayList();
    public ArrayList var_inicioStart = new ArrayList();
    public ArrayList var_finStart = new ArrayList();
    // para el semantico
    public ArrayList var_idSem = new ArrayList();
    // para la tabla de variables
    public ArrayList var_identificador = new ArrayList();
    public ArrayList var_tipo_dato = new ArrayList();
    public ArrayList var_valor = new ArrayList();
    // para los errores
    public ArrayList err_linea = new ArrayList();
    public ArrayList err_lexema = new ArrayList();
    public ArrayList err_msj = new ArrayList();
    public ArrayList err_gramatica = new ArrayList();
    // Para la tabla de Simbolos
    public ArrayList var_idSimb = new ArrayList();
    public ArrayList var_rollSimb = new ArrayList();
    public ArrayList var_tipoSimb = new ArrayList();
    public ArrayList var_lStartSimb = new ArrayList();
    public ArrayList var_lEndSimb = new ArrayList();
    public ArrayList var_linExp = new ArrayList();

    public void rollist(Object identificador, String roll, Object tipo, int linStart, int linEnd) {
        var_idSimb.add((String)identificador);
        var_rollSimb.add(roll);
        var_tipoSimb.add((String)tipo);
        var_lStartSimb.add(linStart);
        var_lEndSimb.add(linEnd);
    }

    public boolean idExiste(String a) {// comprobar id si existen en la tabla de simbolo
        for (int i = 0; i < var_identificador.size(); i++) {
            if (var_identificador.get(i).equals(a)) {
                return true;
            }
        }
        return false;
    }

    public void errores_gramatica (int error){ 
        /*Pedro Id: 3
          Brad Id:  7
          Jacobo:   4    
        */
        switch (error)
        {
        case 71:
            err_gramatica.add(" res_pin par_abre Numero coma Identificador par_cierra <p color=\"#FF0042\">sig_punto_coma</p>");
            break;
        //GRAMATICAS FUNCTION
        case 41:
            err_gramatica.add("res_name Identificador <span color=\"#FF0042\">sig_punto_coma</span><br>ESTRUCTURA_BASICA");
            break;
        case 42:
            err_gramatica.add("res_name <span color=\"#FF0042\">Identificador</span> sig_punto_coma<br>ESTRUCTURA_BASICA");
            break;
        case 43:
            err_gramatica.add("<span color=\"#FF0042\">res_name</span> Identificador sig_punto_coma<br>ESTRUCTURA_BASICA");
            break;
        case 44:
            err_gramatica.add("res_name <span color=\"#FF0042\">Identificador sig_punto_coma</span><br>ESTRUCTURA_BASICA");
            break;
        case 45:
            err_gramatica.add("res_function <span color=\"#FF0042\">TIPO_DATO</span> Identificador par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 46:
            err_gramatica.add("res_function TIPO_DATO <span color=\"#FF0042\">Identificador</span> par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 47:
            err_gramatica.add("res_function <span color=\"#FF0042\">TIPO_DATO Identificador</span> par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 48:
            err_gramatica.add("res_function TIPO_DATO Identificador <span color=\"#FF0042\">par_abre</span> PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 49:
            err_gramatica.add("res_function TIPO_DATO Identificador par_abre PARAMETRO <span color=\"#FF0042\">par_cierra</span> llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 401:
            err_gramatica.add("res_function TIPO_DATO Identificador <span color=\"#FF0042\">par_abre</span> PARAMETRO <span color=\"#FF0042\">par_cierra</span> llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 402:
            err_gramatica.add("<span color=\"#FF0042\">res_function</span> TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 403:
            err_gramatica.add("<span color=\"#FF0042\">res_function TIPO_DATO</span> Identificador par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 404:
            err_gramatica.add("res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra <span color=\"#FF0042\">llave_abre</span> <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        //GRAMATICAS STARTUP
        case 405:
            err_gramatica.add("res_start <span color=\"#FF0042\">sig_punto_coma</span><br>SENTENCIA_STARTUP<br>res_end <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 406:
            err_gramatica.add("res_start sig_punto_coma<br>SENTENCIA_STARTUP<br>res_end <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 407:
            err_gramatica.add("<span color=\"#FF0042\">res_start</span> sig_punto_coma<br>SENTENCIA_STARTUP<br>res_end sig_punto_coma");
            break;
        //GRAMATICAS DISPLAY
        case 408:
            err_gramatica.add("res_display par_abre DISPLAY_PARAMS par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 409:
            err_gramatica.add("res_display par_abre <span color=\"#FF0042\">DISPLAY_PARAMS</span> par_cierra sig_punto_coma");
            break;
        case 410:
            err_gramatica.add("res_display <span color=\"#FF0042\">par_abre</span> DISPLAY_PARAMS par_cierra sig_punto_coma");
            break;
        case 411:
            err_gramatica.add("res_display par_abre DISPLAY_PARAMS <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        //GRAMATICAS TYPE_IO
        case 412:
            err_gramatica.add("res_type par_abre Identificador coma <span color=\"#FF0042\">TYPE_IO</span> par_cierra sig_punto_coma");
            break;
        //GRAMATICAS MAX_VOLT
        case 413:
            err_gramatica.add("res_max_volt par_abre Identificador par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 414:
            err_gramatica.add("res_max_volt par_abre Numero par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 415:
            err_gramatica.add("res_max_volt <span color=\"#FF0042\">par_abre</span> Identificador par_cierra sig_punto_coma");
            break;
        case 416:
            err_gramatica.add("res_max_volt par_abre Identificador <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 417:
            err_gramatica.add("res_max_volt <span color=\"#FF0042\">par_abre</span> Numero par_cierra sig_punto_coma");
            break;
        case 418:
            err_gramatica.add("res_max_volt par_abre Numero <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 419:
            err_gramatica.add("res_max_volt par_abre <span color=\"#FF0042\">Numero</span> par_cierra sig_punto_coma");
            break;
        case 420:
            err_gramatica.add("res_max_volt <span color=\"#FF0042\">par_abre Numero par_cierra sig_punto_coma</span>");
            break;
        //GRAMATICAS OPERADOR CONDICIONAL
        case 421:
            err_gramatica.add("CONDICION ::=<br>VALOR_NUMERICO <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> VALOR_NUMERICO | <br> log_not Identificador <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> CONDICION");
            break;
        //GRAMATICAS IF
        case 422:
            err_gramatica.add(" IF ::=<br>res_if <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 423:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 424:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION par_cierra <span color=\"#FF0042\">llave_abre</span><br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 425:
            err_gramatica.add(" IF ::=<br>res_if <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra res_else llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 426:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra res_else llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 427:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION par_cierra <span color=\"#FF0042\">llave_abre</span><br>SENTENCIA_STARTUP<br>llave_cierra res_else llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 428:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION par_cierra llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra res_else <span color=\"#FF0042\">llave_abre</span><br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 429:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION par_cierra llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra <span color=\"#FF0042\">res_else</span> llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        //GRAMATICAS CASO
        case 430:
            err_gramatica.add("SWITCH_ENTRADAS ::=<br>rel_menor <span color=\"#FF0042\">CASO</span>rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        //GRAMATICAS OPERACION_CONTRACCION
        case 31:
            err_gramatica.add("OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO <span color=\"#FF0042\">sig_punto_coma<span color=\"#FF0042\">");
            break;
        case 32:
            err_gramatica.add("OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> sig_punto_coma");
            break;
        case 33:
            err_gramatica.add("OPERACION_CONTRACCION ::= cIdentificador OPERADOR_ARITMETICO <span color=\"#FF0042\">asi_asignacion<span color=\"#FF0042\"> VALOR_NUMERICO sig_punto_coma");
            break;
        case 34:
            err_gramatica.add("OPERACION_CONTRACCION ::= <span color=\"#FF0042\">Identificador <span color=\"#FF0042\">OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO sig_punto_coma");
            break;
        case 35:
            err_gramatica.add("OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO sig_punto_coma");
            break;
        case 36:
            err_gramatica.add("INCREMENTO ::= ari_suma ari_suma | ari_resta ari_resta");
            break;
        // GRAMATICAS TIPO_DATO_FOR
        case 37:
            err_gramatica.add("TIPO_DATO_FOR ::= tip_int | tip_float | tip_double | tip_tinyint | <span color=\"#FF0042\">tip_boolean<span color=\"#FF0042\"> ");
            break;
        case 38:
            err_gramatica.add("TIPO_DATO_FOR ::= tip_int | tip_float | tip_double | tip_tinyint | <span color=\"#FF0042\">tip_char<span color=\"#FF0042\"> ");
            break;
        // GRAMATICAS FOR
        case 39:
            err_gramatica.add("FOR ::= FOR ::= res_for <span color=\"#FF0042\">par_abre<span color=\"#FF0042\"> res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 310:
            err_gramatica.add("FOR ::= res_for par_abre <span color=\"#FF0042\">TIPO_DATO_FOR<span color=\"#FF0042\"> Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 311:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR <span color=\"#FF0042\">Identificador<span color=\"#FF0042\"> asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 312:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador <span color=\"#FF0042\">asi_asignacion<span color=\"#FF0042\"> VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 313:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 314:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO <span color=\"#FF0042\">sig_punto_coma<span color=\"#FF0042\"> CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 315:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma <span color=\"#FF0042\">CONDICION<span color=\"#FF0042\"> sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 316:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma <span color=\"#FF0042\">METODO_INCREMENTO<span color=\"#FF0042\"> par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 317:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"><br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 318:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "<span color=\"#FF0042\">llave_abre<span color=\"#FF0042\"><br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 319:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp <span color=\"#FF0042\">SENTENCIA_STARTUP<span color=\"#FF0042\"><br>"+ 
                "llave_cierra"); 
            break;
        case 320:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma <span color=\"#FF0042\">CONDICION<span color=\"#FF0042\"> sig_punto_coma METODO_INCREMENTO par_cierra<br>"+
            "llave_abre<br>"+ 
            "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+
            "llave_cierra"); 
            break;
        case 321:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma <span color=\"#FF0042\">METODO_INCREMENTO<span color=\"#FF0042\"> par_cierra<br>"+
            "llave_abre<br>"+ 
            "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+
            "llave_cierra"); 
            break;
        case 322:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"><br>"+
            "llave_abre<br>"+ 
            "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+
            "llave_cierra"); 
            break;
        case 323:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+
            "<span color=\"#FF0042\">llave_abre<span color=\"#FF0042\"><br>"+ 
            "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+
            "llave_cierra"); 
            break; 
        case 324:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+
            "llave_abre<br>"+ 
            "&nbsp&nbsp&nbsp&nbsp <span color=\"#FF0042\">SENTENCIA_STARTUP<span color=\"#FF0042\"><br>"+
            "llave_cierra"); 
            break;   
        //GRAMATICA SLEEP    
        case 325:
            err_gramatica.add("SLEEP ::= res_sleep par_abre VALOR_NUMERICO par_cierra <span color=\"#FF0042\">sig_punto_coma<span color=\"#FF0042\">"); 
            break; 
        case 326:
            err_gramatica.add("SLEEP ::= res_sleep par_abre VALOR_NUMERICO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"> sig_punto_coma"); 
            break; 
        case 327:
            err_gramatica.add("SLEEP ::= res_sleep par_abre <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> par_cierra sig_punto_coma"); 
            break; 
        case 328:
            err_gramatica.add("SLEEP ::= res_sleep <span color=\"#FF0042\">par_abre<span color=\"#FF0042\"> VALOR_NUMERICO par_cierra sig_punto_coma"); 
            break; 
        case 329:
            err_gramatica.add("SLEEP ::= res_sleep <span color=\"#FF0042\">par_abre<span color=\"#FF0042\"> VALOR_NUMERICO par_cierra sig_punto_coma"); 
            break; 
        case 330:
            err_gramatica.add("SLEEP ::= res_sleep <span color=\"#FF0042\">par_abre<span color=\"#FF0042\"> VALOR_NUMERICO par_cierra sig_punto_coma"); 
            break;     
        case 331:
            err_gramatica.add("SLEEP ::= res_sleep par_abre <span color=\"#FF0042\">(VALOR_NUMERICO | EXPRESION)<span color=\"#FF0042\"> par_cierra sig_punto_coma"); 
            break; 
        case 332:
            err_gramatica.add("SLEEP ::= res_sleep par_abre VALOR_NUMERICO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"> sig_punto_coma"); 
            break; 
        case 333:
            err_gramatica.add("SLEEP ::= res_sleep par_abre <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> par_cierra sig_punto_coma"); 
            break;     
        case 334:
            err_gramatica.add("SLEEP ::= res_sleep par_abre <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> par_cierra sig_punto_coma"); 
            break; 
        case 335:
            err_gramatica.add("SLEEP ::= res_sleep par_abre VALOR_NUMERICO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"> sig_punto_coma"); 
            break; 
// GRAMATICA VOLT    
        case 337:
            err_gramatica.add("VOLT ::= res_volt par_abre Identificador coma Numero par_cierra <span color=\"#FF0042\">sig_punto_coma</span>"); 
            break; 
        case 338:
            err_gramatica.add("VOLT ::= res_volt par_abre Identificador coma Numero coma Numero par_cierra <span color=\"#FF0042\">sig_punto_coma</span>"); 
            break; 
        case 339:
            err_gramatica.add("VOLT ::= res_volt par_abre <span color=\"#FF0042\">Identificador</span> coma Numero par_cierra sig_punto_coma"); 
            break;     
        case 340:
            err_gramatica.add("VOLT ::= res_volt par_abre <span color=\"#FF0042\">Identificador</span> coma Numero coma Numero par_cierra sig_punto_coma"); 
            break;     
        case 341:
            err_gramatica.add("VOLT ::= res_volt par_abre Identificador <span color=\"#FF0042\">coma</span> Numero par_cierra sig_punto_coma"); 
            break;     
        case 342:
            err_gramatica.add("VOLT ::= res_volt par_abre <span color=\"#FF0042\">Identificador coma Numero coma Numero</span> par_cierra sig_punto_coma"); 
            break;   
        case 343:
            err_gramatica.add("VOLT ::= res_volt <span color=\"#FF0042\">par_abre</span> Identificador coma Numero par_cierra sig_punto_coma"); 
            break;   
        case 344:
            err_gramatica.add("VOLT ::= res_volt par_abre Identificador coma Numero par_cierra <span color=\"#FF0042\">sig_punto_coma</span>"); 
            break;      
        case 345:
            err_gramatica.add("VOLT ::= res_volt <span color=\"#FF0042\">par_abre</span> Identificador coma Numero coma Numero par_cierra sig_punto_coma"); 
            break;  
        case 346:
            err_gramatica.add("VOLT ::= res_volt par_abre Identificador coma Numero coma Numero <span color=\"#FF0042\">par_cierra</span> sig_punto_coma"); 
            break; 
        case 347:
            err_gramatica.add("VOLT ::= res_volt par_abre Identificador coma Numero <span color=\"#FF0042\">par_cierra</span> sig_punto_coma"); 
            break; 
        case 348:
            err_gramatica.add("VOLT ::= res_volt par_abre <span color=\"#FF0042\">Identificador</span> coma Numero par_cierra sig_punto_coma"); 
            break;            
// GRAMATICA DECLARACION_PARAMETRO        
        case 349:
            err_gramatica.add("DECLARACION_PARAMETRO ::= <span color=\"#FF0042\">res_def</span> TIPO_DATO Identificador"); 
            break; 
        case 350:
            err_gramatica.add("DECLARACION_PARAMETRO ::=  <span color=\"#FF0042\">res_def</span> TIPO_DATO Identificador asi_asignacion VALOR "); 
            break; 
        case 351:
            err_gramatica.add("DECLARACION_PARAMETRO ::= res_def <span color=\"#FF0042\">TIPO_DATO Identificador</span>"); 
            break; 
        case 352:
            err_gramatica.add("DECLARACION_PARAMETRO ::= res_def TIPO_DATO <span color=\"#FF0042\">Identificador asi_asignacion VALOR</span>"); 
            break; 
        // GRAMÁTICA: OUT   

        case 744:
            err_gramatica.add("OUT res_out par_abre Identificador coma VALOR_NUMERICO           <span color=\"#FF0042\">par_cierra sig_punto_coma</span> ");
            break;
        case 745:
            err_gramatica.add("OUT res_out par_abre Identificador coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma ");
            break;
        case 746:
            err_gramatica.add("OUT res_out par_abre Identificador coma <span color=\"#FF0042\">VALOR_NUMERICO</span> par_cierra sig_punto_coma ");
            break;
        case 747:
            err_gramatica.add("OUT res_out par_abre Identificador <span color=\"#FF0042\">coma</span> VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 748:
            err_gramatica.add("OUT res_out par_abre <span color=\"#FF0042\">Identificador</span> coma VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 749:
            err_gramatica.add("OUT res_out <span color=\"#FF0042\">par_abre</span> Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 750:
            err_gramatica.add("OUT <span color=\"#FF0042\">res_out par_abre Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma</span> ");
            break;
        case 751:
            err_gramatica.add("OUT res_out par_abre Identificador coma VALOR_NUMERICO par_cierra <span color=\"#FF0042\">sig_punto_coma</span> ");
            break;
        case 752:
            err_gramatica.add("OUT res_out par_abre Identificador coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma ");
            break;    
        case 753:
            err_gramatica.add("OUT res_out par_abre Identificador coma <span color=\"#FF0042\">VALOR_NUMERICO</span> par_cierra sig_punto_coma ");
            break;
        case 754:
            err_gramatica.add("OUT res_out par_abre Identificador coma VALOR_NUMERICO <span color=\"#FF0042\">coma</span> VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 755:
            err_gramatica.add("OUT res_out par_abre Identificador <span color=\"#FF0042\">coma VALOR_NUMERICO coma VALOR_NUMERICO</span> par_cierra sig_punto_coma ");
            break;
        case 756:
            err_gramatica.add("OUT res_out par_abre Identificador <span color=\"#FF0042\">coma</span> VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 757:
            err_gramatica.add("OUT res_out par_abre <span color=\"#FF0042\">Identificador</span> coma VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 758:
            err_gramatica.add("OUT res_out <span color=\"#FF0042\">par_abre</span>Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 759:
            err_gramatica.add("OUT res_out par_abre res_display coma cadena_caracter par_cierre <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 760:
            err_gramatica.add("OUT res_out par_abre res_display coma cadena_caracter <span color=\"#FF0042\">par_cierre</span> sig_punto_coma");
            break;
        case 761:
            err_gramatica.add("OUT res_out par_abre res_display <span color=\"#FF0042\">coma cadena_caracter</span> par_cierre sig_punto_coma");
            break;
        case 762:
            err_gramatica.add("OUT res_out par_abre res_display <span color=\"#FF0042\">coma</span> cadena_caracter par_cierre sig_punto_coma");
            break;
        case 763:
            err_gramatica.add("OUT res_out par_abre <span color=\"#FF0042\">res_display</span> coma cadena_caracter par_cierre sig_punto_coma");
            break;
        case 764:
            err_gramatica.add("OUT res_out <span color=\"#FF0042\">par_abre</span> res_display coma cadena_caracter par_cierre sig_punto_coma");
            break;   

        // GRAMÁTICA: IN   

        case 765:
            err_gramatica.add("IN res_in par_abre VALOR_NUMERICO par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 766:
            err_gramatica.add("IN res_in par_abre VALOR_NUMERICO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 767:
            err_gramatica.add("IN res_in par_abre <span color=\"#FF0042\">VALOR_NUMERICO</span> par_cierra sig_punto_coma");
            break;
        case 768:
            err_gramatica.add("IN res_in <span color=\"#FF0042\">par_abre</span> VALOR_NUMERICO par_cierra sig_punto_coma");
            break;
        case 769:
            err_gramatica.add("IN res_in <span color=\"#FF0042\">par_abre</span> VALOR_NUMERICO par_cierra sig_punto_coma");
            break;

        // GRAMÁTICA: OPERACIÓN

        case 770:
            err_gramatica.add("OPERACION <span color=\"#FF0042\">VALOR</span> OPERADOR VALOR");
            break;
        case 771:
            err_gramatica.add("OPERACION <span color=\"#FF0042\">par_cierra</span> OPERACION <span color=\"#FF0042\">par_abre</span>");
            break;
        case 772:
            err_gramatica.add("OPERACION <span color=\"#FF0042\">par_cierra</span> OPERACION <span color=\"#FF0042\">par_cierra</span>");
            break;
        case 773:
            err_gramatica.add("OPERACION <span color=\"#FF0042\">par_abre</span> OPERACION <span color=\"#FF0042\">par_abre</span>");
            break;

        // GRAMÁTICA: DOWHILE
        case 774:
            err_gramatica.add("DOWHILE res_do llave_abre   <br>SENTENCIA_STARTUP<br> llave_cierra res_while par_abre CONDICION par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;

        // GRAMÁTICA: WHILE
        case 775:
            err_gramatica.add("WHILE res_while <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra");
            break;
        case 776:
            err_gramatica.add("WHILE res_while par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> llave_abre SENTENCIA_STARTUP llave_cierra");
            break;
        case 777:
            err_gramatica.add("WHILE res_while par_abre CONDICION par_cierra <span color=\"#FF0042\">llave_abre</span> SENTENCIA_STARTUP llave_cierra");
            break;
        case 778:
            err_gramatica.add("WHILE res_while par_abre <span color=\"#FF0042\">CONDICION</span> par_cierra llave_abre SENTENCIA_STARTUP llave_cierra");
            break;
        

        // GRAMÁTICA: SWITCH_ENTRADAS

        case 786:
            err_gramatica.add("SWITCH_ENTRADAS <span color=\"#FF0042\">rel_menor</span> CASO <span color=\"#FF0042\">rel_mayor</span> sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 787:
            err_gramatica.add("SWITCH_ENTRADAS <span color=\"#FF0042\">rel_menor</span> CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 788:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO <span color=\"#FF0042\">rel_mayor</span> sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 789:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO rel_mayor <span color=\"#FF0042\">sim_dos_puntos</span> SENTENCIA_STARTUP res_exit");
            break;
        case 790:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO <span color=\"#FF0042\">rel_mayor sim_dos_puntos</span> SENTENCIA_STARTUP res_exit");
            break;
        case 791:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor <span color=\"#FF0042\">CASO</span> rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 792:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO rel_mayor <span color=\"#FF0042\">sim_dos_puntos SENTENCIA_STARTUP res_exit</span>");
            break;
        case 793:
            err_gramatica.add("SWITCH_ENTRADAS <span color=\"#FF0042\">rel_menor</span> CASO <span color=\"#FF0042\">rel_mayor sim_dos_puntos</span> SENTENCIA_STARTUP res_exit");
            break;
        case 794:
            err_gramatica.add("SWITCH_ENTRADAS <span color=\"#FF0042\">rel_menor</span> CASO <span color=\"#FF0042\">rel_mayor</span> sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 795:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 796:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO <span color=\"#FF0042\">rel_mayor</span> sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 797:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO rel_mayor <span color=\"#FF0042\">sim_dos_puntos</span> SENTENCIA_STARTUP res_exit");
            break;
        case 798:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO <span color=\"#FF0042\">rel_mayor sim_dos_puntos</span> SENTENCIA_STARTUP res_exit");
            break;
        case 799:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor <span color=\"#FF0042\">Identificador</span> rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 7001:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO rel_mayor <span color=\"#FF0042\">sim_dos_puntos</span> SENTENCIA_STARTUP <span color=\"#FF0042\">res_exit</span>");
            break;
        case 7002:
            err_gramatica.add("SWITCH_ENTRADAS <span color=\"#FF0042\">rel_menor</span> CASO <span color=\"#FF0042\">rel_mayor sim_dos_puntos</span> SENTENCIA_STARTUP res_exit");
            break;
        
        // GRAMÁTICA: SWITCH
        
        case 7003:
            err_gramatica.add("SWITCH res_switch <span color=\"#FF0042\">par_abre</span> Identificador par_cierra llave_abre  <br>SWITCH_ENTRADAS<br> llave_cierra");
            break;
        case 7004:
            err_gramatica.add("SWITCH res_switch par_abre Identificador <span color=\"#FF0042\">par_cierra</span> llave_abre  <br>SWITCH_ENTRADAS<br> llave_cierra");
            break;
        case 7005:
            err_gramatica.add("SWITCH res_switch <span color=\"#FF0042\">par_abre</span> Identificador <span color=\"#FF0042\">par_cierra</span> llave_abre  <br>SWITCH_ENTRADAS<br> llave_cierra");
            break;
        case 7006:
            err_gramatica.add("SWITCH res_switch par_abre <span color=\"#FF0042\">Identificador</span> par_cierra llave_abre  <br>SWITCH_ENTRADAS<br> llave_cierra");
            break;
        case 7007:
            err_gramatica.add("SWITCH res_switch par_abre Identificador par_cierra <span color=\"#FF0042\">llave_abre</span> <br>SWITCH_ENTRADAS<br> llave_cierra");
            break;
        case 7008:
            err_gramatica.add("SWITCH res_switch par_abre Identificador par_cierra llave_abre  <span color=\"#FF0042\"><br>SWITCH_ENTRADAS<br></span> llave_cierra");
            break;
        case 7009:
            err_gramatica.add("SWITCH res_switch par_abre Identificador par_cierra llave_abre  <span color=\"#FF0042\"><br>SWITCH_FUNCION<br></span> llave_cierra");
            break;
        case 7010:
            err_gramatica.add("SWITCH res_switch par_abre Identificador par_cierra llave_abre  <br>SWITCH_ENTRADAS<br> <span color=\"#FF0042\">res_default</span> sim_dos_puntos llave_cierra");
            break;
        case 7011:
            err_gramatica.add("SWITCH res_switch par_abre Identificador par_cierra llave_abre  <br>SWITCH_ENTRADAS<br> res_default <span color=\"#FF0042\">sim_dos_puntos</span> llave_cierra");
            break;

        // GRAMÁTICA: IF
        case 7012:
            err_gramatica.add("IF res_if <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra llave_abre <br>SENTENCIA_STARTUP<br> llave_cierra");
            break;
        case 7013:
            err_gramatica.add("IF res_if par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> llave_abre <br>SENTENCIA_STARTUP<br> llave_cierra");
            break;
        case 7014:
            err_gramatica.add("IF res_if par_abre CONDICION par_cierra <span color=\"#FF0042\">llave_abre</span> <br>SENTENCIA_STARTUP<br> llave_cierra");
            break;    
        case 7015:
            err_gramatica.add("IF res_if par_abre CONDICION par_cierra llave_abre <br>SENTENCIA_STARTUP<br> llave_cierra res_else <span color=\"#FF0042\">llave_abre</span>      <br>SENTENCIA_STARTUP<br> llave_cierra");
            break;
        case 7016:
            err_gramatica.add("IF res_if par_abre CONDICION par_cierra llave_abre <br>SENTENCIA_STARTUP<br> llave_cierra <span color=\"#FF0042\">res_else</span> llave_abre      <br>SENTENCIA_STARTUP<br> llave_cierra");
            break;
        case 7017:
            err_gramatica.add("IF res_if par_abre CONDICION par_cierra llave_abre <br>SENTENCIA_STARTUP<br> llave_cierra");
            break;

        // GRAMÁTICA: PARAMETRO
        case 7018:
            err_gramatica.add("PARAMETRO::= PARAMETRO <span color=\"#FF0042\">coma</span> DECLARACION");
            break;

        // GRAMÁTICA: MODE
        case 7019:
            err_gramatica.add("MODE res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 7020:
            err_gramatica.add("MODE res_model par_abre VALOR_NUMERICO <span color=\"#FF0042\">coma</span> VALOR_NUMERICO par_cierra sig_punto_coma");
            break;
        case 7021:
            err_gramatica.add("MODE res_model par_abre VALOR_NUMERICO <span color=\"#FF0042\">coma</span> VALOR_NUMERICO <span color=\"#FF0042\">coma</span> VALOR_NUMERICO par_cierra sig_punto_coma");
            break;
        case 7022:
            err_gramatica.add("MODE res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 7023:
            err_gramatica.add("MODE res_model <span color=\"#FF0042\">par_abre</span> VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma");
            break;
        case 7024:
            err_gramatica.add("MODE res_model <span color=\"#FF0042\">par_abre</span> VALOR_NUMERICO coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 7025:
            err_gramatica.add("MODE res_model <span color=\"#FF0042\">par_abre</span> VALOR_NUMERICO coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 7026:
            err_gramatica.add("MODE res_model <span color=\"#FF0042\">par_abre</span>VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra]sig_punto_coma");
            break;
        case 7027:
            err_gramatica.add("MODE res_model <span color=\"#FF0042\">par_abre</span>VALOR_NUMERICO <span color=\"#FF0042\">par_cierra]sig_punto_coma");
            break;
        case 7028:
            err_gramatica.add("MODE res_model <span color=\"#FF0042\">par_abre</span>VALOR_NUMERICO coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra]sig_punto_coma");
            break;

        
        //GRAMÁTICA: CONDICION
        case 7030:
            err_gramatica.add("CONDICION VALOR_NUMERICO OPERADOR_CONDICIONAL <span color=\"#FF0042\">VALOR_NUMERICO</span>");
            break;
        case 7031:
            err_gramatica.add("CONDICION <span color=\"#FF0042\">par_abre CONDICION par_cierra</span> OPERADOR_CONDICIONAL <span color=\"#FF0042\">par_abre CONDICION par_cierra</span>");
            break;
        case 7032:
            err_gramatica.add("CONDICION par_abre CONDICION par_cierra <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> par_abre CONDICION par_cierra");
            break;
        case 7033:
            err_gramatica.add("CONDICION VALOR_NUMERICO <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> VALOR_NUMERICO");
            break;
        case 7034:
            err_gramatica.add("CONDICION log_not <span color=\"#FF0042\">Identificador</span> OPERADOR_CONDICIONAL VALOR_NUMERICO");
            break;
        case 7035:
            err_gramatica.add("CONDICION <span color=\"#FF0042\">VALOR_NUMERICO</span> OPERADOR_CONDICIONAL <span color=\"#FF0042\">VALOR_NUMERICO</span>");
            break;
        case 7036:
            err_gramatica.add("CONDICION VALOR_NUMERICO <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> VALOR_NUMERICO");
            break;
        case 7037:
            err_gramatica.add("CONDICION <span color=\"#FF0042\">cadena_caracter</span> OPERADOR_CONDICIONAL <span color=\"#FF0042\">cadena_caracter</span>");
            break;
        case 7038:
            err_gramatica.add("CONDICION <span color=\"#FF0042\">cadena_caracter</span> OPERADOR_CONDICIONAL VALOR_NUMERICO");
            break;

        //GRAMÁTICA: WAIT
        case 7039:
            err_gramatica.add("WAIT res_wait par_abre CONDICION par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 7040:
            err_gramatica.add("WAIT res_wait <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra sig_punto_coma");
            break;
        case 7041:
            err_gramatica.add("WAIT res_wait par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
  // GRAMÁTICA: RETURN 

            case 717:
                err_gramatica.add("RETURN ::= res_return Identificador <span color=\"#FF0042\">sig_punto_coma</span>");
                break;
            case 718:
                err_gramatica.add("RETURN ::= res_return TIPO_DATO <span color=\"#FF0042\">sig_punto_coma</span>");
                break;            
// GRAMÁTICA: ESTRUCTURA_BASICA

            case 700:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">STARTUP_CONFIG</p>");
                break;
            case 701:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">CONFIG</p>");
                break;   
            case 702:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">STARTUP</p>");
                break;   
            case 703:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">FUNCIONES</p>");
                break;   
            case 704:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">FUNCIONES CONFIG</p>");
                break;           
            case 705:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">FUNCIONES STARTUP</p>");
                break;
            case 706:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">STARTUP FUNCIONES</p>");
                break;  
   // GRAMÁTICA: CONFIG 
            case 21: 
                err_gramatica.add("CONFIG ::= res_config <span color=\"#FF0042\">llave_abre </span> SENTENCIA_CONFIG llave_cierra ");
                break;               
// GRAMÁTICA: DECLARACIÓN

            case 719:
                err_gramatica.add("DECLARACION ::= res_def TIPO_DATO Identificador VALOR <span color=\"#FF0042\">sig_punto_coma</span> ");
                break;
            case 720:
                err_gramatica.add("DECLARACION ::= <span color=\"#FF0042\">res_def</span> TIPO_DATO Identificador sig_punto_coma");
                break;    
            case 721:
                err_gramatica.add("DECLARACION ::= res_def TIPO_DATO Identificador asi_asignacion VALOR <span color=\"#FF0042\">sig_punto_coma</span>");
                break;  
            case 722:      
                err_gramatica.add("DECLARACION ::= <span color=\"#FF0042\">res_def</span> TIPO_DATO Identificador asi_asignacion VALOR sig_punto_coma");
                break;
            case 723:
                err_gramatica.add("DECLARACION ::=  res_def res_pin <span color=\"#FF0042\">par_abre Numero coma Identificador par_cierra</span> sig_punto_coma");
                break; 
            case 724:
                err_gramatica.add("DECLARACION ::= res_def res_pin <span color=\"#FF0042\">Identificador</span> asi_asignacion VALOR sig_punto_coma");
                break; 
            case 725:
                err_gramatica.add("DECLARACION ::= res_def res_pin par_abre Numero coma <span color=\"#FF0042\">Identificador</span> par_cierra sig_punto_coma");
                break; 
            case 726:
                err_gramatica.add("DECLARACION ::= res_def res_display par_abre <span color=\"#FF0042\">DISPLAY_PARAMS</span> par_cierra sig_punto_coma");
                break;
            case 727:
                err_gramatica.add("DECLARACION ::= res_def res_function <span color=\"#FF0042\">TIPO_DATO Identificador</span></span> par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION  llave_cierra");
                break;
            case 728:
                err_gramatica.add("DECLARACION ::= res_def res_function res_void <span color=\"#FF0042\">Identificador</span> par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION    llave_cierra");
                break;
            case 729:
                err_gramatica.add("DECLARACION ::= res_def res_type par_abre <span color=\"#FF0042\">Identificador coma TYPE_IO</span> par_cierra sig_punto_coma");
                break;
            case 730:
                err_gramatica.add("DECLARACION ::= res_def res_scale par_abre <span color=\"#FF0042\">Identificador coma Numero coma Numero</span> par_cierra sig_punto_coma");
                break;
            case 731:
                err_gramatica.add("DECLARACION ::= res_def res_volt par_abre <span color=\"#FF0042\">Identificador coma Numero</span> par_cierra sig_punto_coma");
                break;
            case 732:
                err_gramatica.add("DECLARACION ::= res_def res_volt par_abre <span color=\"#FF0042\">Identificador coma Numero coma Numero</span> par_cierra sig_punto_coma");
                break;
    //GRAMATICA: PIN 
            case 22:
            err_gramatica.add("PIN ::= res_pin par_abre Numero coma Identificador par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
            case 23:  
            err_gramatica.add("PIN ::= res_pin par_abre <span color=\"#FF0042\">Numero coma</span> Identificador par_cierra sig_punto_coma");
            break;
            case 24:
            err_gramatica.add("PIN ::= res_pin par_abre Numero <span color=\"#FF0042\"> coma Identificador </span> par_cierra sig_punto_coma");
            break;
            case 25:
            err_gramatica.add("PIN ::= res_pin par_abre <span color=\"#FF0042\"> Numero coma Identificador </span>par_cierra sig_punto_coma");
            break;
            case 26:
            err_gramatica.add("PIN ::= res_pin <span color=\"#FF0042\">par_abre</span> Numero coma Identificador par_cierra sig_punto_coma");
            break;
            case 27:
            err_gramatica.add("PIN ::= res_pin par_abre Numero coma Identificador <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
 // GRAMÁTICA: DISPLAY_PARAMS

            case 733:
                err_gramatica.add("DISPLAY_PARAMS ::= Numero coma <span color=\"#FF0042\">Numero</span>");
                break;
            case 734:
                err_gramatica.add("DISPLAY_PARAMS ::= Numero <span color=\"#FF0042\">coma</span> DISPLAY_PARAMS");
                break;    
            case 735:
                err_gramatica.add("DISPLAY_PARAMS ::= Numero coma<span color=\"#FF0042\"> Numero</span> coma <span color=\"#FF0042\"> Numero</span> coma <span color=\"#FF0042\"> Numero</span>");
                break;
            case 736:
                err_gramatica.add("DISPLAY_PARAMS ::= Numero coma <span color=\"#FF0042\"> Numero</span> coma Numero");
                break;   
//GRAMATICA: TYPE 
            case 28:
            err_gramatica.add("TYPE ::= res_type par_abre Identificador coma TYPE_IO par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
            case 29:
            err_gramatica.add("TYPE ::= res_type <span color=\"#FF0042\">par_abre</span> Identificador coma TYPE_IO par_cierra sig_punto_coma");
            break;
            case 201:
            err_gramatica.add("TYPE ::= res_type par_abre Identificador coma TYPE_IO <span color=\"#FF0042\"> par_cierra</span> sig_punto_coma");
            break;
            case 202:
            err_gramatica.add("TYPE ::= res_type <span color=\"#FF0042\">par_abre</span> Identificador coma TYPE_IO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
            case 203:
            err_gramatica.add("TYPE ::= res_type par_abre Identificador <span color=\"#FF0042\">coma</span> TYPE_IO par_cierra sig_punto_coma");
            break;
            case 204:
            err_gramatica.add("TYPE ::= res_type par_abre <span color=\"#FF0042\">Identificador coma</span> TYPE_IO par_cierra sig_punto_coma");
            break;
            case 205:
            err_gramatica.add("TYPE ::= res_type par_abre Identificador coma <span color=\"#FF0042\">TYPE_IO</span> par_cierra sig_punto_coma");
            break;
            case 206:
            err_gramatica.add("TYPE ::= res_type par_abre <span color=\"#FF0042\">Identificador coma TYPE_IO </span> par_cierra sig_punto_coma");
            break;
            case 207:
            err_gramatica.add("TYPE ::= res_type par_abre <span color=\"#FF0042\">Identificador</span> coma TYPE_IO par_cierra sig_punto_coma");
            break;
            case 208:
            err_gramatica.add("TYPE ::= res_type par_abre Identificador coma <span color=\"#FF0042\"> TYPE_IO par_cierra</span> sig_punto_coma");
            break;   
            // GRAMÁTICA: SCALE
            case 737:
            err_gramatica.add("SCALE ::= res_scale par_abre Identificador coma Numero coma Numero par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break; 
            case 738:
            err_gramatica.add("SCALE ::= res_scale par_abre <span color=\"#FF0042\">Identificador</span> coma Numero coma Numero par_cierra sig_punto_coma");
            break; 
            case 739:
            err_gramatica.add("SCALE ::= res_scale par_abre Identificador <span color=\"#FF0042\">coma Numero coma Numero</span> par_cierra sig_punto_coma");
            break; 
            case 740:
            err_gramatica.add("SCALE ::= es_scale par_abre <span color=\"#FF0042\"> Numero coma Numero coma</span> Identificador par_cierra sig_punto_coma");
            break;
            case 741:
            err_gramatica.add("SCALE ::= res_scale par_abre <span color=\"#FF0042\"> Numero coma </span>  Identificador par_cierra sig_punto_coma");
            break; 
            case 742:
            err_gramatica.add("SCALE ::= res_scale <span color=\"#FF0042\"> par_abre </span> Identificador coma Numero coma Numero par_cierra sig_punto_coma");
            break; 
            case 743:
            err_gramatica.add("SCALE ::= res_scale par_abre Identificador coma Numero coma Numero <span color=\"#FF0042\"> par_cierra </span> sig_punto_coma");
            break; 
        case 500: 
            err_msj.add("res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma");
            break; 
        case 501: 
            err_msj.add("res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break; 
        case 502: 
            err_msj.add("res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra sig_punto_coma");
            break; 
        case 503: 
            err_msj.add("res_do llave_abre SENTENCIA_STARTUP llave_cierra <span color=\"#FF0042\">res_while</span> par_abre CONDICION par_cierra sig_punto_coma");
            break; 
        case 504: 
            err_msj.add("res_do llave_abre SENTENCIA_STARTUP <span color=\"#FF0042\">llave_cierra</span> res_while par_abre CONDICION par_cierra sig_punto_coma");
            break; 
        case 505: 
            err_msj.add("res_do llave_abre <span color=\"#FF0042\">SENTENCIA_STARTUP</span> llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma");
            break; 
        case 506: 
            err_msj.add("res_do <span color=\"#FF0042\">llave_abre</span> SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma");
            break;      


        case 9999: // CASO DE ERROR GENERAL, GENERA UN NULL PARA NO PERDER LA RELACION ENTRE err_msj - err_linea y err_gramatica
            err_gramatica.add(null);
            break;
        case 10:// este es el id para los errores semanticos de Jon
                err_gramatica.add(null);
                break;    
        }
        
           
    }




:}

terminal res_if,
   res_else,
   res_while,
 res_do,
 res_for,
res_exit,
 res_return,
  res_function,
  res_void,
 res_null,
  res_input,
 res_output,
res_in,
res_out,
res_def,
res_true,
res_false,
res_start,
res_end,
res_array,
res_type,
res_display,rel_igual,
res_config,
res_scale,
res_pin,
res_volt,
res_wait,
res_model,
res_sleep,
res_switch,
res_default,
res_name, res_max_volt,
asi_asignacion,
ari_suma,
ari_resta,
ari_multiplicacion,
ari_division,
log_and,
log_or,
log_xor,
log_not,
rel_menor,
rel_mayor,
rel_menor_igual,
 rel_mayor_igual,
rel_diferente,
 sig_punto_coma,
par_abre,
par_cierra,
llave_abre,
llave_cierra,
cor_abre,
cor_cierra,
sim_dos_puntos,
tip_tinyint,tip_int,tip_float, tip_double,tip_char,tip_boolean,

Identificador,
Numero,coma,cadena_caracter,
Numero_incorrecto1,Numero_incorrecto2,Identificador_no_valido,Error_simbo_punto,Error_simbolo_no_valido,Error_numerico,Numero_incorrecto3,Numero_incorrecto4,ERROR;
non terminal INICIO, ESTRUCTURA_BASICA,DECLARACION, 
FUNCIONES, FUNCION, CONFIG, STARTUP,SENTENCIA_STARTUP,SENTENCIA_CONFIG, TIPO_DATO, PARAMETRO , PIN, DISPLAY, DISPLAY_PARAMS,
TYPE, TYPE_IO, SCALE,DOWHILE,EXPRESION, OPERACION,IF,CASO,WHILE,SWITCH,SWITCH_ENTRADAS,VOLT, MAX_VOLT, WAIT, CONDICION, MODE, 
VALOR_NUMERICO ,OPERADORES_CONTRACCION,INCREMENTO_FOR,INCREMENTO,FOR,OUT,SLEEP,OPERACION_PROC, OPERADOR,VALOR,TIPO_DATO_FOR, 
OPERADOR_CONDICIONAL,RETURN,IN,SENTENCIA_FUNCION,OPERADOR_ARITMETICO,METODO_INCREMENTO,OPERACION_CONTRACCION,OPE,TERM,FACTOR,DECLARACION_PARAMETRO,CALL_FUNCTION,PARAMETRO_CALL_FUNCTION;


start with INICIO;

INICIO ::= 
    res_name Identificador sig_punto_coma 
    ESTRUCTURA_BASICA  |
    res_name Identificador  
    ESTRUCTURA_BASICA  
        {:
            err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(41);
        :}|
    res_name sig_punto_coma  
    ESTRUCTURA_BASICA  
        {:
            err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador antes del punto y coma");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(42);
        :}|
    Identificador sig_punto_coma  
    ESTRUCTURA_BASICA  
        {:
            err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra reservada name antes del identificador");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(43);
        :}|
    res_name 
    ESTRUCTURA_BASICA  
        {:
            err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador despues de la palabra reservada name");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(44);
        :} | 
    error sig_punto_coma
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    :}
;

ESTRUCTURA_BASICA ::=
    FUNCIONES CONFIG STARTUP |
    CONFIG STARTUP FUNCIONES |
    CONFIG FUNCIONES STARTUP |
    CONFIG FUNCIONES STARTUP FUNCIONES |
    FUNCIONES CONFIG STARTUP FUNCIONES |
    FUNCIONES CONFIG FUNCIONES STARTUP |
    FUNCIONES CONFIG FUNCIONES STARTUP FUNCIONES |
    CONFIG STARTUP |
    STARTUP CONFIG 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba que bloque CONFIG se situara antes del bloque START-END");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(700);
    :} |
    CONFIG 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el bloque START-END después del bloque CONFIG");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(701);
     :} |
    STARTUP
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el bloque CONFIG antes del bloque START-END");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(702);
    :} |
    FUNCIONES
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban los bloques CONFIG y START-END");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(703);
    :} |
    FUNCIONES CONFIG
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el bloque START-END después del bloque CONFIG");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(704);
    :} |
    CONFIG FUNCIONES
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el bloque START-END después del bloque CONFIG");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(705);
    :} |
    FUNCIONES STARTUP
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el bloque CONFIG antes del bloque START-END");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(706);
    :} |
    STARTUP FUNCIONES
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el bloque CONFIG antes del bloque START-END");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
         errores_gramatica(706);
    :} 
;

FUNCIONES ::=
    FUNCIONES FUNCION | FUNCION
;

FUNCION ::=
    res_function:i TIPO_DATO Identificador:id par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra:f {:
        rollist(id,"Funcion",null,iright+1,fright+1);
    :}|
    res_function:i res_void Identificador:id par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra:f {:
        rollist(id,"Funcion",null,iright+1,fright+1);
    :}| 
    res_function:i res_void Identificador:id par_abre par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra:f {:
        rollist(id,"Funcion",null,iright+1,fright+1);
    :}|
    res_function Identificador par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la especificación del tipo de dato de retorno después de function");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(45);
    :} |
    res_function TIPO_DATO par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION 
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador para la función después del tipo de dato a retorno");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(46);
    :} |
    res_function par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un tipo de dato retorno e identificador para la función");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(47);
    :} | 
    res_function TIPO_DATO Identificador PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después del identificador de la función");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(48);
    :} |
    res_function TIPO_DATO Identificador par_abre PARAMETRO llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros de la función");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(49);
    :} |
    res_function TIPO_DATO Identificador PARAMETRO llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paretesis de apertura y cierre en la especificación de parámetros de la función");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(401);
    :} |
    TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra reservada function antes del tipo de dato de retorno");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(402);
    :} |
    Identificador par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra reservada function y el tipo de dato de retorno antes del identificador de la función");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(403);
    :} |
    res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra 
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura después de los parámetros de la función");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(404);
    :}
;
CALL_FUNCTION ::=
    Identificador par_abre PARAMETRO_CALL_FUNCTION par_cierra sig_punto_coma
;

PARAMETRO_CALL_FUNCTION ::=
    VALOR | PARAMETRO_CALL_FUNCTION coma VALOR
;

RETURN ::=
    res_return Identificador sig_punto_coma | 
    res_return sig_punto_coma | 
    res_return Identificador {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; después de identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(717);
    :} |
    res_return TIPO_DATO {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; después del tipo de dato");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(718);
    :} | 
    error sig_punto_coma
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    :}
;
CONFIG ::= 
    res_config:i llave_abre 
        SENTENCIA_CONFIG   
    llave_cierra:f {:
        var_inicioConfig.add(iright+1);
        var_finConfig.add(fright+1);
    :}| 
    res_config
        SENTENCIA_CONFIG   
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura al inicio del bloque config");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(21);
    :} 
    | error sig_punto_coma
    | error llave_cierra
;

STARTUP ::= 
    res_start:i sig_punto_coma
        SENTENCIA_STARTUP
    res_end sig_punto_coma:f {:
        var_inicioStart.add(iright+1);
        var_finStart.add(fright+1);
    :}|
    res_start
        SENTENCIA_STARTUP
    res_end {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba punto y coma después de las palabras reservadas start y end");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(405);
    :} |
    res_start sig_punto_coma
        SENTENCIA_STARTUP
    res_end {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba punto y coma después de la palabra reservada end");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(406);
    :} |
    res_start
        SENTENCIA_STARTUP
    res_end sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba punto y coma después de la palabra reservada start");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(407);
    :} 
;

SENTENCIA_CONFIG ::=
    DECLARACION | SENTENCIA_CONFIG DECLARACION |
    PIN | SENTENCIA_CONFIG PIN |
    DISPLAY | SENTENCIA_CONFIG DISPLAY |
    TYPE | SENTENCIA_CONFIG TYPE |
    SCALE | SENTENCIA_CONFIG SCALE |
    VOLT | SENTENCIA_CONFIG VOLT |
    MAX_VOLT | SENTENCIA_CONFIG MAX_VOLT |
    MODE | SENTENCIA_CONFIG MODE |error sig_punto_coma
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    :}
;

SENTENCIA_STARTUP ::=
   DECLARACION | SENTENCIA_STARTUP DECLARACION | 
   VOLT | SENTENCIA_STARTUP VOLT |
   WAIT | SENTENCIA_STARTUP WAIT |
   RETURN| SENTENCIA_STARTUP RETURN |
   res_exit | SENTENCIA_STARTUP res_exit |
   IF | SENTENCIA_STARTUP IF |
   SWITCH | SENTENCIA_STARTUP SWITCH |
   WHILE | SENTENCIA_STARTUP WHILE |
   DOWHILE | SENTENCIA_STARTUP DOWHILE |
   EXPRESION | SENTENCIA_STARTUP EXPRESION |
   IN | SENTENCIA_STARTUP IN |
   OUT | SENTENCIA_STARTUP OUT |
   SLEEP | SENTENCIA_STARTUP SLEEP |
   FOR | SENTENCIA_STARTUP FOR |
   OPERADORES_CONTRACCION | SENTENCIA_STARTUP OPERADORES_CONTRACCION |
   CALL_FUNCTION | SENTENCIA_STARTUP CALL_FUNCTION
;

SENTENCIA_FUNCION ::=
   DECLARACION | SENTENCIA_FUNCION DECLARACION | 
   VOLT | SENTENCIA_FUNCION VOLT |
   WAIT | SENTENCIA_FUNCION WAIT |
   RETURN| SENTENCIA_FUNCION RETURN |
   res_exit | SENTENCIA_FUNCION res_exit |
   IF | SENTENCIA_FUNCION IF |
   SWITCH | SENTENCIA_FUNCION SWITCH |
   WHILE | SENTENCIA_FUNCION WHILE |
   DOWHILE | SENTENCIA_FUNCION DOWHILE |
   EXPRESION | SENTENCIA_FUNCION EXPRESION |
   IN | SENTENCIA_FUNCION IN |
   OUT | SENTENCIA_FUNCION OUT |
   SLEEP | SENTENCIA_FUNCION SLEEP |
   FOR | SENTENCIA_FUNCION FOR |
   OPERADORES_CONTRACCION | SENTENCIA_FUNCION OPERADORES_CONTRACCION 
;

DECLARACION ::= 
    res_def:i TIPO_DATO:dato Identificador:id sig_punto_coma:f
    {: //vamos a validar cuando aparecen estas expresiones
        if(!idExiste(id+"")){
            System.out.println("tipo: "+ dato + " identificador: "+ id + " valor null ");
            var_identificador.add(id);
            var_tipo_dato.add(dato);
            var_valor.add(null);
            rollist(id, "Variable", dato, iright+1, fright+1);
            System.out.println(var_identificador.size());
        }else{
            err_msj.add("Error Semantico en la línea " + (fright+1) + " variable " + id + " ya declarada");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(10);
        }
    :} |
    res_def:i TIPO_DATO:dato Identificador:id asi_asignacion VALOR:val sig_punto_coma:f  
    {: //vamos a validar cuando aparecen estas expresiones
        if(!idExiste(id+"")){
            System.out.println("tipo: "+ dato + " identificador: "+ id + " valor null ");
            var_identificador.add(id);
            var_tipo_dato.add(dato);
            var_valor.add(val);
            rollist(id, "Variable", dato, iright+1, fright+1);
            System.out.println(var_identificador.size());
        }else{
            err_msj.add("Error Semantico en la línea " + (fright+1) + " variable " + id + " ya declarada");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(10);
        }
    :} 
    |
    res_def:i TIPO_DATO:dato Identificador:id asi_asignacion CALL_FUNCTION sig_punto_coma:f
    {: //vamos a validar cuando aparecen estas expresiones
        if(!idExiste(id+"")){
            System.out.println("tipo: "+ dato + " identificador: "+ id + " valor null ");
            var_identificador.add(id);
            var_tipo_dato.add(dato);
            //var_valor.add(val);
            rollist(id, "Variable", dato, iright+1, fright+1);
            System.out.println(var_identificador.size());
        }else{
            err_msj.add("Error Semantico en la línea " + (fright+1) + " variable " + id + " ya declarada");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(10);
        }
    :}|
    res_def TIPO_DATO Identificador {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final de la declaración");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(719);
    :} |
    TIPO_DATO Identificador sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra reservada def al inicio de la declaración");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(720);
    :} |
    res_def TIPO_DATO Identificador asi_asignacion VALOR {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final de la declaración");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(721);
    :} |
    TIPO_DATO Identificador asi_asignacion VALOR sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra reservada def al inicio de la declaración");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(722);
    :} |
    res_def res_pin Identificador sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(723);
    :} |
    res_def res_pin Identificador asi_asignacion VALOR sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(724);
    :} |
    res_def res_pin par_abre Numero coma Identificador par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(725);
    :} |
    res_def res_display par_abre DISPLAY_PARAMS par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método display");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(726);
    :} |
    res_def res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis para la creación de funciones");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(728);
    :} |
    res_def res_function res_void Identificador par_abre PARAMETRO par_cierra llave_abre
        SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis para la creación de funciones");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)); 
        errores_gramatica(728);
        :} |
    res_def res_type par_abre Identificador coma TYPE_IO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(729);
    :} |
    res_def res_scale par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(730);
    :} |
    res_def res_volt par_abre Identificador coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(731);
    :} |
    res_def res_volt par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(732);
    :} 
;

PIN ::= 
    res_pin:i par_abre Numero coma Identificador:id par_cierra 
    sig_punto_coma:f {: 
        rollist(id,"Pin",null,iright+1,fright+1);
    :}|
    res_pin par_abre Numero coma Identificador par_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(22);
    :}  |
    res_pin par_abre Identificador par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba número de pin antes de identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(23);
    :}  |
    res_pin par_abre Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador de pin después del número de pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(24);
    :} |
    res_pin par_abre Identificador coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba número de pin como primer parámetro del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(25);
    :} |
    res_pin Numero coma Identificador par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(26);
    :} |
    res_pin Numero par_abre coma Identificador sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(27);
    :}
;

DISPLAY ::=
    res_display par_abre DISPLAY_PARAMS par_cierra sig_punto_coma |
    res_display par_abre DISPLAY_PARAMS par_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método display");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(408);
    :}  | 
    res_display par_abre par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba número(s) de pin para display como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(409);
    :} |
    res_display DISPLAY_PARAMS par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada display");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(410);
    :} |
    res_display par_abre DISPLAY_PARAMS sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros del método display");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(411);
    :}
;

DISPLAY_PARAMS ::=
    Numero | 
    Numero coma DISPLAY_PARAMS|
    Numero coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor entero después de la coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(733);
    :}|
    Numero DISPLAY_PARAMS {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una coma entre cada parámetro");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(734);
    :}|
    Numero coma coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor entero después de cada coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(735);
    :}|
    Numero coma coma coma{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor entero después de cada coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(736);
    :}|
    Numero coma coma coma coma{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor entero después de cada coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(736);
    :}|
    Numero coma coma Numero{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor entero después de cada coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(736);
    :}|
    error sig_punto_coma
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    :}
;

TYPE ::=
    res_type par_abre Identificador coma TYPE_IO par_cierra sig_punto_coma |
    res_type par_abre Identificador coma TYPE_IO par_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(28);
    :}|
    res_type Identificador coma TYPE_IO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después la palabra reservada type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(29);
    :}|
    res_type par_abre Identificador coma TYPE_IO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(201);
    :}|
    res_type Identificador coma TYPE_IO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paréntesis encerrando los parámetros del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(202);
    :}| 
    res_type par_abre Identificador TYPE_IO  par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma separando los parámetros del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(203);
    :}| 
    res_type par_abre TYPE_IO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador como primer parámetro del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(204);
    :}| 
    res_type par_abre Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba INPUT o OUTPUT como segundo parámetro del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(205);
    :}| 
    res_type par_abre par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador y INPUT o OUTPUT como parámetros del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(206);
    :}| 
    res_type par_abre Numero coma TYPE_IO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador como primer parámetro del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(207);
    :} |
    res_type par_abre Identificador coma TYPE_IO coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban sólo dos parámetros dentro del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(208);
    :} 
;

TYPE_IO ::=
    res_input | 
    res_output |
    res_input res_output {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo parámetro input/output");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(412);
    :} |
    res_output res_input {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo parámetro input/output");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(412);
    :} |
    error sig_punto_coma
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    :}
;

SCALE ::=
    res_scale par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma |
    res_scale par_abre Identificador coma Numero coma Numero par_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(737);
    :} |
    res_scale par_abre Numero coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador del pin como primer parámetro del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(738);
    :} | 
    res_scale par_abre Identificador coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban dos parámetros numéricos después del identificador del pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(739);
    :} | 
    res_scale par_abre Numero coma Numero coma Identificador par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador del pin como primer parámetro del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(740);
    :} |
    res_scale par_abre Numero coma Identificador par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador del pin como primer parámetro del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(741);
    :} |
    res_scale Identificador coma Numero coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(742);
    :} |
    res_scale par_abre Identificador coma Numero coma Numero sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(743);
    :}
;

VOLT ::=
    res_volt par_abre Identificador coma Numero par_cierra sig_punto_coma |
    res_volt par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma |
    res_volt par_abre Identificador coma Numero par_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(337);
    :} |
    res_volt par_abre Identificador coma Numero coma Numero par_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(338);
    :} |
    res_volt par_abre Numero coma Identificador par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador como primer parámetro del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(339);
    :} |
    res_volt par_abre Numero coma Identificador coma Numero par_cierra sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador como primer parámetro del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(340);
    :} |
    res_volt par_abre Numero coma Numero coma Identificador par_cierra sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador como primer parámetro del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(340);
    :} |
    res_volt par_abre Identificador Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba , entre los parámetros del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(341);
    :} |
    res_volt par_abre Identificador coma Numero Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba , entre los parámetros del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(342);
    :} |
    res_volt par_abre Identificador Numero coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba , entre los parámetros del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(342);
    :} |
    res_volt par_abre Identificador Numero Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba , entre los parámetros del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(342);
    :} |
    res_volt Identificador coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(343);
    :} |
    res_volt par_abre Identificador coma Numero sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(344);
    :} |
    res_volt Identificador coma Numero coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(345);
    :} | 
    res_volt par_abre Identificador coma Numero coma Numero sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(346);
    :} |
    res_volt par_abre Identificador coma par_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un parámtetro antes del paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(347);
    :} |
    res_volt par_abre coma Numero par_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador después del paréntesis de apertura");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(348);
        :}
;

MAX_VOLT ::=
    res_max_volt par_abre Identificador par_cierra sig_punto_coma |
    res_max_volt par_abre Numero par_cierra sig_punto_coma |
    res_max_volt par_abre Identificador par_cierra  {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(413);
    :} |
    res_max_volt par_abre Numero par_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(414);
    :} |
    res_max_volt Identificador par_cierra sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(415);
    :} | 
    res_max_volt par_abre Identificador sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después del parámetro del método max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(416);
    :} | 
    res_max_volt Numero par_cierra sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(417);
    :} | 
    res_max_volt par_abre Numero sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después del parámetro del método max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(418);
    :} |
    res_max_volt par_abre cadena_caracter par_cierra sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor numérico como parámetro único del método max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(419);
    :} |
    res_max_volt asi_asignacion VALOR_NUMERICO sig_punto_coma{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor numérico encerrado entre paréntesis como parámetro único");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(420);
    :} |
    res_max_volt asi_asignacion par_abre VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor numérico encerrado entre paréntesis, no se admite asignación");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(420);
    :} 
;

WAIT ::=
    res_wait par_abre CONDICION par_cierra sig_punto_coma |
    res_wait par_abre CONDICION par_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método sleep");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7039);
    :}|
    res_wait CONDICION par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada wait");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7040);
    :} |
    res_wait par_abre CONDICION sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de la condición del método wait");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7041);
    :}
;

CONDICION ::=
    VALOR_NUMERICO OPERADOR_CONDICIONAL VALOR_NUMERICO | par_abre CONDICION par_cierra |
    log_not Identificador | log_not Identificador OPERADOR_CONDICIONAL CONDICION
    | VALOR_NUMERICO | res_false | res_true |
    VALOR_NUMERICO OPERADOR_CONDICIONAL {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor después del operador condicional");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7030);
    :} | 
    res_false CONDICION {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba a cada condición separada por paréntesis y con un operardor condicional entre ambas");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7031);
    :} |
    res_true CONDICION {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba a cada condición separada por paréntesis y con un operardor condicional entre ambas");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7032);
    :} |
    VALOR_NUMERICO VALOR_NUMERICO {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una condición, imposible comparar valores");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7033);
    :} |
    log_not OPERADOR_CONDICIONAL VALOR_NUMERICO {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador después de símbolo de negación lógica");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7034);
    :} | 
    OPERADOR_CONDICIONAL {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor antes y después del operador condicional");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7035);
    :} |
    OPERADOR_CONDICIONAL VALOR_NUMERICO {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor antes del operador condicional");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7035);
    :} |
    VALOR_NUMERICO OPERADOR_CONDICIONAL OPERADOR_CONDICIONAL VALOR_NUMERICO {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo operador condicional");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7036);
    :} |
    cadena_caracter {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una condición válida, no se admiten cadenas");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7037);
    :} |
    cadena_caracter OPERADOR_CONDICIONAL cadena_caracter {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una condición válida, no se admiten cadenas");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7037);
    :} | 
    cadena_caracter OPERADOR_CONDICIONAL VALOR_NUMERICO {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una condición válida, no se admiten cadenas");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7037);
    :}|
    error sig_punto_coma
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    :}
;


OPERADOR_CONDICIONAL ::=
     log_xor | log_and | log_or | rel_diferente | rel_igual | rel_mayor_igual | rel_mayor | rel_menor_igual | rel_menor |
     coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un operador condicional");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(421);
    :} | asi_asignacion {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un operador condicional");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(421);
    :}
;

MODE ::=
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO par_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método mode");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7019);
    :}|
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método mode");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7019);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método mode");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7019);
    :} |
    res_model par_abre VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7020);
    :} |
    res_model par_abre VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7020);
    :} | 
    res_model par_abre VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7020);
    :} | 
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7021);
    :} |
    res_model par_abre VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7021);
    :} |
    res_model par_abre VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7021);
    :} |
    res_model par_abre VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7021);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7021);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7021);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7022);
    :} |
    res_model VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura antes de parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7023);
    :} |
    res_model VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paréntesis encerrando los parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7024);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7022);
    :} |
    res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura antes de parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7023);
    :} |
    res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paréntesis encerrando los parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7025);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
    errores_gramatica(7022);
    :} |
    res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura antes de parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7023);
    :} |
    res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paréntesis encerrando los parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7026);
    :} |
    res_model par_abre cadena_caracter coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7027);
    :} |
    res_model par_abre VALOR_NUMERICO coma cadena_caracter par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
         errores_gramatica(7027);
    :} | 
    res_model par_abre cadena_caracter coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7028);
    :} | 
    res_model par_abre VALOR_NUMERICO coma cadena_caracter coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7028);
    :} |
    res_model par_abre cadena_caracter coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7028);
    :} |
    res_model par_abre VALOR_NUMERICO coma cadena_caracter coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7028);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma cadena_caracter coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7028);
    :} 
;

TIPO_DATO ::= 
    tip_tinyint:tip{:RESULT = tip;:} | 
    tip_int:tip {:RESULT = tip;:}| 
    tip_boolean:tip {:RESULT = tip;:}| 
    tip_float:tip {:RESULT = tip;:}| 
    tip_double:tip {:RESULT = tip;:}| 
    tip_char:tip{:RESULT = tip;:}
;

VALOR ::=
    Numero:val {:RESULT = val;:}|
    Identificador:val {:RESULT = val;:}|
    cadena_caracter:val {:RESULT = val;:}|
    error sig_punto_coma
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    :}
    
;

VALOR_NUMERICO ::=
    Numero | Identificador
;

PARAMETRO ::=
    DECLARACION_PARAMETRO | 
    PARAMETRO coma DECLARACION_PARAMETRO |
    PARAMETRO DECLARACION_PARAMETRO {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban parámetros separados por coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7018);
    :} |
    error sig_punto_coma
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    :}
;

DECLARACION_PARAMETRO ::= 
    res_def:i TIPO_DATO:dato Identificador:id
    {: //vamos a validar cuando aparecen estas expresiones
        if(!idExiste(id+"")){
            System.out.println("tipo: "+ dato + " identificador: "+ id + " valor null ");
            var_identificador.add(id);
            var_tipo_dato.add(dato);
            var_valor.add(null);
            rollist(id, "Parámetro", dato, iright+1, iright+1);
            System.out.println(var_identificador.size());
        }else{
            err_msj.add("Error Semantico en la línea " + (iright+1) + " variable " + id + " ya declarada");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(10);
        }
    :} |
    res_def:i TIPO_DATO:dato Identificador:id asi_asignacion VALOR:val 
    {: //vamos a validar cuando aparecen estas expresiones
        if(!idExiste(id+"")){
            System.out.println("tipo: "+ dato + " identificador: "+ id + " valor "+val);
            var_identificador.add(id);
            var_tipo_dato.add(dato);
            var_valor.add(val);        
            rollist(id, "Parámetro", dato, iright+1,iright+1);
            System.out.println(var_identificador.size());
        }else{
            err_msj.add("Error Semantico en la línea " + (iright+1) + " variable " + id + " ya declarada");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(10);
        }
    :}  |
    TIPO_DATO Identificador {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada def al inicio de la declaración");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(349);

    :}  |
    TIPO_DATO Identificador asi_asignacion VALOR {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada def al inicio de la declaración");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(350);

    :} |
    res_def res_pin Identificador {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(351);

    :} |
    res_def res_pin Identificador asi_asignacion VALOR {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(352);

    :} |
    res_def res_pin par_abre Numero coma Identificador par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(351);

    :} |
    res_def res_display par_abre DISPLAY_PARAMS par_cierra  {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método display");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(351);

    :} |
    res_def res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis para la creación de funciones");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(351);

    :} |
    res_def res_function res_void Identificador par_abre PARAMETRO par_cierra llave_abre
        SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis para la creación de funciones");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(351);
 :} |
    res_def res_type par_abre Identificador coma TYPE_IO par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(351);

    :} |
    res_def res_scale par_abre Identificador coma Numero coma Numero par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(351);

    :} |
    res_def res_volt par_abre Identificador coma Numero par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(351);

    :} |
    res_def res_volt par_abre Identificador coma Numero coma Numero par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(351);

    :} 
;

IF ::=
    res_if par_abre CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra
    |
    res_if par_abre CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra 
    res_else 
    llave_abre
        SENTENCIA_STARTUP
    llave_cierra |
    res_if CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura antes de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7012);
    :} |
    res_if par_abre CONDICION llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7013);
    :} |
    res_if par_abre CONDICION par_cierra 
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura antes del bloque de código de if");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7014);
    :} |
    res_if CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra 
    res_else 
    llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura antes de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7012);
    :} |
    res_if par_abre CONDICION llave_abre
        SENTENCIA_STARTUP
    llave_cierra 
    res_else 
    llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7013);
    :} |
    res_if par_abre CONDICION par_cierra
        SENTENCIA_STARTUP
    llave_cierra 
    res_else 
    llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura antes del bloque de código de if");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7014);
    :} |
    res_if par_abre CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra 
    res_else 
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura antes del bloque de código de else");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7015);
    :} |
    res_if par_abre CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra 
    llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba else del bloque de código de else");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7016);
    :}
 ;

 SWITCH ::=
    res_switch par_abre Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra|
    res_switch par_abre Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra |
    res_switch Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7003);
    :} |
    res_switch par_abre Identificador llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7004);
    :} |
    res_switch Identificador llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paréntesis encerrando identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    :} | 
    res_switch par_abre par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    :} | 
    res_switch par_abre Numero par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    :} |
    res_switch par_abre cadena_caracter par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    :} |
    res_switch par_abre res_true par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    :} |
    res_switch par_abre res_false par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    :} |
    res_switch par_abre EXPRESION par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    :} |
    res_switch par_abre PARAMETRO par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    :} | 
    res_switch par_abre Identificador par_cierra
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura antes del bloque de entradas de la estructura switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7007);
    :} |
    res_switch par_abre Identificador par_cierra llave_abre
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban entradas dentro de la estructura switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7008);
    :} |
    res_switch par_abre Identificador par_cierra llave_abre
        SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban entradas validas dentro de la estructura switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7009);
    :} |
    res_switch Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7003);        
    :} |
    res_switch par_abre Identificador llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7004);
    :} |
    res_switch Identificador llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paréntesis encerrando identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    :} | 
    res_switch par_abre par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    :} | 
    res_switch par_abre Numero par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    :} |
    res_switch par_abre cadena_caracter par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    :} |
    res_switch par_abre res_true par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    :} |
    res_switch par_abre res_false par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    :} |
    res_switch par_abre EXPRESION par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    :} |
    res_switch par_abre PARAMETRO par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    :} | 
    res_switch par_abre Identificador par_cierra
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura antes del bloque de entradas de la estructura switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7007);
    :} |
    res_switch par_abre Identificador par_cierra llave_abre
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban entradas dentro de la estructura switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7008);
    :} |
    res_switch par_abre Identificador par_cierra llave_abre
        SENTENCIA_FUNCION
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban entradas validas dentro de la estructura switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7009);
    :} | 
    res_switch par_abre Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos 
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba al menos una sentencia dentro del default-case");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7010);
    :} | 
    res_switch par_abre Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba : después de la palabra reservada default");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7011);
    :} |
    res_switch par_abre Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
        sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba palabra reservada default");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7010);
    :}
;

SWITCH_ENTRADAS ::=
    rel_menor CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit | 
    SWITCH_ENTRADAS rel_menor CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit |
    CASO sim_dos_puntos SENTENCIA_STARTUP res_exit{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba < al inicio del case a evaluar y > al final del mismo");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(786);
    :} |
    CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba < al inicio del case a evaluar");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(787);
    :}|
    rel_menor CASO sim_dos_puntos SENTENCIA_STARTUP res_exit{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba > al final de case a evaluar");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(788);
    :} |
    rel_menor CASO rel_mayor SENTENCIA_STARTUP res_exit{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba : antes del bloque de instrucciones del case");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(789);
    :} |
    rel_menor CASO SENTENCIA_STARTUP res_exit{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" |Se esperaba > seguida de : al final de case a evaluar");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(790);
    :}|
    rel_menor Identificador rel_mayor sim_dos_puntos SENTENCIA_STARTUP  res_exit{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un número, una cadena o un valor boleando como case a evaluar, no se admiten valores dinámicos");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(791);
    :}|
    rel_menor CASO rel_mayor llave_abre SENTENCIA_STARTUP llave_cierra{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban dos puntos al final del case a evaluar y exit al final del bloque de instrucciones del case");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(792);
    :} |
    CASO SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba que el case a evaluar estuviera entre <> seguido de :");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(793);
    :} |
    SWITCH_ENTRADAS CASO sim_dos_puntos SENTENCIA_STARTUP res_exit{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba < al inicio del case a evaluar y > al final del mismo");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(794);
    :}|
    SWITCH_ENTRADAS CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba < al inicio del case a evaluar");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(795);
    :}|
    SWITCH_ENTRADAS rel_menor CASO sim_dos_puntos SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba > al final de case a evaluar");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(796);
    :}|
    SWITCH_ENTRADAS rel_menor CASO rel_mayor SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba : antes del bloque de instrucciones del case");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(797);
    :}|
    SWITCH_ENTRADAS rel_menor CASO SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" |Se esperaba > seguida de : al final de case a evaluar");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(798);
    :}|
    SWITCH_ENTRADAS rel_menor Identificador rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un número, una cadena o un valor boleando como case a evaluar, no se admiten valores dinámicos");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(799);
    :}|
    SWITCH_ENTRADAS rel_menor CASO rel_mayor llave_abre SENTENCIA_STARTUP llave_cierra res_exit {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban dos puntos al final del case a evaluar y exit al final del bloque de instrucciones del case");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7001);
    :}|
    SWITCH_ENTRADAS CASO SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba que el case a evaluar estuviera entre <> seguido de :");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7002);
    :}
;

CASO ::=
    Numero | cadena_caracter | res_true | res_false |
    Numero Numero {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    :} | 
    Numero coma Numero {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    :} |
    cadena_caracter ari_suma cadena_caracter {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    :} |
    Numero ari_suma cadena_caracter {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    :} |
    Numero ari_suma Numero {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    :} |
    cadena_caracter coma cadena_caracter {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    :} |
    Numero coma Identificador {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    :} 
;

WHILE ::=
    res_while par_abre CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra |
    res_while CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra{:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura antes de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(775);
    :} |
    res_while par_abre CONDICION llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(776);
    :} |
    res_while par_abre CONDICION par_cierra
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura antes del bloque de código del while");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(777);
    :} |
    res_while par_abre par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba condición antes del bloque de código del while");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(778);
    :} 
;

DOWHILE ::=
    res_do llave_abre
        SENTENCIA_STARTUP
    llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma
| 
    res_do llave_abre
        SENTENCIA_STARTUP
    llave_cierra res_while par_abre CONDICION par_cierra 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(774);
    :}|
    res_do llave_abre
        SENTENCIA_STARTUP
    llave_cierra res_while par_abre CONDICION  sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(500);
    :}|
    res_do llave_abre
        SENTENCIA_STARTUP
    llave_cierra res_while par_abre  par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un condición dentro del while");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(501);
    :}|
    res_do llave_abre
        SENTENCIA_STARTUP
    llave_cierra res_while CONDICION par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(502);
    :}|
    res_do llave_abre
        SENTENCIA_STARTUP
    llave_cierra  par_abre CONDICION par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra reservada while");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(503);
    :}|
    res_do llave_abre
        SENTENCIA_STARTUP
    res_while par_abre CONDICION par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una llave de cierre antes del while");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(504);
    :}|
    res_do llave_abre
    llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba como minimo una instrucción dentro de las llaves del do while");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(505);
    :}|
    res_do 
       SENTENCIA_STARTUP
    llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una llave de apertura despues de la palabra do");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(506);
    :}

;

EXPRESION ::=
    Identificador:id asi_asignacion OPE sig_punto_coma:l
    {: //Obtener variables usadas
        var_idSem.add(id);
        var_linExp.add(lright+1);
    :}|
    Identificador:id asi_asignacion:l IN
    {: //Obtener variables usadas
        var_idSem.add(id);
        var_linExp.add(lright+1);
    :}
;

OPE ::=
    OPE ari_suma:l TERM
    {: //Obtener variables usadas
        var_idSem.add("+");
        var_linExp.add(lright+1);
    :}| OPE ari_resta:l TERM
    {: //Obtener variables usadas
        var_idSem.add("-");
        var_linExp.add(lright+1);
    :}| TERM

;

TERM ::=
    TERM ari_multiplicacion:l FACTOR
    {: //Obtener variables usadas
        var_idSem.add("*");
        var_linExp.add(lright+1);
    :}| TERM ari_division:l FACTOR
    {: //Obtener variables usadas
        var_idSem.add("/");
        var_linExp.add(lright+1);
    :}| FACTOR      
;

FACTOR ::=
    VALOR:id
    {: //Obtener variable usadas
        //if(id.toString().matches("([(a-z)(A-Z)](\\w)*)")){
            var_idSem.add(id);
            var_linExp.add(idright+1);
        //}
    :}|
     par_abre OPE par_cierra | ari_resta:l FACTOR{: //Obtener variables usadas
        var_idSem.add("-");
        var_linExp.add(lright+1);
    :}
;

OPERACION_PROC ::=
    VALOR OPERADOR
;

OPERADOR ::=
    OPERADOR_CONDICIONAL| ari_division | ari_resta | ari_suma | ari_multiplicacion |
    error sig_punto_coma
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    :}
;

IN ::=
    res_in par_abre VALOR_NUMERICO par_cierra sig_punto_coma|
    res_in par_abre VALOR_NUMERICO par_cierra 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(765);
    :}|
    res_in par_abre VALOR_NUMERICO  sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(766);
    :}|
    res_in par_abre par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un parámetro único");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(767);
    :}|
    res_in  VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(768);
    :}|
    res_in  sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(769);
    :}
    
;

OUT ::=
    res_out par_abre Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma |
    res_out par_abre Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma |
    res_out par_abre res_display coma cadena_caracter par_cierra sig_punto_coma  |   
    res_out par_abre Identificador coma VALOR_NUMERICO par_cierra 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(744);
    :}|
    res_out par_abre Identificador coma VALOR_NUMERICO  sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(745);
    :}|
    res_out par_abre Identificador coma  par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un parámetro numérico antes del paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(746);
    :}|
    res_out par_abre Identificador VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una coma despues del identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(747);
    :}|
    res_out par_abre  coma VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador después del paréntesis de apertura");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(748);
    :}|
    res_out Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis después del out");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(749);
    :}|
    res_out par_abre  par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una instrucción completa");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(750);
    :}|
    res_out par_abre Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(751);
    :}|
    res_out par_abre Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO  sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(752);
    :}|
    res_out par_abre Identificador coma VALOR_NUMERICO coma par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un parámetro antes del paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(753);
    :}|
    res_out par_abre Identificador coma VALOR_NUMERICO  VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una coma entre los dos valores numéricos");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(754);
    :}|
    res_out par_abre Identificador coma  coma VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban dos parametros numéricos");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(755);
    :}|
    res_out par_abre Identificador VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una coma después del Identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(756);
    :}|
    res_out par_abre coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un Identificador después del paréntesis de apertura");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(757);
    :}|
    res_out Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura después del out"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(758);
    :} 
    
    |
    res_out par_abre res_display coma cadena_caracter par_cierra 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(759);
    :} |
    res_out par_abre res_display coma cadena_caracter sig_punto_coma 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre antes del punto y coma"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(760);
    :} |
    res_out par_abre res_display coma par_cierra sig_punto_coma 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un parametro entes del paréntesis"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(761);
    :} |
    res_out par_abre res_display cadena_caracter par_cierra sig_punto_coma 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una coma"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(762);
    :} |
    res_out par_abre coma cadena_caracter par_cierra sig_punto_coma 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la sentencia display como primer parámetro"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(763);
    :}  |
    res_out  coma cadena_caracter par_cierra sig_punto_coma 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura después de la palabra out"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(764);
    :} 
;

SLEEP ::=
    res_sleep par_abre VALOR_NUMERICO par_cierra sig_punto_coma |
    res_sleep par_abre EXPRESION par_cierra sig_punto_coma |
    res_sleep par_abre VALOR_NUMERICO par_cierra 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(325);
    :}|
    res_sleep par_abre VALOR_NUMERICO sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre antes del punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(326);
    :}|
    res_sleep par_abre par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor numérico o identificador como parámetro");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(327);
    :}|
    res_sleep VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura despues de la palabra reservada sleep");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(328);
    :}|
    res_sleep par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura despues de la palabra reservada sleep");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(329);
    :}|
    res_sleep sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura despues de la palabra reservada sleep");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(330);
    :}|
    res_sleep par_abre par_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un parámetro");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(331);
    :}|
    res_sleep par_abre VALOR_NUMERICO 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre después del parámetro");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(332);
    :}|
    res_sleep par_cierra VALOR_NUMERICO par_abre sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura después de la palabra reservada sleep");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(333);
    :}|
    res_sleep par_cierra VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura después de la palabra reservada sleep");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(334);
    :}|
    res_sleep par_abre VALOR_NUMERICO par_abre sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre antes del punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(335);
    :}
;

FOR ::=
    res_for par_abre res_def:i TIPO_DATO_FOR:dato Identificador:id asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra {:
        rollist(id,"Parámetro",dato,iright+1,iright+1);
    :} |
    res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra |
    res_for res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis después de la palabra reservada for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(39);
    :}|
    res_for par_abre Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el tipo de dato correspondiente al identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(310);
    :}|  
    res_for par_abre res_def TIPO_DATO_FOR asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador después del tipo de dato");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(311);
    :} |
    res_for par_abre res_def TIPO_DATO_FOR Identificador VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el operador de asignación en el apartado de declaración de variables");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(312);
    :}|
    res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor en el apartado de declaración de variables");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(313);
    :}|
    res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma antes de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(314);
    :}|
    res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una condición dentro de los parametros del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(315);
    :}|
    res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un operador de incremento dentro de los parametros del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(316);
    :}|
    res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre antes de la primera llave del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(317);
    :}|
    res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre 
    
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una llave de apertura despues del paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(318);
    :}|
    res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre 
    llave_abre
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba minimo una instrucción dentro de las llaves del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(319);
    :}|
    res_for par_abre sig_punto_coma sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una condición dentro de los parametros del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(320);
    :}|
    res_for par_abre  sig_punto_coma CONDICION sig_punto_coma par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un operador de incremento dentro de los parametros del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(321);
    :}|
    res_for par_abre  sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre antes de la primera llave del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(322);
    :}|
    res_for par_abre  sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre 
    
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una llave de apertura despues del paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(323);
    :}|
    res_for par_abre  sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre 
    llave_abre
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba minimo una instrucción dentro de las llaves del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(324);
    :}|
    res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra def antes del tipo de dato");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(336);
    :}

;
METODO_INCREMENTO ::=
 Identificador INCREMENTO | OPERACION_CONTRACCION
;

TIPO_DATO_FOR ::=
    tip_int:tipf{:RESULT = tipf;:} | 
    tip_float:tipf{:RESULT = tipf;:} | 
    tip_double:tipf{:RESULT = tipf;:} | 
    tip_tinyint:tipf{:RESULT = tipf;:} | 
    tip_boolean 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un tipo de dato numérico");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(37);
    :} |
    tip_char 
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un tipo de dato numérico");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(38);
    :} |
    error sig_punto_coma
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    :}
;
INCREMENTO ::=
    ari_suma ari_suma |
    ari_resta ari_resta |
    error sig_punto_coma
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    :}
;

OPERADOR_ARITMETICO ::=
    ari_suma | ari_resta | ari_multiplicacion | ari_division |
    error sig_punto_coma
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    :}
;                                                                                          

OPERACION_CONTRACCION ::=
    Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO sig_punto_coma |
    Identificador INCREMENTO sig_punto_coma |

    Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO  
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(31);
    :} |
    Identificador OPERADOR_ARITMETICO asi_asignacion sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor numérico");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(32);
    :} |
    Identificador OPERADOR_ARITMETICO VALOR_NUMERICO sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un signo de asignación");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(33);
    :} |
    OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador antes del operador aritmetico");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(34);
    :}  
    |
    error sig_punto_coma
    {:
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    :}
;