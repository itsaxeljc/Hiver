package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Stack;

parser code
{:
    
    
    public void syntax_error(Symbol s){
       pnlSalida.textPane.setText(pnlSalida.textPane.getText()+"Error sintáctico en la línea #: "+ s.value+"\n");
       System.out.println("Error R de sintaxis: "+ s.value +" en la Linea "+(s.right+1) );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //pnlSalida.textPane.setText(pnlSalida.textPane.getText()+"Error NR de sintaxis: "+ s.value +" en la Linea " +  (s.left+1)+"\n");
        System.out.println("Error NR de sintaxis: "+ s.value +" en la Linea " + (s.left+1));
    }

    public ArrayList getvar_identificador() { return action_obj.var_identificador; }
    public ArrayList getvar_tipo_dato() { return action_obj.var_tipo_dato; }
    public ArrayList getvar_valor() { return action_obj.var_valor; }
    public ArrayList getvar_err_linea() { return action_obj.err_linea; }
    public ArrayList getvar_err_msj() { return action_obj.err_msj; }
    public ArrayList getvar_err_gramatica() { return action_obj.err_gramatica; }

:};
action code
{://Codigo de acciones vamos a simular atributos heredados con variables globales
    String heredado="";
    String aux="";
    Stack<Display> display = new Stack<>();
    Display tmp;

    // para la tabla de variables
    public ArrayList var_identificador = new ArrayList();
    public ArrayList var_tipo_dato = new ArrayList();
    public ArrayList var_valor = new ArrayList();
    // para los errores
    public ArrayList err_linea = new ArrayList();
    public ArrayList err_lexema = new ArrayList();
    public ArrayList err_msj = new ArrayList();
    public ArrayList err_gramatica = new ArrayList();

    public void errores_gramatica (int error){ 
        /*Pedro Id: 3
          Brad Id:  7
          Jacobo:   4   
          Dalia: 2 
        */
        switch (error)
        {
        case 71:
            err_gramatica.add("res_pin par_abre Numero coma Identificador par_cierra <p color=\"#FF0042\">sig_punto_coma</p>");
            break;
        case 41:
            err_gramatica.add("res_name Identificador <p color=\"#FF0042\">sig_punto_coma</p><br>ESTRUCTURA_BASICA");
            break;
        case 42:
            err_gramatica.add("res_name <p color=\"#FF0042\">Identificador</p> sig_punto_coma<br>ESTRUCTURA_BASICA");
            break;
        case 43:
            err_gramatica.add("<p color=\"#FF0042\">res_name</p> Identificador sig_punto_coma<br>ESTRUCTURA_BASICA");
            break;
        case 44:
            err_gramatica.add("res_name <p color=\"#FF0042\">Identificador sig_punto_coma</p><br>ESTRUCTURA_BASICA");
            break;
        case 45:
            err_gramatica.add("res_function <p color=\"#FF0042\">TIPO_DATO</p> Identificador par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 46:
            err_gramatica.add("res_function TIPO_DATO <p color=\"#FF0042\">Identificador</p> par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 47:
            err_gramatica.add("res_function <p color=\"#FF0042\">TIPO_DATO Identificador</p> par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 48:
            err_gramatica.add("res_function TIPO_DATO Identificador <p color=\"#FF0042\">par_abre</p> PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 49:
            err_gramatica.add("res_function TIPO_DATO Identificador par_abre PARAMETRO <p color=\"#FF0042\">par_cierra</p> llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 401:
            err_gramatica.add("res_function TIPO_DATO Identificador <p color=\"#FF0042\">par_abre</p> PARAMETRO <p color=\"#FF0042\">par_cierra</p> llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 402:
            err_gramatica.add("<p color=\"#FF0042\">res_function</p> TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 403:
            err_gramatica.add("<p color=\"#FF0042\">res_function TIPO_DATO</p> Identificador par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 404:
            err_gramatica.add("res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra <p color=\"#FF0042\">llave_abre</p> <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        }
           
    }




:}

terminal res_if,
   res_else,
   res_while,
 res_do,
 res_for,
res_exit,
 res_return,
  res_function,
  res_void,
 res_null,
  res_input,
 res_output,
res_in,
res_out,
res_def,
res_true,
res_false,
res_start,
res_end,
res_array,
res_type,
res_display,rel_igual,
res_config,
res_scale,
res_pin,
res_volt,
res_wait,
res_model,
res_sleep,
res_switch,
res_default,
res_name, res_max_volt,
asi_asignacion,
ari_suma,
ari_resta,
ari_multiplicacion,
ari_division,
log_and,
log_or,
log_xor,
log_not,
rel_menor,
rel_mayor,
rel_menor_igual,
 rel_mayor_igual,
rel_diferente,
 sig_punto_coma,
par_abre,
par_cierra,
llave_abre,
llave_cierra,
cor_abre,
cor_cierra,
sim_dos_puntos,
tip_tinyint,tip_int,tip_float, tip_double,tip_char,tip_boolean,

Identificador,
Numero,coma,cadena_caracter,
Numero_incorrecto1,Numero_incorrecto2,Identificador_no_valido,Error_simbo_punto,Error_simbolo_no_valido,Error_numerico,Numero_incorrecto3,Numero_incorrecto4,ERROR;
non terminal INICIO, ESTRUCTURA_BASICA,DECLARACION, 
FUNCIONES, FUNCION, CONFIG, STARTUP,SENTENCIA_STARTUP,SENTENCIA_CONFIG, TIPO_DATO, PARAMETRO , PIN, DISPLAY, DISPLAY_PARAMS,
TYPE, TYPE_IO, SCALE,DOWHILE,EXPRESION, OPERACION,IF,CASO,WHILE,SWITCH,SWITCH_ENTRADAS,VOLT, MAX_VOLT, WAIT, CONDICION, MODE, 
VALOR_NUMERICO ,OPERADORES_CONTRACCION,INCREMENTO_FOR,INCREMENTO,FOR,OUT,SLEEP,OPERACION_PROC, OPERADOR,VALOR,TIPO_DATO_FOR, 
OPERADOR_CONDICIONAL,RETURN,IN,SENTENCIA_FUNCION,OPERADOR_ARITMETICO,METODO_INCREMENTO,OPERACION_CONTRACCION;


start with INICIO;

INICIO ::= 
    res_name Identificador sig_punto_coma 
    ESTRUCTURA_BASICA  |
    res_name Identificador  
    ESTRUCTURA_BASICA  
        {:
            err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
            //-err_linea.add(Ç);
            errores_gramatica(41);
        :}|
    res_name sig_punto_coma  
    ESTRUCTURA_BASICA  
        {:
            err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador antes del punto y coma");
            //-err_linea.add(Ç);
            errores_gramatica(42);
        :}|
    Identificador sig_punto_coma  
    ESTRUCTURA_BASICA  
        {:
            err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada name antes del identificador");
            //-err_linea.add(Ç);
            errores_gramatica(43);
        :}|
    res_name 
    ESTRUCTURA_BASICA  
        {:
            err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador despues de la palabra reservada name");
            //-err_linea.add(Ç);
            errores_gramatica(44);
        :} 
;

ESTRUCTURA_BASICA ::=
    FUNCIONES CONFIG STARTUP |
    CONFIG STARTUP FUNCIONES |
    CONFIG FUNCIONES STARTUP |
    CONFIG FUNCIONES STARTUP FUNCIONES |
    FUNCIONES CONFIG STARTUP FUNCIONES |
    FUNCIONES CONFIG FUNCIONES STARTUP |
    FUNCIONES CONFIG FUNCIONES STARTUP FUNCIONES |
    CONFIG STARTUP |
    STARTUP CONFIG 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba que bloque CONFIG se situara antes del bloque START-END");
        //-err_linea.add(Ç);
    :} |
    CONFIG 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el bloque START-END después del bloque CONFIG");
        //-err_linea.add(Ç);
     :} |
    STARTUP
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el bloque CONFIG antes del bloque START-END");
        //-err_linea.add(Ç);
    :} |
    FUNCIONES
    {:
       err_msj.add("Error Sintáctico en la línea # | Se esperaban los bloques CONFIG y START-END");
       //-err_linea.add(Ç);
    :} |
    FUNCIONES CONFIG
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el bloque START-END después del bloque CONFIG");
        //-err_linea.add(Ç);
    :} |
    CONFIG FUNCIONES
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el bloque START-END después del bloque CONFIG");
        //-err_linea.add(Ç);
    :} |
    FUNCIONES STARTUP
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el bloque CONFIG antes del bloque START-END");
        //-err_linea.add(Ç);
    :} |
    STARTUP FUNCIONES
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el bloque CONFIG antes del bloque START-END");
        //-err_linea.add(Ç);
    :} 
;

FUNCIONES ::=
    FUNCIONES FUNCION | FUNCION
;

FUNCION ::=
    res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra |
    res_function res_void Identificador par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra |
    res_function Identificador par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la especificación del tipo de dato de retorno después de function");
        //-err_linea.add(Ç);
        errores_gramatica(45);
    :} |
    res_function TIPO_DATO par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION 
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador para la función después del tipo de dato a retorno");
        //-err_linea.add(Ç);
        errores_gramatica(46);
    :} |
    res_function par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un tipo de dato retorno e identificador para la función");
        //-err_linea.add(Ç);
        errores_gramatica(47);
    :} | 
    res_function TIPO_DATO Identificador PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después del identificador de la función");
        //-err_linea.add(Ç);
        errores_gramatica(48);
    :} |
    res_function TIPO_DATO Identificador par_abre PARAMETRO llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros de la función");
        //-err_linea.add(Ç);
        errores_gramatica(49);
    :} |
    res_function TIPO_DATO Identificador PARAMETRO llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paretesis de apertura y cierre en la especificación de parámetros de la función");
        //-err_linea.add(Ç);
        errores_gramatica(401);
    :} |
    TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada function antes del tipo de dato de retorno");
        //-err_linea.add(Ç);
        errores_gramatica(402);
    :} |
    Identificador par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada function y el tipo de dato de retorno antes del identificador de la función");
        //-err_linea.add(Ç);
        errores_gramatica(403);
    :} |
    res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra 
            SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura después de los parámetros de la función");
        //-err_linea.add(Ç);
        errores_gramatica(404);
    :}
;

RETURN ::=
    res_return Identificador sig_punto_coma | 
    res_return sig_punto_coma | 
    res_return Identificador {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; después de identificador");
        //-err_linea.add(Ç);
    :} |
    res_return TIPO_DATO {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; después del tipo de dato");
        //-err_linea.add(Ç);
    :} 
;
CONFIG ::= 
    res_config llave_abre 
        SENTENCIA_CONFIG   
    llave_cierra | 
    res_config
        SENTENCIA_CONFIG   
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura al inicio del bloque config");
        //-err_linea.add(Ç);
    :} 
    | error sig_punto_coma
    | error llave_cierra
;

STARTUP ::= 
    res_start sig_punto_coma
        SENTENCIA_STARTUP
    res_end sig_punto_coma |
    res_start
        SENTENCIA_STARTUP
    res_end {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba punto y coma después de las palabras reservadas start y end");
        //-err_linea.add(Ç);
    :} |
    res_start sig_punto_coma
        SENTENCIA_STARTUP
    res_end {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba punto y coma después de la palabra reservada end");
        //-err_linea.add(Ç);
    :} |
    res_start
        SENTENCIA_STARTUP
    res_end sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba punto y coma después de la palabra reservada start");
        //-err_linea.add(Ç);
    :} 
;

SENTENCIA_CONFIG ::=
    DECLARACION | SENTENCIA_CONFIG DECLARACION |
    PIN | SENTENCIA_CONFIG PIN |
    DISPLAY | SENTENCIA_CONFIG DISPLAY |
    TYPE | SENTENCIA_CONFIG TYPE |
    SCALE | SENTENCIA_CONFIG SCALE |
    VOLT | SENTENCIA_CONFIG VOLT |
    MAX_VOLT | SENTENCIA_CONFIG MAX_VOLT |
    MODE | SENTENCIA_CONFIG MODE
;

SENTENCIA_STARTUP ::=
   DECLARACION | SENTENCIA_STARTUP DECLARACION | 
   VOLT | SENTENCIA_STARTUP VOLT |
   WAIT | SENTENCIA_STARTUP WAIT |
   RETURN| SENTENCIA_STARTUP RETURN |
   res_exit | SENTENCIA_STARTUP res_exit |
   IF | SENTENCIA_STARTUP IF |
   SWITCH | SENTENCIA_STARTUP SWITCH |
   WHILE | SENTENCIA_STARTUP WHILE |
   DOWHILE | SENTENCIA_STARTUP DOWHILE |
   EXPRESION | SENTENCIA_STARTUP EXPRESION |
   IN | SENTENCIA_STARTUP IN |
   OUT | SENTENCIA_STARTUP OUT |
   SLEEP | SENTENCIA_STARTUP SLEEP |
   FOR | SENTENCIA_STARTUP FOR |
   OPERADORES_CONTRACCION | SENTENCIA_STARTUP OPERADORES_CONTRACCION 
;

SENTENCIA_FUNCION ::=
   DECLARACION | SENTENCIA_FUNCION DECLARACION | 
   VOLT | SENTENCIA_FUNCION VOLT |
   WAIT | SENTENCIA_FUNCION WAIT |
   RETURN| SENTENCIA_FUNCION RETURN |
   res_exit | SENTENCIA_FUNCION res_exit |
   IF | SENTENCIA_FUNCION IF |
   SWITCH | SENTENCIA_FUNCION SWITCH |
   WHILE | SENTENCIA_FUNCION WHILE |
   DOWHILE | SENTENCIA_FUNCION DOWHILE |
   EXPRESION | SENTENCIA_FUNCION EXPRESION |
   IN | SENTENCIA_FUNCION IN |
   OUT | SENTENCIA_FUNCION OUT |
   SLEEP | SENTENCIA_FUNCION SLEEP |
   FOR | SENTENCIA_FUNCION FOR |
   OPERADORES_CONTRACCION | SENTENCIA_FUNCION OPERADORES_CONTRACCION 
;

DECLARACION ::= 
    res_def TIPO_DATO:dato Identificador:id sig_punto_coma
    {: //vamos a validar cuando aparecen estas expresiones
        System.out.println("tipo: "+ dato + " identificador: "+ id + " valor null ");
        var_identificador.add(id);
        var_tipo_dato.add(dato);
        var_valor.add(null);
        System.out.println(var_identificador.size());
    :} |
    res_def TIPO_DATO:dato Identificador:id asi_asignacion VALOR:val sig_punto_coma  
    {: //vamos a validar cuando aparecen estas expresiones
        System.out.println("tipo: "+ dato + " identificador: "+ id + " valor "+val);
        var_identificador.add(id);
        var_tipo_dato.add(dato);
        var_valor.add(val);        
        System.out.println(var_identificador.size());
    :} |
    res_def TIPO_DATO Identificador {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final de la declaración");
        //-err_linea.add(Ç);
    :} |
    TIPO_DATO Identificador sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada def al inicio de la declaración");
        //-err_linea.add(Ç);
    :} |
    res_def TIPO_DATO Identificador asi_asignacion VALOR {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final de la declaración");
        //-err_linea.add(Ç);
    :} |
    TIPO_DATO Identificador asi_asignacion VALOR sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada def al inicio de la declaración");
        //-err_linea.add(Ç);
    :} |
    res_def res_pin Identificador sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        //-err_linea.add(Ç);
    :} |
    res_def res_pin Identificador asi_asignacion VALOR sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        //-err_linea.add(Ç);
    :} |
    res_def res_pin par_abre Numero coma Identificador par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        //-err_linea.add(Ç);
    :} |
    res_def res_display par_abre DISPLAY_PARAMS par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método display");
        //-err_linea.add(Ç);
    :} |
    res_def res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre
            SENTENCIA_FUNCION
    llave_cierra{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis para la creación de funciones");
        //-err_linea.add(Ç);
    :} |
    res_def res_function res_void Identificador par_abre PARAMETRO par_cierra llave_abre
        SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis para la creación de funciones");
        //-err_linea.add(Ç); :} |
    res_def res_type par_abre Identificador coma TYPE_IO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método type");
        //-err_linea.add(Ç);
    :} |
    res_def res_scale par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método scale");
        //-err_linea.add(Ç);
    :} |
    res_def res_volt par_abre Identificador coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método volt");
        //-err_linea.add(Ç);
    :} |
    res_def res_volt par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método volt");
        //-err_linea.add(Ç);
    :} 
;

PIN ::= 
    res_pin par_abre Numero coma Identificador par_cierra sig_punto_coma |
    res_pin par_abre Numero coma Identificador par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método pin");
        //-err_linea.add(Ç);
    :}  |
    res_pin par_abre Identificador par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba número de pin antes de identificador");
        //-err_linea.add(Ç);
    :}  |
    res_pin par_abre Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador de pin después del número de pin");
        //-err_linea.add(Ç);
    :} |
    res_pin par_abre Identificador coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba número de pin como primer parámetro del método pin");
        //-err_linea.add(Ç);
    :} |
    res_pin Numero coma Identificador par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada pin");
        //-err_linea.add(Ç);
    :} |
    res_pin Numero par_abre coma Identificador sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros del método pin");
        //-err_linea.add(Ç);
    :}
;

DISPLAY ::=
    res_display par_abre DISPLAY_PARAMS par_cierra sig_punto_coma |
    res_display par_abre DISPLAY_PARAMS par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método display");
        //-err_linea.add(Ç);
    :}  | 
    res_display par_abre par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba número(s) de pin para display como parámetros");
        //-err_linea.add(Ç);
    :} |
    res_display DISPLAY_PARAMS par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada display");
        //-err_linea.add(Ç);
    :} |
    res_display par_abre DISPLAY_PARAMS sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros del método display");
        //-err_linea.add(Ç);
    :}
;

DISPLAY_PARAMS ::=
    Numero | 
    Numero coma DISPLAY_PARAMS|
    Numero coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor entero después de la coma");
        //-err_linea.add(Ç);
    :}|
    Numero DISPLAY_PARAMS {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una coma entre cada parámetro");
        //-err_linea.add(Ç);
    :}|
    Numero coma coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor entero después de cada coma");
        //-err_linea.add(Ç);
    :}|
    Numero coma coma coma{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor entero después de cada coma");
        //-err_linea.add(Ç);
    :}|
    Numero coma coma coma coma{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor entero después de cada coma");
        //-err_linea.add(Ç);
    :}|
    Numero coma coma Numero{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor entero después de cada coma");
        //-err_linea.add(Ç);
    :}
;

TYPE ::=
    res_type par_abre Identificador coma TYPE_IO par_cierra sig_punto_coma |
    res_type par_abre Identificador coma TYPE_IO par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método type");
        //-err_linea.add(Ç);
    :}|
    res_type Identificador coma TYPE_IO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después la palabra reservada type");
        //-err_linea.add(Ç);
    :}|
    res_type par_abre Identificador coma TYPE_IO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros del método type");
        //-err_linea.add(Ç);
    :}|
    res_type Identificador coma TYPE_IO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paréntesis encerrando los parámetros del método type");
        //-err_linea.add(Ç);
    :}| 
    res_type par_abre Identificador TYPE_IO  par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma separando los parámetros del método type");
        //-err_linea.add(Ç);
    :}| 
    res_type par_abre TYPE_IO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador como primer parámetro del método type");
        //-err_linea.add(Ç);
    :}| 
    res_type par_abre Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba INPUT o OUTPUT como segundo parámetro del método type");
        //-err_linea.add(Ç);
    :}| 
    res_type par_abre par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador y INPUT o OUTPUT como parámetros del método type");
        //-err_linea.add(Ç);
    :}| 
    res_type par_abre Numero coma TYPE_IO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador como primer parámetro del método type");
        //-err_linea.add(Ç);
    :} |
    res_type par_abre Identificador coma TYPE_IO coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban sólo dos parámetros dentro del método type");
        //-err_linea.add(Ç);
    :} 
;

TYPE_IO ::=
    res_input | 
    res_output |
    res_input res_output {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo parámetro input/output");
        //-err_linea.add(Ç);
    :} |
    res_output res_input {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo parámetro input/output");
        //-err_linea.add(Ç);
    :} 
;

SCALE ::=
    res_scale par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma |
    res_scale par_abre Identificador coma Numero coma Numero par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método scale");
        //-err_linea.add(Ç);
    :} |
    res_scale par_abre Numero coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador del pin como primer parámetro del método scale");
        //-err_linea.add(Ç);
    :} | 
    res_scale par_abre Identificador coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban dos parámetros numéricos después del identificador del pin");
        //-err_linea.add(Ç);
    :} | 
    res_scale par_abre Numero coma Numero coma Identificador par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador del pin como primer parámetro del método scale");
        //-err_linea.add(Ç);
    :} |
    res_scale par_abre Numero coma Identificador par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador del pin como primer parámetro del método scale");
        //-err_linea.add(Ç);
    :} |
    res_scale Identificador coma Numero coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada scale");
        //-err_linea.add(Ç);
    :} |
    res_scale par_abre Identificador coma Numero coma Numero sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros del método scale");
        //-err_linea.add(Ç);
    :}
;

VOLT ::=
    res_volt par_abre Identificador coma Numero par_cierra sig_punto_coma |
    res_volt par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma |
    res_volt par_abre Identificador coma Numero par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método volt");
        //-err_linea.add(Ç);
    :} |
    res_volt par_abre Identificador coma Numero coma Numero par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método volt");
        //-err_linea.add(Ç);
    :} |
    res_volt par_abre Numero coma Identificador par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador como primer parámetro del método volt");
        //-err_linea.add(Ç);
    :} |
    res_volt par_abre Numero coma Identificador coma Numero par_cierra sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador como primer parámetro del método volt");
        //-err_linea.add(Ç);
    :} |
    res_volt par_abre Numero coma Numero coma Identificador par_cierra sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador como primer parámetro del método volt");
        //-err_linea.add(Ç);
    :} |
    res_volt par_abre Identificador Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba , entre los parámetros del método volt");
        //-err_linea.add(Ç);
    :} |
    res_volt par_abre Identificador coma Numero Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba , entre los parámetros del método volt");
        //-err_linea.add(Ç);
    :} |
    res_volt par_abre Identificador Numero coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba , entre los parámetros del método volt");
        //-err_linea.add(Ç);
    :} |
    res_volt par_abre Identificador Numero Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba , entre los parámetros del método volt");
        //-err_linea.add(Ç);
    :} |
    res_volt Identificador coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada volt");
        //-err_linea.add(Ç);
    :} |
    res_volt par_abre Identificador coma Numero sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros del método volt");
        //-err_linea.add(Ç);
    :} |
    res_volt Identificador coma Numero coma Numero par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada volt");
        //-err_linea.add(Ç);
    :} | 
    res_volt par_abre Identificador coma Numero coma Numero sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros del método volt");
        //-err_linea.add(Ç);
    :}
;

MAX_VOLT ::=
    res_max_volt par_abre Identificador par_cierra sig_punto_coma |
    res_max_volt par_abre Numero par_cierra sig_punto_coma |
    res_max_volt par_abre Identificador par_cierra  {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método max_volt");
        //-err_linea.add(Ç);
    :} |
    res_max_volt par_abre Numero par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método max_volt");
        //-err_linea.add(Ç);
    :} |
    res_max_volt Identificador par_cierra sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada max_volt");
        //-err_linea.add(Ç);
    :} | 
    res_max_volt par_abre Identificador sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después del parámetro del método max_volt");
        //-err_linea.add(Ç);
    :} | 
    res_max_volt Numero par_cierra sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada max_volt");
        //-err_linea.add(Ç);
    :} | 
    res_max_volt par_abre Numero sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después del parámetro del método max_volt");
        //-err_linea.add(Ç);
    :} |
    res_max_volt par_abre cadena_caracter par_cierra sig_punto_coma  {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor numérico como parámetro único del método max_volt");
        //-err_linea.add(Ç);
    :} |
    res_max_volt asi_asignacion VALOR_NUMERICO sig_punto_coma{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor numérico encerrado entre paréntesis como parámetro único");
        //-err_linea.add(Ç);
    :} |
    res_max_volt asi_asignacion par_abre VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor numérico encerrado entre paréntesis, no se admite asignación");
        //-err_linea.add(Ç); 
    :} 
;

WAIT ::=
    res_wait par_abre CONDICION par_cierra sig_punto_coma |
    res_wait par_abre CONDICION par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método sleep");
        //-err_linea.add(Ç);
    :}|
    res_wait CONDICION par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada wait");
        //-err_linea.add(Ç);
    :} |
    res_wait par_abre CONDICION sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de la condición del método wait");
        //-err_linea.add(Ç);
    :}
;

CONDICION ::=
    VALOR_NUMERICO OPERADOR_CONDICIONAL VALOR_NUMERICO | par_abre CONDICION par_cierra |
    log_not Identificador | log_not Identificador OPERADOR_CONDICIONAL CONDICION
    | VALOR_NUMERICO | res_false | res_true |
    VALOR_NUMERICO OPERADOR_CONDICIONAL {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor después del operador condicional");
        //-err_linea.add(Ç);
    :} | 
    res_false CONDICION {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba a cada condición separada por paréntesis y con un operardor condicional entre ambas");
        //-err_linea.add(Ç);
    :} |
    res_true CONDICION {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba a cada condición separada por paréntesis y con un operardor condicional entre ambas");
        //-err_linea.add(Ç);
    :} |
    VALOR_NUMERICO VALOR_NUMERICO {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una condición, imposible comparar valores");
        //-err_linea.add(Ç);
    :} |
    log_not OPERADOR_CONDICIONAL VALOR_NUMERICO {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador después de símbolo de negación lógica");
        //-err_linea.add(Ç);
    :} | 
    OPERADOR_CONDICIONAL {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor antes y después del operador condicional");
        //-err_linea.add(Ç);
    :} |
    OPERADOR_CONDICIONAL VALOR_NUMERICO {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor antes del operador condicional");
        //-err_linea.add(Ç);
    :} |
    VALOR_NUMERICO OPERADOR_CONDICIONAL OPERADOR_CONDICIONAL VALOR_NUMERICO {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo operador condicional");
        //-err_li nea.add(Ç);
    :} |
    cadena_caracter {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una condición válida, no se admiten cadenas");
        //-err_li nea.add(Ç);
    :} |
    cadena_caracter OPERADOR_CONDICIONAL cadena_caracter {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una condición válida, no se admiten cadenas");
        //-err_li nea.add(Ç);
    :} | 
    cadena_caracter OPERADOR_CONDICIONAL VALOR_NUMERICO {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una condición válida, no se admiten cadenas");
        //-err_li nea.add(Ç);
    :}
;


OPERADOR_CONDICIONAL ::=
     log_xor | log_and | log_or | rel_diferente | rel_igual | rel_mayor_igual | rel_mayor | rel_menor_igual | rel_menor |
     coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un operador condicional");
        //-err_li nea.add(Ç);
    :} | asi_asignacion {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un operador condicional");
        //-err_li nea.add(Ç);
    :}
;

MODE ::=
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método mode");
        //-err_linea.add(Ç);
    :}|
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método mode");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método mode");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    :} | 
    res_model par_abre VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    :} | 
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura antes de parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paréntesis encerrando los parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura antes de parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paréntesis encerrando los parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura antes de parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paréntesis encerrando los parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre cadena_caracter coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO coma cadena_caracter par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    :} | 
    res_model par_abre cadena_caracter coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    :} | 
    res_model par_abre VALOR_NUMERICO coma cadena_caracter coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre cadena_caracter coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO coma cadena_caracter coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    :} |
    res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma cadena_caracter coma VALOR_NUMERICO par_cierra sig_punto_coma {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    :} 
;

TIPO_DATO ::= 
    tip_tinyint:tip{:RESULT = tip;:} | 
    tip_int:tip {:RESULT = tip;:}| 
    tip_boolean:tip {:RESULT = tip;:}| 
    tip_float:tip {:RESULT = tip;:}| 
    tip_double:tip {:RESULT = tip;:}| 
    tip_char:tip{:RESULT = tip;:}
;

VALOR ::=
    Numero:val {:RESULT = val;:}|
    Identificador:val {:RESULT = val;:}|
    cadena_caracter:val {:RESULT = val;:}
    
;

VALOR_NUMERICO ::=
    Numero | Identificador
;

PARAMETRO ::=
    DECLARACION | 
    PARAMETRO coma DECLARACION |
    PARAMETRO DECLARACION {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban parámetros separados por coma");
        //-err_linea.add(Ç);
    :} 
;

 IF ::=
    res_if par_abre CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra
    |
    res_if par_abre CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra 
    res_else 
    llave_abre
        SENTENCIA_STARTUP
    llave_cierra |
    res_if CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura antes de la condición");
        //-err_linea.add(Ç);
    :} |
    res_if par_abre CONDICION llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de la condición");
        //-err_linea.add(Ç);
    :} |
    res_if par_abre CONDICION par_cierra 
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura antes del bloque de código de if");
        //-err_linea.add(Ç);
    :} |
    res_if CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra 
    res_else 
    llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura antes de la condición");
        //-err_linea.add(Ç);
    :} |
    res_if par_abre CONDICION llave_abre
        SENTENCIA_STARTUP
    llave_cierra 
    res_else 
    llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de la condición");
        //-err_linea.add(Ç);
    :} |
    res_if par_abre CONDICION par_cierra
        SENTENCIA_STARTUP
    llave_cierra 
    res_else 
    llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura antes del bloque de código de if");
        //-err_linea.add(Ç);
    :} |
    res_if par_abre CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra 
    res_else 
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura antes del bloque de código de else");
        //-err_linea.add(Ç);
    :} |
    res_if par_abre CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra 
    llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba else del bloque de código de else");
        //-err_linea.add(Ç);
    :}
 ;

 SWITCH ::=
    res_switch par_abre Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra|
    res_switch par_abre Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra |
    res_switch Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada switch");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre Identificador llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de la condición");
        //-err_linea.add(Ç);
    :} |
    res_switch Identificador llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paréntesis encerrando identificador");
        //-err_linea.add(Ç);
    :} | 
    res_switch par_abre par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} | 
    res_switch par_abre Numero par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre cadena_caracter par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre res_true par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre res_false par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre EXPRESION par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre PARAMETRO par_cierra llave_abre
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} | 
    res_switch par_abre Identificador par_cierra
        SWITCH_ENTRADAS
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura antes del bloque de entradas de la estructura switch");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre Identificador par_cierra llave_abre
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban entradas dentro de la estructura switch");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre Identificador par_cierra llave_abre
        SENTENCIA_FUNCION
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban entradas validas dentro de la estructura switch");
        //-err_linea.add(Ç);
    :} |
    res_switch Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada switch");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre Identificador llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de la condición");
        //-err_linea.add(Ç);
    :} |
    res_switch Identificador llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paréntesis encerrando identificador");
        //-err_linea.add(Ç);
    :} | 
    res_switch par_abre par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} | 
    res_switch par_abre Numero par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre cadena_caracter par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre res_true par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre res_false par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre EXPRESION par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre PARAMETRO par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    :} | 
    res_switch par_abre Identificador par_cierra
        SWITCH_ENTRADAS
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura antes del bloque de entradas de la estructura switch");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre Identificador par_cierra llave_abre
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban entradas dentro de la estructura switch");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre Identificador par_cierra llave_abre
        SENTENCIA_FUNCION
        res_default sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban entradas validas dentro de la estructura switch");
        //-err_linea.add(Ç);
    :} | 
    res_switch par_abre Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default sim_dos_puntos 
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba al menos una sentencia dentro del default-case");
        //-err_linea.add(Ç);
    :} | 
    res_switch par_abre Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
        res_default SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba : después de la palabra reservada default");
        //-err_linea.add(Ç);
    :} |
    res_switch par_abre Identificador par_cierra llave_abre
        SWITCH_ENTRADAS
        sim_dos_puntos SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba palabra reservada default");
        //-err_linea.add(Ç);
    :}
;

SWITCH_ENTRADAS ::=
    rel_menor CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit | 
    SWITCH_ENTRADAS rel_menor CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit |
    CASO sim_dos_puntos SENTENCIA_STARTUP res_exit{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba < al inicio del case a evaluar y > al final del mismo");
        //-err_linea.add(Ç);
    :} |
    CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba < al inicio del case a evaluar");
        //-err_linea.add(Ç);
    :}|
    rel_menor CASO sim_dos_puntos SENTENCIA_STARTUP res_exit{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba > al final de case a evaluar");
        //-err_linea.add(Ç);
    :} |
    rel_menor CASO rel_mayor SENTENCIA_STARTUP res_exit{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba : antes del bloque de instrucciones del case");
        //-err_linea.add(Ç);
    :} |
    rel_menor CASO SENTENCIA_STARTUP res_exit{:
        err_msj.add("Error Sintáctico en la línea # |Se esperaba > seguida de : al final de case a evaluar");
        //-err_linea.add(Ç);
    :}|
    rel_menor Identificador rel_mayor sim_dos_puntos SENTENCIA_STARTUP  res_exit{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un número, una cadena o un valor boleando como case a evaluar, no se admiten valores dinámicos");
        //-err_linea.add(Ç);
    :}|
    rel_menor CASO rel_mayor llave_abre SENTENCIA_STARTUP llave_cierra{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban dos puntos al final del case a evaluar y exit al final del bloque de instrucciones del case");
        //-err_linea.add(Ç);
    :} |
    CASO SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba que el case a evaluar estuviera entre <> seguido de :");
        //-err_linea.add(Ç);
    :} |
    SWITCH_ENTRADAS CASO sim_dos_puntos SENTENCIA_STARTUP res_exit{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba < al inicio del case a evaluar y > al final del mismo");
        //-err_linea.add(Ç);
    :}|
    SWITCH_ENTRADAS CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba < al inicio del case a evaluar");
        //-err_linea.add(Ç);
    :}|
    SWITCH_ENTRADAS rel_menor CASO sim_dos_puntos SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba > al final de case a evaluar");
        //-err_linea.add(Ç);
    :}|
    SWITCH_ENTRADAS rel_menor CASO rel_mayor SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba : antes del bloque de instrucciones del case");
        //-err_linea.add(Ç);
    :}|
    SWITCH_ENTRADAS rel_menor CASO SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea # |Se esperaba > seguida de : al final de case a evaluar");
        //-err_linea.add(Ç);
    :}|
    SWITCH_ENTRADAS rel_menor Identificador rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un número, una cadena o un valor boleando como case a evaluar, no se admiten valores dinámicos");
        //-err_linea.add(Ç);
    :}|
    SWITCH_ENTRADAS rel_menor CASO rel_mayor llave_abre SENTENCIA_STARTUP llave_cierra res_exit {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban dos puntos al final del case a evaluar y exit al final del bloque de instrucciones del case");
        //-err_linea.add(Ç);
    :}|
    SWITCH_ENTRADAS CASO SENTENCIA_STARTUP res_exit {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba que el case a evaluar estuviera entre <> seguido de :");
        //-err_linea.add(Ç);
    :}
;

CASO ::=
    Numero | cadena_caracter | res_true | res_false |
    Numero Numero {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
    :} | 
    Numero coma Numero {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
    :} |
    cadena_caracter ari_suma cadena_caracter {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
    :} |
    Numero ari_suma cadena_caracter {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
    :} |
    Numero ari_suma Numero {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
    :} |
    cadena_caracter coma cadena_caracter {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
    :} |
    Numero coma Identificador {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
    :} 
;

WHILE ::=
    res_while par_abre CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra |
    res_while CONDICION par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra{:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura antes de la condición");
        //-err_linea.add(Ç);
    :} |
    res_while par_abre CONDICION llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de la condición");
        //-err_linea.add(Ç);
    :} |
    res_while par_abre CONDICION par_cierra
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura antes del bloque de código del while");
        //-err_linea.add(Ç);
    :} |
    res_while par_abre par_cierra llave_abre
        SENTENCIA_STARTUP
    llave_cierra {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba condición antes del bloque de código del while");
        //-err_linea.add(Ç);
    :}
;

DOWHILE ::=
    res_do llave_abre
        SENTENCIA_STARTUP
    llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma
| 
    res_do llave_abre
        SENTENCIA_STARTUP
    llave_cierra res_while par_abre CONDICION par_cierra 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
        //-err_linea.add(Ç);
    :}|
    res_do llave_abre
        SENTENCIA_STARTUP
    llave_cierra res_while par_abre CONDICION  sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre");
        //-err_linea.add(Ç);
    :}|
    res_do llave_abre
        SENTENCIA_STARTUP
    llave_cierra res_while par_abre  par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un condición dentro del while");
        //-err_linea.add(Ç);
    :}|
    res_do llave_abre
        SENTENCIA_STARTUP
    llave_cierra res_while CONDICION par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura");
        //-err_linea.add(Ç);
    :}|
    res_do llave_abre
        SENTENCIA_STARTUP
    llave_cierra  par_abre CONDICION par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada while");
        //-err_linea.add(Ç);
    :}|
    res_do llave_abre
        SENTENCIA_STARTUP
    res_while par_abre CONDICION par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una llave de cierre antes del while");
        //-err_linea.add(Ç);
    :}|
    res_do llave_abre
    llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba como minimo una instrucción dentro de las llaves del do while");
        //-err_linea.add(Ç);
    :}|
    res_do 
       SENTENCIA_STARTUP
    llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una llave de apertura despues de la palabra do");
        //-err_linea.add(Ç);
    :}

;

EXPRESION ::=
    Identificador asi_asignacion OPERACION sig_punto_coma|
    Identificador asi_asignacion IN
;

OPERACION ::=
    VALOR OPERADOR VALOR | par_abre OPERACION par_cierra |
    OPERACION OPERACION_PROC | VALOR
    | 
    OPERADOR VALOR
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba otro valor o identificador");
        //-err_linea.add(Ç);
    :}|
    par_cierra OPERACION par_abre
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un orden correcto en los paréntesis");
        //-err_linea.add(Ç);
    :}
    |
     par_cierra OPERACION par_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un orden correcto en los paréntesis");
        //-err_linea.add(Ç);
    :}|
     par_abre OPERACION par_abre
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un orden correcto en los paréntesis");
        //-err_linea.add(Ç);
    :}   
;

OPERACION_PROC ::=
    VALOR OPERADOR
;

OPERADOR ::=
    OPERADOR_CONDICIONAL| ari_division | ari_resta | ari_suma | ari_multiplicacion 
;

IN ::=
    res_in par_abre VALOR_NUMERICO par_cierra sig_punto_coma|
    res_in par_abre VALOR_NUMERICO par_cierra 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
        //-err_linea.add(Ç);
    :}|
    res_in par_abre VALOR_NUMERICO  sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre");
        //-err_linea.add(Ç);
    :}|
    res_in par_abre par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un parámetro único");
        //-err_linea.add(Ç);
    :}|
    res_in  VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura");
        //-err_linea.add(Ç);
    :}|
    res_in  sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura");
        //-err_linea.add(Ç);
    :}
    
;

OUT ::=
    res_out par_abre Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma |
    res_out par_abre Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma |
    res_out par_abre res_display coma cadena_caracter par_cierra sig_punto_coma  |   
    res_out par_abre Identificador coma VALOR_NUMERICO par_cierra 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
        //-err_linea.add(Ç);
    :}|
    res_out par_abre Identificador coma VALOR_NUMERICO  sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre");
        //-err_linea.add(Ç);
    :}|
    res_out par_abre Identificador coma  par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un parámetro numérico antes del paréntesis de cierre");
        //-err_linea.add(Ç);
    :}|
    res_out par_abre Identificador VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una coma despues del identificador");
        //-err_linea.add(Ç);
    :}|
    res_out par_abre  coma VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador después del paréntesis de apertura");
        //-err_linea.add(Ç);
    :}|
    res_out Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis después del out");
        //-err_linea.add(Ç);
    :}|
    res_out par_abre  par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una instrucción completa");
        //-err_linea.add(Ç);
    :}|
    res_out par_abre Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
        //-err_linea.add(Ç);
    :}|
    res_out par_abre Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO  sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre");
        //-err_linea.add(Ç);
    :}|
    res_out par_abre Identificador coma VALOR_NUMERICO coma par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un parámetro antes del paréntesis de cierre");
        //-err_linea.add(Ç);
    :}|
    res_out par_abre Identificador coma VALOR_NUMERICO  VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una coma entre los dos valores numéricos");
        //-err_linea.add(Ç);
    :}|
    res_out par_abre Identificador coma  coma VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaban dos parametros numéricos");
        //-err_linea.add(Ç);
    :}|
    res_out par_abre Identificador VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una coma después del Identificador");
        //-err_linea.add(Ç);
    :}|
    res_out par_abre coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un Identificador después del paréntesis de apertura");
        //-err_linea.add(Ç);
    :}|
    res_out Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura después del out"); 
        //-err_linea.add(Ç);
    :} 
    
    |
    res_out par_abre res_display coma cadena_caracter par_cierra 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma"); 
        //-err_linea.add(Ç);
    :} |
    res_out par_abre res_display coma cadena_caracter sig_punto_coma 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre antes del punto y coma"); 
        //-err_linea.add(Ç);
    :} |
    res_out par_abre res_display coma par_cierra sig_punto_coma 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un parametro entes del paréntesis"); 
        //-err_linea.add(Ç);
    :} |
    res_out par_abre res_display cadena_caracter par_cierra sig_punto_coma 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una coma"); 
        //-err_linea.add(Ç);
    :} |
    res_out par_abre coma cadena_caracter par_cierra sig_punto_coma 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la sentencia display como primer parámetro"); 
        //-err_linea.add(Ç);
    :}  |
    res_out  coma cadena_caracter par_cierra sig_punto_coma 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura después de la palabra out"); 
        //-err_linea.add(Ç);
    :} 
;

SLEEP ::=
    res_sleep par_abre VALOR_NUMERICO par_cierra sig_punto_coma |
    res_sleep par_abre EXPRESION par_cierra sig_punto_coma |
    res_sleep par_abre VALOR_NUMERICO par_cierra 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
        //-err_linea.add(Ç);
    :}|
    res_sleep par_abre VALOR_NUMERICO sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre antes del punto y coma");
        //-err_linea.add(Ç);
    :}|
    res_sleep par_abre par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor numérico o identificador como parámetro");
        //-err_linea.add(Ç);
    :}|
    res_sleep VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura despues de la palabra reservada sleep");
        //-err_linea.add(Ç);
    :}|
    res_sleep par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura despues de la palabra reservada sleep");
        //-err_linea.add(Ç);
    :}|
    res_sleep sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura despues de la palabra reservada sleep");
        //-err_linea.add(Ç);
    :}|
    res_sleep par_abre par_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un parámetro");
        //-err_linea.add(Ç);
    :}|
    res_sleep par_abre VALOR_NUMERICO 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre después del parámetro");
        //-err_linea.add(Ç);
    :}|
    res_sleep par_cierra VALOR_NUMERICO par_abre sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura después de la palabra reservada sleep");
        //-err_linea.add(Ç);
    :}|
    res_sleep par_cierra VALOR_NUMERICO par_cierra sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura después de la palabra reservada sleep");
        //-err_linea.add(Ç);
    :}|
    res_sleep par_abre VALOR_NUMERICO par_abre sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre antes del punto y coma");
        //-err_linea.add(Ç);
    :}
    
    
;
FOR ::=
    res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra |
    res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra |

    res_for TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis después de la palabra reservada for");
        //-err_linea.add(Ç);
    :}|
    res_for par_abre Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el tipo de dato correspondiente al identificador");
        //-err_linea.add(Ç);
    :}|  
    res_for par_abre TIPO_DATO_FOR asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador después del tipo de dato");
        //-err_linea.add(Ç);
    :} |
    res_for par_abre TIPO_DATO_FOR Identificador VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el operador de asignación en el apartado de declaración de variables");
        //-err_linea.add(Ç);
    :}|
    res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor en el apartado de declaración de variables");
        //-err_linea.add(Ç);
    :}|
    res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO CONDICION sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma antes de la condición");
        //-err_linea.add(Ç);
    :}|
    res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una condición dentro de los parametros del for");
        //-err_linea.add(Ç);
    :}|
    res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un operador de incremento dentro de los parametros del for");
        //-err_linea.add(Ç);
    :}|
    res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre antes de la primera llave del for");
        //-err_linea.add(Ç);
    :}|
    res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre 
    
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una llave de apertura despues del paréntesis de cierre");
        //-err_linea.add(Ç);
    :}|
    res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre 
    llave_abre
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba minimo una instrucción dentro de las llaves del for");
        //-err_linea.add(Ç);
    :}|
    res_for par_abre sig_punto_coma sig_punto_coma METODO_INCREMENTO par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una condición dentro de los parametros del for");
        //-err_linea.add(Ç);
    :}|
    res_for par_abre  sig_punto_coma CONDICION sig_punto_coma par_cierra 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un operador de incremento dentro de los parametros del for");
        //-err_linea.add(Ç);
    :}|
    res_for par_abre  sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO 
    llave_abre 
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre antes de la primera llave del for");
        //-err_linea.add(Ç);
    :}|
    res_for par_abre  sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre 
    
        SENTENCIA_STARTUP 
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una llave de apertura despues del paréntesis de cierre");
        //-err_linea.add(Ç);
    :}|
    res_for par_abre  sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre 
    llave_abre
    llave_cierra
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba minimo una instrucción dentro de las llaves del for");
        //-err_linea.add(Ç);
    :}

;
METODO_INCREMENTO ::=
 Identificador INCREMENTO | OPERACION_CONTRACCION
;

TIPO_DATO_FOR ::=
    tip_int | tip_float | tip_double | tip_tinyint | 
    tip_boolean 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un tipo de dato numérico");
        //-err_linea.add(Ç);
    :} |
    tip_char 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un tipo de dato numérico");
        //-err_linea.add(Ç);
    :} 
;
INCREMENTO ::=
    ari_suma ari_suma |
    ari_resta ari_resta |
    error sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Error en la declaración del operador de incremento");
        //-err_linea.add(Ç);
    :} 
;

OPERADOR_ARITMETICO ::=
    ari_suma | ari_resta | ari_multiplicacion | ari_division
;                                                                                          

OPERACION_CONTRACCION ::=
    Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO sig_punto_coma |
    Identificador INCREMENTO sig_punto_coma |

    Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO  
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
        //-err_linea.add(Ç);
        errores_gramatica(31);
    :} |
    Identificador OPERADOR_ARITMETICO asi_asignacion sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor numérico");
        //-err_linea.add(Ç);
        errores_gramatica(32);
    :} |
    Identificador OPERADOR_ARITMETICO VALOR_NUMERICO sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un signo de asignación");
        //-err_linea.add(Ç);
        errores_gramatica(33);
    :} |
    OPERADOR_ARITMETICO VALOR_NUMERICO sig_punto_coma
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador antes del operador aritmetico");
        //-err_linea.add(Ç);
        errores_gramatica(34);
    :}  
    | error sig_punto_coma 
    {:
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una acción u operación");
        //-err_linea.add(Ç);
        errores_gramatica(35);
    :}
;