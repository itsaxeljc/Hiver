
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 09 23:41:07 MDT 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 09 23:41:07 MDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01d7\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\004" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\006\000\002\003\006\000\002\003\006\000\002" +
    "\003\007\000\002\003\004\000\002\003\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\005\004\000\002\005\003\000\002\006\013\000\002" +
    "\006\013\000\002\006\012\000\002\006\012\000\002\006" +
    "\012\000\002\006\011\000\002\006\012\000\002\006\012" +
    "\000\002\006\011\000\002\006\012\000\002\006\011\000" +
    "\002\006\012\000\002\054\005\000\002\054\004\000\002" +
    "\054\004\000\002\054\004\000\002\007\006\000\002\007" +
    "\005\000\002\007\004\000\002\007\004\000\002\010\007" +
    "\000\002\010\005\000\002\010\006\000\002\010\006\000" +
    "\002\012\003\000\002\012\004\000\002\012\003\000\002" +
    "\012\004\000\002\012\003\000\002\012\004\000\002\012" +
    "\003\000\002\012\004\000\002\012\003\000\002\012\004" +
    "\000\002\012\003\000\002\012\004\000\002\012\003\000" +
    "\002\012\004\000\002\012\003\000\002\012\004\000\002" +
    "\011\003\000\002\011\004\000\002\011\003\000\002\011" +
    "\004\000\002\011\003\000\002\011\004\000\002\011\003" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\011\004\000\002\011\003\000\002" +
    "\011\004\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\011\004\000\002\011\003\000\002\011\004" +
    "\000\002\011\003\000\002\011\004\000\002\011\003\000" +
    "\002\011\004\000\002\011\003\000\002\011\004\000\002" +
    "\011\003\000\002\011\004\000\002\011\003\000\002\011" +
    "\004\000\002\056\003\000\002\056\004\000\002\056\003" +
    "\000\002\056\004\000\002\056\003\000\002\056\004\000" +
    "\002\056\003\000\002\056\004\000\002\056\003\000\002" +
    "\056\004\000\002\056\003\000\002\056\004\000\002\056" +
    "\003\000\002\056\004\000\002\056\003\000\002\056\004" +
    "\000\002\056\003\000\002\056\004\000\002\056\003\000" +
    "\002\056\004\000\002\056\003\000\002\056\004\000\002" +
    "\056\003\000\002\056\004\000\002\056\003\000\002\056" +
    "\004\000\002\056\003\000\002\056\004\000\002\056\003" +
    "\000\002\056\004\000\002\004\006\000\002\004\010\000" +
    "\002\004\005\000\002\004\005\000\002\004\007\000\002" +
    "\004\007\000\002\004\006\000\002\004\010\000\002\004" +
    "\012\000\002\004\010\000\002\004\014\000\002\004\014" +
    "\000\002\004\012\000\002\004\014\000\002\004\012\000" +
    "\002\004\014\000\002\015\011\000\002\015\010\000\002" +
    "\015\007\000\002\015\007\000\002\015\011\000\002\015" +
    "\010\000\002\015\010\000\002\016\007\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\016\006\000" +
    "\002\017\003\000\002\017\005\000\002\017\004\000\002" +
    "\017\004\000\002\017\005\000\002\017\006\000\002\017" +
    "\007\000\002\017\006\000\002\020\011\000\002\020\010" +
    "\000\002\020\010\000\002\020\010\000\002\020\007\000" +
    "\002\020\010\000\002\020\007\000\002\020\011\000\002" +
    "\020\006\000\002\020\011\000\002\020\013\000\002\021" +
    "\003\000\002\021\003\000\002\021\004\000\002\021\004" +
    "\000\002\022\013\000\002\022\012\000\002\022\011\000" +
    "\002\022\011\000\002\022\013\000\002\022\011\000\002" +
    "\022\012\000\002\022\012\000\002\033\011\000\002\033" +
    "\013\000\002\033\010\000\002\033\012\000\002\033\011" +
    "\000\002\033\013\000\002\033\013\000\002\033\010\000" +
    "\002\033\012\000\002\033\012\000\002\033\011\000\002" +
    "\033\010\000\002\033\010\000\002\033\012\000\002\033" +
    "\012\000\002\034\007\000\002\034\007\000\002\034\006" +
    "\000\002\034\006\000\002\034\006\000\002\034\006\000" +
    "\002\034\006\000\002\034\006\000\002\034\007\000\002" +
    "\034\006\000\002\034\010\000\002\035\007\000\002\035" +
    "\006\000\002\035\006\000\002\035\006\000\002\036\005" +
    "\000\002\036\005\000\002\036\004\000\002\036\006\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\005\000\002\036\003\000\002\036\004" +
    "\000\002\036\006\000\002\036\003\000\002\036\005\000" +
    "\002\036\005\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\037\011\000" +
    "\002\037\013\000\002\037\015\000\002\037\010\000\002" +
    "\037\012\000\002\037\014\000\002\037\010\000\002\037" +
    "\012\000\002\037\011\000\002\037\012\000\002\037\014" +
    "\000\002\037\013\000\002\037\012\000\002\037\014\000" +
    "\002\037\013\000\002\037\010\000\002\037\010\000\002" +
    "\037\007\000\002\037\012\000\002\037\012\000\002\037" +
    "\011\000\002\037\014\000\002\037\014\000\002\037\013" +
    "\000\002\037\011\000\002\037\011\000\002\037\013\000" +
    "\002\037\013\000\002\037\015\000\002\037\015\000\002" +
    "\037\015\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\040\003\000\002\040\003\000\002\014\003\000\002" +
    "\014\005\000\002\014\004\000\002\026\011\000\002\026" +
    "\015\000\002\026\010\000\002\026\010\000\002\026\010" +
    "\000\002\026\014\000\002\026\014\000\002\026\014\000" +
    "\002\026\014\000\002\026\014\000\002\031\011\000\002" +
    "\031\014\000\002\031\010\000\002\031\010\000\002\031" +
    "\007\000\002\031\010\000\002\031\011\000\002\031\011" +
    "\000\002\031\011\000\002\031\011\000\002\031\011\000" +
    "\002\031\011\000\002\031\010\000\002\031\010\000\002" +
    "\031\011\000\002\031\013\000\002\031\013\000\002\031" +
    "\012\000\002\031\013\000\002\031\014\000\002\031\014" +
    "\000\002\031\014\000\002\031\014\000\002\031\014\000" +
    "\002\031\014\000\002\031\013\000\002\031\013\000\002" +
    "\031\014\000\002\031\013\000\002\031\013\000\002\031" +
    "\013\000\002\032\010\000\002\032\011\000\002\032\006" +
    "\000\002\032\007\000\002\032\007\000\002\032\007\000" +
    "\002\032\006\000\002\032\010\000\002\032\010\000\002" +
    "\032\005\000\002\032\007\000\002\032\010\000\002\032" +
    "\010\000\002\032\010\000\002\032\007\000\002\032\011" +
    "\000\002\032\012\000\002\032\006\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\004\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\030\011\000\002\030\010\000\002\030\010\000" +
    "\002\030\010\000\002\030\010\000\002\023\013\000\002" +
    "\023\012\000\002\023\012\000\002\023\012\000\002\023" +
    "\012\000\002\023\012\000\002\023\012\000\002\023\012" +
    "\000\002\023\012\000\002\024\006\000\002\024\005\000" +
    "\002\062\005\000\002\062\005\000\002\062\003\000\002" +
    "\063\005\000\002\063\005\000\002\063\003\000\002\064" +
    "\003\000\002\064\005\000\002\064\004\000\002\047\004" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\055\007\000\002" +
    "\055\006\000\002\055\006\000\002\055\006\000\002\055" +
    "\006\000\002\055\004\000\002\045\011\000\002\045\013" +
    "\000\002\045\011\000\002\045\010\000\002\045\010\000" +
    "\002\045\010\000\002\045\010\000\002\045\010\000\002" +
    "\045\010\000\002\045\006\000\002\045\012\000\002\045" +
    "\012\000\002\045\012\000\002\045\012\000\002\045\012" +
    "\000\002\045\012\000\002\045\012\000\002\045\012\000" +
    "\002\045\010\000\002\045\010\000\002\045\010\000\002" +
    "\045\010\000\002\045\010\000\002\045\007\000\002\046" +
    "\007\000\002\046\007\000\002\046\006\000\002\046\006" +
    "\000\002\046\006\000\002\046\006\000\002\046\005\000" +
    "\002\046\004\000\002\046\005\000\002\046\005\000\002" +
    "\046\007\000\002\046\007\000\002\046\007\000\002\044" +
    "\020\000\002\044\014\000\002\044\017\000\002\044\017" +
    "\000\002\044\017\000\002\044\017\000\002\044\017\000" +
    "\002\044\017\000\002\044\017\000\002\044\017\000\002" +
    "\044\017\000\002\044\017\000\002\044\017\000\002\044" +
    "\013\000\002\044\013\000\002\044\013\000\002\044\013" +
    "\000\002\044\013\000\002\060\004\000\002\060\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\057\003\000" +
    "\002\061\007\000\002\061\005\000\002\061\006\000\002" +
    "\061\006\000\002\061\006\000\002\061\006\000\002\061" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u049e\000\006\044\006\102\004\001\002\000\004\064" +
    "\u049f\001\002\000\004\002\u049e\001\002\000\032\003\017" +
    "\013\014\025\015\033\026\064\023\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\012\001\002\000\062" +
    "\004\ufeed\006\ufeed\007\ufeed\010\ufeed\011\ufeed\012\ufeed\020" +
    "\ufeed\021\ufeed\022\ufeed\026\ufeed\036\ufeed\037\ufeed\041\ufeed" +
    "\042\ufeed\043\ufeed\065\ufeed\070\ufeed\074\ufeed\075\ufeed\076" +
    "\ufeed\077\ufeed\100\ufeed\101\ufeed\102\ufeed\001\002\000\032" +
    "\002\ufff0\003\017\013\014\025\015\033\026\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\032\001\002" +
    "\000\062\004\ufef0\006\ufef0\007\ufef0\010\ufef0\011\ufef0\012" +
    "\ufef0\020\ufef0\021\ufef0\022\ufef0\026\ufef0\036\ufef0\037\ufef0" +
    "\041\ufef0\042\ufef0\043\ufef0\065\ufef0\070\ufef0\074\ufef0\075" +
    "\ufef0\076\ufef0\077\ufef0\100\ufef0\101\ufef0\102\ufef0\001\002" +
    "\000\034\003\017\013\014\025\015\033\026\064\u0494\065" +
    "\036\074\011\075\016\076\007\077\020\100\013\101\022" +
    "\102\032\001\002\000\062\004\ufeeb\006\ufeeb\007\ufeeb\010" +
    "\ufeeb\011\ufeeb\012\ufeeb\020\ufeeb\021\ufeeb\022\ufeeb\026\ufeeb" +
    "\036\ufeeb\037\ufeeb\041\ufeeb\042\ufeeb\043\ufeeb\065\ufeeb\070" +
    "\ufeeb\074\ufeeb\075\ufeeb\076\ufeeb\077\ufeeb\100\ufeeb\101\ufeeb" +
    "\102\ufeeb\001\002\000\024\014\u0463\065\u0460\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\u0462\001\002" +
    "\000\054\004\047\006\055\007\062\010\070\011\130\012" +
    "\076\020\101\021\067\022\037\036\063\037\064\041\075" +
    "\042\102\064\u045a\074\011\075\016\076\007\077\020\100" +
    "\013\101\022\102\074\001\002\000\062\004\ufeef\006\ufeef" +
    "\007\ufeef\010\ufeef\011\ufeef\012\ufeef\020\ufeef\021\ufeef\022" +
    "\ufeef\026\ufeef\036\ufeef\037\ufeef\041\ufeef\042\ufeef\043\ufeef" +
    "\065\ufeef\070\ufeef\074\ufeef\075\ufeef\076\ufeef\077\ufeef\100" +
    "\ufeef\101\ufeef\102\ufeef\001\002\000\006\064\u0457\070\u0458" +
    "\001\002\000\062\004\ufeec\006\ufeec\007\ufeec\010\ufeec\011" +
    "\ufeec\012\ufeec\020\ufeec\021\ufeec\022\ufeec\026\ufeec\036\ufeec" +
    "\037\ufeec\041\ufeec\042\ufeec\043\ufeec\065\ufeec\070\ufeec\074" +
    "\ufeec\075\ufeec\076\ufeec\077\ufeec\100\ufeec\101\ufeec\102\ufeec" +
    "\001\002\000\030\002\ufff1\003\017\013\014\033\026\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\032" +
    "\001\002\000\062\004\ufeee\006\ufeee\007\ufeee\010\ufeee\011" +
    "\ufeee\012\ufeee\020\ufeee\021\ufeee\022\ufeee\026\ufeee\036\ufeee" +
    "\037\ufeee\041\ufeee\042\ufeee\043\ufeee\065\ufeee\070\ufeee\074" +
    "\ufeee\075\ufeee\076\ufeee\077\ufeee\100\ufeee\101\ufeee\102\ufeee" +
    "\001\002\000\030\003\017\013\014\025\015\033\026\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\032" +
    "\001\002\000\004\102\u044d\001\002\000\004\002\ufffc\001" +
    "\002\000\040\022\037\030\u035f\031\u0366\034\u0360\035\u036a" +
    "\036\063\040\u0367\045\u035b\067\u035d\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\001\002\000\026\002\ufff2" +
    "\013\014\025\015\074\011\075\016\076\007\077\020\100" +
    "\013\101\022\102\032\001\002\000\032\002\uffea\003\uffea" +
    "\013\uffea\025\uffea\033\uffea\074\uffea\075\uffea\076\uffea\077" +
    "\uffea\100\uffea\101\uffea\102\uffea\001\002\000\026\002\uffee" +
    "\013\014\025\015\074\011\075\016\076\007\077\020\100" +
    "\013\101\022\102\032\001\002\000\004\065\036\001\002" +
    "\000\024\002\ufff4\013\014\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\032\001\002\000\024\002\ufffa" +
    "\013\014\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\032\001\002\000\032\002\uffeb\003\uffeb\013\uffeb" +
    "\025\uffeb\033\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\100" +
    "\uffeb\101\uffeb\102\uffeb\001\002\000\020\022\037\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\001\002\000" +
    "\032\013\u030d\030\u030f\031\u030a\034\u030e\035\u030b\036\u0310" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\001" +
    "\002\000\026\022\ufee5\066\ufee5\067\ufee5\074\ufee5\075\ufee5" +
    "\076\ufee5\077\ufee5\100\ufee5\101\ufee5\104\ufee5\001\002\000" +
    "\004\102\u0305\001\002\000\024\022\037\066\045\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\104\043\001" +
    "\002\000\020\022\037\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\001\002\000\026\022\ufee3\066\ufee3\067" +
    "\ufee3\074\ufee3\075\ufee3\076\ufee3\077\ufee3\100\ufee3\101\ufee3" +
    "\104\ufee3\001\002\000\004\067\046\001\002\000\052\004" +
    "\047\006\055\007\062\010\070\011\061\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\046\023\u0183\024\u0189\032\u0191\046\u018d\053" +
    "\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060\u0186\061\u0185" +
    "\062\u018f\063\u0188\065\u02df\102\u014f\103\u014b\104\u0184\105" +
    "\u0187\001\002\000\056\004\uff8b\006\uff8b\007\uff8b\010\uff8b" +
    "\011\uff8b\012\uff8b\020\uff8b\021\uff8b\022\uff8b\036\uff8b\037" +
    "\uff8b\041\uff8b\042\uff8b\043\uff8b\070\uff8b\074\uff8b\075\uff8b" +
    "\076\uff8b\077\uff8b\100\uff8b\101\uff8b\102\uff8b\001\002\000" +
    "\056\004\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d" +
    "\020\uff8d\021\uff8d\022\uff8d\036\uff8d\037\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\070\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d" +
    "\100\uff8d\101\uff8d\102\uff8d\001\002\000\056\004\uff89\006" +
    "\uff89\007\uff89\010\uff89\011\uff89\012\uff89\020\uff89\021\uff89" +
    "\022\uff89\036\uff89\037\uff89\041\uff89\042\uff89\043\uff89\070" +
    "\uff89\074\uff89\075\uff89\076\uff89\077\uff89\100\uff89\101\uff89" +
    "\102\uff89\001\002\000\056\004\uff8f\006\uff8f\007\uff8f\010" +
    "\uff8f\011\uff8f\012\uff8f\020\uff8f\021\uff8f\022\uff8f\036\uff8f" +
    "\037\uff8f\041\uff8f\042\uff8f\043\uff8f\070\uff8f\074\uff8f\075" +
    "\uff8f\076\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\001\002" +
    "\000\056\004\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\020\uff99\021\uff99\022\uff99\036\uff99\037\uff99\041\uff99" +
    "\042\uff99\043\uff99\070\uff99\074\uff99\075\uff99\076\uff99\077" +
    "\uff99\100\uff99\101\uff99\102\uff99\001\002\000\046\023\u0183" +
    "\024\u0189\032\u0191\046\u018d\053\u018b\054\u0192\055\u018a\056" +
    "\u0193\057\u018e\060\u0186\061\u0185\062\u018f\063\u0188\065\u02dc" +
    "\102\u014f\103\u014b\104\u0184\105\u0187\001\002\000\056\004" +
    "\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\036\uffa1\037\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\070\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1" +
    "\101\uffa1\102\uffa1\001\002\000\056\004\uff9f\006\uff9f\007" +
    "\uff9f\010\uff9f\011\uff9f\012\uff9f\020\uff9f\021\uff9f\022\uff9f" +
    "\036\uff9f\037\uff9f\041\uff9f\042\uff9f\043\uff9f\070\uff9f\074" +
    "\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f" +
    "\001\002\000\056\004\uff9d\006\uff9d\007\uff9d\010\uff9d\011" +
    "\uff9d\012\uff9d\020\uff9d\021\uff9d\022\uff9d\036\uff9d\037\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\070\uff9d\074\uff9d\075\uff9d\076" +
    "\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\001\002\000\056" +
    "\004\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\020" +
    "\uff9b\021\uff9b\022\uff9b\036\uff9b\037\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\070\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100" +
    "\uff9b\101\uff9b\102\uff9b\001\002\000\054\004\047\006\055" +
    "\007\062\010\070\011\130\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\067\u02a7\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\006\065\u0277\102\u0278\001\002\000\046\023\u0183" +
    "\024\u0189\032\u0191\046\u018d\053\u018b\054\u0192\055\u018a\056" +
    "\u0193\057\u018e\060\u0186\061\u0185\062\u018f\063\u0188\065\u026f" +
    "\102\u014f\103\u014b\104\u0184\105\u0187\001\002\000\056\004" +
    "\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\020\uff97" +
    "\021\uff97\022\uff97\036\uff97\037\uff97\041\uff97\042\uff97\043" +
    "\uff97\070\uff97\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97" +
    "\101\uff97\102\uff97\001\002\000\056\004\uffa3\006\uffa3\007" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\020\uffa3\021\uffa3\022\uffa3" +
    "\036\uffa3\037\uffa3\041\uffa3\042\uffa3\043\uffa3\070\uffa3\074" +
    "\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3\101\uffa3\102\uffa3" +
    "\001\002\000\010\065\u022c\102\u022e\104\u022d\001\002\000" +
    "\020\065\u0176\074\u0178\075\u017b\076\u017a\077\u0175\100\u0179" +
    "\101\u017c\001\002\000\056\004\uff93\006\uff93\007\uff93\010" +
    "\uff93\011\uff93\012\uff93\020\uff93\021\uff93\022\uff93\036\uff93" +
    "\037\uff93\041\uff93\042\uff93\043\uff93\070\uff93\074\uff93\075" +
    "\uff93\076\uff93\077\uff93\100\uff93\101\uff93\102\uff93\001\002" +
    "\000\056\004\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\020\uff95\021\uff95\022\uff95\036\uff95\037\uff95\041\uff95" +
    "\042\uff95\043\uff95\070\uff95\074\uff95\075\uff95\076\uff95\077" +
    "\uff95\100\uff95\101\uff95\102\uff95\001\002\000\054\004\047" +
    "\006\055\007\062\010\070\011\u0110\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\070\u0174" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\004\046\367\001\002\000\014\064\u015e" +
    "\065\u015c\066\u015d\102\u014f\103\u014b\001\002\000\022\064" +
    "\u0159\074\011\075\016\076\007\077\020\100\013\101\022" +
    "\102\u015a\001\002\000\056\004\uff91\006\uff91\007\uff91\010" +
    "\uff91\011\uff91\012\uff91\020\uff91\021\uff91\022\uff91\036\uff91" +
    "\037\uff91\041\uff91\042\uff91\043\uff91\070\uff91\074\uff91\075" +
    "\uff91\076\uff91\077\uff91\100\uff91\101\uff91\102\uff91\001\002" +
    "\000\056\004\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012" +
    "\uff87\020\uff87\021\uff87\022\uff87\036\uff87\037\uff87\041\uff87" +
    "\042\uff87\043\uff87\070\uff87\074\uff87\075\uff87\076\uff87\077" +
    "\uff87\100\uff87\101\uff87\102\uff87\001\002\000\012\064\u014d" +
    "\065\u014c\102\u014f\103\u014b\001\002\000\006\065\103\102" +
    "\104\001\002\000\034\022\037\023\302\024\300\066\305" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\301\103\303\105\306\001\002\000\006\066\105\067\106" +
    "\001\002\000\004\067\271\001\002\000\014\023\113\024" +
    "\110\057\112\103\107\105\111\001\002\000\064\004\ufea7" +
    "\006\ufea7\007\ufea7\010\ufea7\011\ufea7\012\ufea7\020\ufea7\021" +
    "\ufea7\022\ufea7\036\ufea7\037\ufea7\041\ufea7\042\ufea7\047\263" +
    "\060\ufea7\073\ufea7\074\ufea7\075\ufea7\076\ufea7\077\ufea7\100" +
    "\ufea7\101\ufea7\102\ufea7\103\262\104\264\001\002\000\056" +
    "\004\ufea4\006\ufea4\007\ufea4\010\ufea4\011\ufea4\012\ufea4\020" +
    "\ufea4\021\ufea4\022\ufea4\036\ufea4\037\ufea4\041\ufea4\042\ufea4" +
    "\060\ufea4\073\ufea4\074\ufea4\075\ufea4\076\ufea4\077\ufea4\100" +
    "\ufea4\101\ufea4\102\ufea4\001\002\000\062\004\ufea6\006\ufea6" +
    "\007\ufea6\010\ufea6\011\ufea6\012\ufea6\020\ufea6\021\ufea6\022" +
    "\ufea6\036\ufea6\037\ufea6\041\ufea6\042\ufea6\047\256\060\ufea6" +
    "\073\ufea6\074\ufea6\075\ufea6\076\ufea6\077\ufea6\100\ufea6\101" +
    "\ufea6\102\ufea6\104\257\001\002\000\014\023\113\024\110" +
    "\102\232\103\107\105\111\001\002\000\056\004\ufea5\006" +
    "\ufea5\007\ufea5\010\ufea5\011\ufea5\012\ufea5\020\ufea5\021\ufea5" +
    "\022\ufea5\036\ufea5\037\ufea5\041\ufea5\042\ufea5\060\ufea5\073" +
    "\ufea5\074\ufea5\075\ufea5\076\ufea5\077\ufea5\100\ufea5\101\ufea5" +
    "\102\ufea5\001\002\000\020\023\113\024\110\043\166\057" +
    "\165\070\164\103\107\105\111\001\002\000\056\004\047" +
    "\006\055\007\062\010\070\011\130\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\060\122" +
    "\073\116\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\052\004\047\006\055\007\062" +
    "\010\070\011\130\012\076\020\101\021\067\022\037\036" +
    "\063\037\064\041\075\042\102\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\102\074\001\002\000\056\004" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\026\uffa9\036\uffa9\037\uffa9\041\uffa9\042" +
    "\uffa9\070\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9" +
    "\101\uffa9\102\uffa9\001\002\000\056\004\uffab\006\uffab\007" +
    "\uffab\010\uffab\011\uffab\012\uffab\020\uffab\021\uffab\022\uffab" +
    "\026\uffab\036\uffab\037\uffab\041\uffab\042\uffab\070\uffab\074" +
    "\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab\102\uffab" +
    "\001\002\000\056\004\uffa7\006\uffa7\007\uffa7\010\uffa7\011" +
    "\uffa7\012\uffa7\020\uffa7\021\uffa7\022\uffa7\026\uffa7\036\uffa7" +
    "\037\uffa7\041\uffa7\042\uffa7\070\uffa7\074\uffa7\075\uffa7\076" +
    "\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7\001\002\000\004" +
    "\073\157\001\002\000\056\004\uffad\006\uffad\007\uffad\010" +
    "\uffad\011\uffad\012\uffad\020\uffad\021\uffad\022\uffad\026\uffad" +
    "\036\uffad\037\uffad\041\uffad\042\uffad\070\uffad\074\uffad\075" +
    "\uffad\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad\001\002" +
    "\000\056\004\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\026\uffb7\036\uffb7\037\uffb7" +
    "\041\uffb7\042\uffb7\070\uffb7\074\uffb7\075\uffb7\076\uffb7\077" +
    "\uffb7\100\uffb7\101\uffb7\102\uffb7\001\002\000\056\004\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\020\uffbf\021" +
    "\uffbf\022\uffbf\026\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf" +
    "\070\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101" +
    "\uffbf\102\uffbf\001\002\000\056\004\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\020\uffbd\021\uffbd\022\uffbd\026" +
    "\uffbd\036\uffbd\037\uffbd\041\uffbd\042\uffbd\070\uffbd\074\uffbd" +
    "\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\001" +
    "\002\000\056\004\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb" +
    "\012\uffbb\020\uffbb\021\uffbb\022\uffbb\026\uffbb\036\uffbb\037" +
    "\uffbb\041\uffbb\042\uffbb\070\uffbb\074\uffbb\075\uffbb\076\uffbb" +
    "\077\uffbb\100\uffbb\101\uffbb\102\uffbb\001\002\000\056\004" +
    "\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\026\uffb9\036\uffb9\037\uffb9\041\uffb9\042" +
    "\uffb9\070\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\001\002\000\056\004\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\011\uffb5\012\uffb5\020\uffb5\021\uffb5\022\uffb5" +
    "\026\uffb5\036\uffb5\037\uffb5\041\uffb5\042\uffb5\070\uffb5\074" +
    "\uffb5\075\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5" +
    "\001\002\000\056\004\uffc1\006\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\012\uffc1\020\uffc1\021\uffc1\022\uffc1\026\uffc1\036\uffc1" +
    "\037\uffc1\041\uffc1\042\uffc1\070\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\001\002\000\056" +
    "\004\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\026\uffb1\036\uffb1\037\uffb1\041\uffb1" +
    "\042\uffb1\070\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100" +
    "\uffb1\101\uffb1\102\uffb1\001\002\000\056\004\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\011\uffb3\012\uffb3\020\uffb3\021\uffb3\022" +
    "\uffb3\026\uffb3\036\uffb3\037\uffb3\041\uffb3\042\uffb3\070\uffb3" +
    "\074\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102" +
    "\uffb3\001\002\000\052\004\047\006\055\007\062\010\070" +
    "\011\154\012\076\020\101\021\067\022\037\036\063\037" +
    "\064\041\075\042\102\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\102\074\001\002\000\056\004\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\026\uffaf\036\uffaf\037\uffaf\041\uffaf\042\uffaf\070" +
    "\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf" +
    "\102\uffaf\001\002\000\056\004\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\020\uffa5\021\uffa5\022\uffa5\026\uffa5" +
    "\036\uffa5\037\uffa5\041\uffa5\042\uffa5\070\uffa5\074\uffa5\075" +
    "\uffa5\076\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\001\002" +
    "\000\056\004\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\020\uffac\021\uffac\022\uffac\026\uffac\036\uffac\037\uffac" +
    "\041\uffac\042\uffac\070\uffac\074\uffac\075\uffac\076\uffac\077" +
    "\uffac\100\uffac\101\uffac\102\uffac\001\002\000\056\004\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\026\uffb2\036\uffb2\037\uffb2\041\uffb2\042\uffb2" +
    "\070\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101" +
    "\uffb2\102\uffb2\001\002\000\056\004\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\020\uffc0\021\uffc0\022\uffc0\026" +
    "\uffc0\036\uffc0\037\uffc0\041\uffc0\042\uffc0\070\uffc0\074\uffc0" +
    "\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\001" +
    "\002\000\056\004\uffba\006\uffba\007\uffba\010\uffba\011\uffba" +
    "\012\uffba\020\uffba\021\uffba\022\uffba\026\uffba\036\uffba\037" +
    "\uffba\041\uffba\042\uffba\070\uffba\074\uffba\075\uffba\076\uffba" +
    "\077\uffba\100\uffba\101\uffba\102\uffba\001\002\000\056\004" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\026\uffb4\036\uffb4\037\uffb4\041\uffb4\042" +
    "\uffb4\070\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4" +
    "\101\uffb4\102\uffb4\001\002\000\056\004\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\026\uffb0\036\uffb0\037\uffb0\041\uffb0\042\uffb0\070\uffb0\074" +
    "\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0" +
    "\001\002\000\056\004\uffb6\006\uffb6\007\uffb6\010\uffb6\011" +
    "\uffb6\012\uffb6\020\uffb6\021\uffb6\022\uffb6\026\uffb6\036\uffb6" +
    "\037\uffb6\041\uffb6\042\uffb6\070\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\077\uffb6\100\uffb6\101\uffb6\102\uffb6\001\002\000\056" +
    "\004\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\026\uffa8\036\uffa8\037\uffa8\041\uffa8" +
    "\042\uffa8\070\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100" +
    "\uffa8\101\uffa8\102\uffa8\001\002\000\056\004\uffa4\006\uffa4" +
    "\007\uffa4\010\uffa4\011\uffa4\012\uffa4\020\uffa4\021\uffa4\022" +
    "\uffa4\026\uffa4\036\uffa4\037\uffa4\041\uffa4\042\uffa4\070\uffa4" +
    "\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4\102" +
    "\uffa4\001\002\000\056\004\uffbe\006\uffbe\007\uffbe\010\uffbe" +
    "\011\uffbe\012\uffbe\020\uffbe\021\uffbe\022\uffbe\026\uffbe\036" +
    "\uffbe\037\uffbe\041\uffbe\042\uffbe\070\uffbe\074\uffbe\075\uffbe" +
    "\076\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\001\002\000" +
    "\056\004\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa" +
    "\020\uffaa\021\uffaa\022\uffaa\026\uffaa\036\uffaa\037\uffaa\041" +
    "\uffaa\042\uffaa\070\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa" +
    "\100\uffaa\101\uffaa\102\uffaa\001\002\000\056\004\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\020\uffa6\021\uffa6" +
    "\022\uffa6\026\uffa6\036\uffa6\037\uffa6\041\uffa6\042\uffa6\070" +
    "\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6" +
    "\102\uffa6\001\002\000\072\004\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\020\uffb8\021\uffb8\022\uffb8\023\ufeb0" +
    "\024\ufeb0\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\ufeb0\057" +
    "\ufeb0\070\ufeb0\073\ufeb0\074\uffb8\075\uffb8\076\uffb8\077\uffb8" +
    "\100\uffb8\101\uffb8\102\uffb8\103\ufeb0\105\ufeb0\001\002\000" +
    "\056\004\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\020\uffae\021\uffae\022\uffae\026\uffae\036\uffae\037\uffae\041" +
    "\uffae\042\uffae\070\uffae\074\uffae\075\uffae\076\uffae\077\uffae" +
    "\100\uffae\101\uffae\102\uffae\001\002\000\056\004\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\026\uffbc\036\uffbc\037\uffbc\041\uffbc\042\uffbc\070" +
    "\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc" +
    "\102\uffbc\001\002\000\052\004\047\006\055\007\062\010" +
    "\070\011\130\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\052\004\047" +
    "\006\055\007\062\010\070\011\161\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\072\004\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\020\uffb8\021\uffb8\022\uffb8\023\ufeb6\024\ufeb6\036" +
    "\uffb8\037\uffb8\041\uffb8\042\uffb8\043\ufeb6\057\ufeb6\070\ufeb6" +
    "\073\ufeb6\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101" +
    "\uffb8\102\uffb8\103\ufeb6\105\ufeb6\001\002\000\052\004\047" +
    "\006\055\007\062\010\070\011\163\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\072\004\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\020\uffb8\021\uffb8\022\uffb8\023\ufeb7\024\ufeb7\036" +
    "\uffb8\037\uffb8\041\uffb8\042\uffb8\043\ufeb7\057\ufeb7\070\ufeb7" +
    "\073\ufeb7\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101" +
    "\uffb8\102\uffb8\103\ufeb7\105\ufeb7\001\002\000\060\004\ufed4" +
    "\006\ufed4\007\ufed4\010\ufed4\011\ufed4\012\ufed4\020\ufed4\021" +
    "\ufed4\022\ufed4\026\ufed4\036\ufed4\037\ufed4\041\ufed4\042\ufed4" +
    "\043\ufed4\070\ufed4\074\ufed4\075\ufed4\076\ufed4\077\ufed4\100" +
    "\ufed4\101\ufed4\102\ufed4\001\002\000\014\023\113\024\110" +
    "\102\205\103\107\105\111\001\002\000\004\073\201\001" +
    "\002\000\056\004\047\006\055\007\062\010\070\011\130" +
    "\012\076\020\101\021\067\022\037\036\063\037\064\041" +
    "\075\042\102\060\171\073\170\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\102\074\001\002\000\052\004" +
    "\047\006\055\007\062\010\070\011\130\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\004\073\174\001\002\000\052\004\047\006" +
    "\055\007\062\010\070\011\173\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\074\001\002" +
    "\000\072\004\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\ufea8\024\ufea8\036\uffb8" +
    "\037\uffb8\041\uffb8\042\uffb8\043\ufea8\057\ufea8\070\ufea8\073" +
    "\ufea8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8" +
    "\102\uffb8\103\ufea8\105\ufea8\001\002\000\052\004\047\006" +
    "\055\007\062\010\070\011\130\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\074\001\002" +
    "\000\052\004\047\006\055\007\062\010\070\011\176\012" +
    "\076\020\101\021\067\022\037\036\063\037\064\041\075" +
    "\042\102\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\072\004\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\ufeae\024\ufeae\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\ufeae" +
    "\057\ufeae\070\ufeae\073\ufeae\074\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\100\uffb8\101\uffb8\102\uffb8\103\ufeae\105\ufeae\001\002" +
    "\000\052\004\047\006\055\007\062\010\070\011\200\012" +
    "\076\020\101\021\067\022\037\036\063\037\064\041\075" +
    "\042\102\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\072\004\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\ufeaf\024\ufeaf\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\ufeaf" +
    "\057\ufeaf\070\ufeaf\073\ufeaf\074\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\100\uffb8\101\uffb8\102\uffb8\103\ufeaf\105\ufeaf\001\002" +
    "\000\052\004\047\006\055\007\062\010\070\011\130\012" +
    "\076\020\101\021\067\022\037\036\063\037\064\041\075" +
    "\042\102\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\054\004\047\006\055\007\062" +
    "\010\070\011\204\012\076\020\101\021\067\022\037\036" +
    "\063\037\064\041\075\042\102\070\203\074\011\075\016" +
    "\076\007\077\020\100\013\101\022\102\074\001\002\000" +
    "\060\004\ufec7\006\ufec7\007\ufec7\010\ufec7\011\ufec7\012\ufec7" +
    "\020\ufec7\021\ufec7\022\ufec7\026\ufec7\036\ufec7\037\ufec7\041" +
    "\ufec7\042\ufec7\043\ufec7\070\ufec7\074\ufec7\075\ufec7\076\ufec7" +
    "\077\ufec7\100\ufec7\101\ufec7\102\ufec7\001\002\000\056\004" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\026\uffb8\036\uffb8\037\uffb8\041\uffb8\042" +
    "\uffb8\070\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8" +
    "\101\uffb8\102\uffb8\001\002\000\004\060\226\001\002\000" +
    "\056\004\047\006\055\007\062\010\070\011\130\012\076" +
    "\020\101\021\067\022\037\036\063\037\064\041\075\042" +
    "\102\060\210\073\207\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\102\074\001\002\000\052\004\047\006" +
    "\055\007\062\010\070\011\130\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\074\001\002" +
    "\000\056\004\047\006\055\007\062\010\070\011\130\012" +
    "\076\020\101\021\067\022\037\036\063\037\064\041\075" +
    "\042\102\067\214\073\213\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\052\004\047" +
    "\006\055\007\062\010\070\011\212\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\072\004\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\020\uffb8\021\uffb8\022\uffb8\023\ufeab\024\ufeab\036" +
    "\uffb8\037\uffb8\041\uffb8\042\uffb8\043\ufeab\057\ufeab\070\ufeab" +
    "\073\ufeab\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101" +
    "\uffb8\102\uffb8\103\ufeab\105\ufeab\001\002\000\052\004\047" +
    "\006\055\007\062\010\070\011\130\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\052\004\047\006\055\007\062\010\070\011\130" +
    "\012\076\020\101\021\067\022\037\036\063\037\064\041" +
    "\075\042\102\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\102\074\001\002\000\052\004\047\006\055\007" +
    "\062\010\070\011\216\012\076\020\101\021\067\022\037" +
    "\036\063\037\064\041\075\042\102\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\074\001\002\000\072" +
    "\004\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\ufeac\024\ufeac\036\uffb8\037\uffb8" +
    "\041\uffb8\042\uffb8\043\ufeac\057\ufeac\070\ufeac\073\ufeac\074" +
    "\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8" +
    "\103\ufeac\105\ufeac\001\002\000\054\004\047\006\055\007" +
    "\062\010\070\011\204\012\076\020\101\021\067\022\037" +
    "\036\063\037\064\041\075\042\102\070\220\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\074\001\002" +
    "\000\004\011\221\001\002\000\022\023\ufea9\024\ufea9\043" +
    "\ufea9\057\ufea9\070\ufea9\073\ufea9\103\ufea9\105\ufea9\001\002" +
    "\000\052\004\047\006\055\007\062\010\070\011\223\012" +
    "\076\020\101\021\067\022\037\036\063\037\064\041\075" +
    "\042\102\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\072\004\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\ufeb8\024\ufeb8\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\ufeb8" +
    "\057\ufeb8\070\ufeb8\073\ufeb8\074\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\100\uffb8\101\uffb8\102\uffb8\103\ufeb8\105\ufeb8\001\002" +
    "\000\052\004\047\006\055\007\062\010\070\011\225\012" +
    "\076\020\101\021\067\022\037\036\063\037\064\041\075" +
    "\042\102\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\072\004\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\011\uffb8\012\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\ufead\024\ufead\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\ufead" +
    "\057\ufead\070\ufead\073\ufead\074\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\100\uffb8\101\uffb8\102\uffb8\103\ufead\105\ufead\001\002" +
    "\000\004\073\227\001\002\000\052\004\047\006\055\007" +
    "\062\010\070\011\130\012\076\020\101\021\067\022\037" +
    "\036\063\037\064\041\075\042\102\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\074\001\002\000\052" +
    "\004\047\006\055\007\062\010\070\011\231\012\076\020" +
    "\101\021\067\022\037\036\063\037\064\041\075\042\102" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\072\004\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\020\uffb8\021\uffb8\022\uffb8\023\ufeaa\024" +
    "\ufeaa\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\ufeaa\057\ufeaa" +
    "\070\ufeaa\073\ufeaa\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100" +
    "\uffb8\101\uffb8\102\uffb8\103\ufeaa\105\ufeaa\001\002\000\004" +
    "\060\252\001\002\000\056\004\047\006\055\007\062\010" +
    "\070\011\130\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\060\235\073\234\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\074\001\002" +
    "\000\052\004\047\006\055\007\062\010\070\011\130\012" +
    "\076\020\101\021\067\022\037\036\063\037\064\041\075" +
    "\042\102\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\056\004\047\006\055\007\062" +
    "\010\070\011\130\012\076\020\101\021\067\022\037\036" +
    "\063\037\064\041\075\042\102\067\241\073\240\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\052\004\047\006\055\007\062\010\070\011\237" +
    "\012\076\020\101\021\067\022\037\036\063\037\064\041" +
    "\075\042\102\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\102\074\001\002\000\072\004\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\011\uffb8\012\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\ufeb3\024\ufeb3\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043" +
    "\ufeb3\057\ufeb3\070\ufeb3\073\ufeb3\074\uffb8\075\uffb8\076\uffb8" +
    "\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\ufeb3\105\ufeb3\001" +
    "\002\000\052\004\047\006\055\007\062\010\070\011\130" +
    "\012\076\020\101\021\067\022\037\036\063\037\064\041" +
    "\075\042\102\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\102\074\001\002\000\052\004\047\006\055\007" +
    "\062\010\070\011\130\012\076\020\101\021\067\022\037" +
    "\036\063\037\064\041\075\042\102\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\074\001\002\000\052" +
    "\004\047\006\055\007\062\010\070\011\243\012\076\020" +
    "\101\021\067\022\037\036\063\037\064\041\075\042\102" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\072\004\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\020\uffb8\021\uffb8\022\uffb8\023\ufeb4\024" +
    "\ufeb4\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\ufeb4\057\ufeb4" +
    "\070\ufeb4\073\ufeb4\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100" +
    "\uffb8\101\uffb8\102\uffb8\103\ufeb4\105\ufeb4\001\002\000\054" +
    "\004\047\006\055\007\062\010\070\011\204\012\076\020" +
    "\101\021\067\022\037\036\063\037\064\041\075\042\102" +
    "\070\245\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\022\023\ufeb1\024\ufeb1\043\ufeb1" +
    "\057\ufeb1\070\ufeb1\073\ufeb1\103\ufeb1\105\ufeb1\001\002\000" +
    "\052\004\047\006\055\007\062\010\070\011\247\012\076" +
    "\020\101\021\067\022\037\036\063\037\064\041\075\042" +
    "\102\074\011\075\016\076\007\077\020\100\013\101\022" +
    "\102\074\001\002\000\072\004\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\020\uffb8\021\uffb8\022\uffb8\023\ufeb9" +
    "\024\ufeb9\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\ufeb9\057" +
    "\ufeb9\070\ufeb9\073\ufeb9\074\uffb8\075\uffb8\076\uffb8\077\uffb8" +
    "\100\uffb8\101\uffb8\102\uffb8\103\ufeb9\105\ufeb9\001\002\000" +
    "\052\004\047\006\055\007\062\010\070\011\251\012\076" +
    "\020\101\021\067\022\037\036\063\037\064\041\075\042" +
    "\102\074\011\075\016\076\007\077\020\100\013\101\022" +
    "\102\074\001\002\000\072\004\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\011\uffb8\012\uffb8\020\uffb8\021\uffb8\022\uffb8\023\ufeb5" +
    "\024\ufeb5\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\ufeb5\057" +
    "\ufeb5\070\ufeb5\073\ufeb5\074\uffb8\075\uffb8\076\uffb8\077\uffb8" +
    "\100\uffb8\101\uffb8\102\uffb8\103\ufeb5\105\ufeb5\001\002\000" +
    "\004\073\253\001\002\000\052\004\047\006\055\007\062" +
    "\010\070\011\130\012\076\020\101\021\067\022\037\036" +
    "\063\037\064\041\075\042\102\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\102\074\001\002\000\052\004" +
    "\047\006\055\007\062\010\070\011\255\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\072\004\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\020\uffb8\021\uffb8\022\uffb8\023\ufeb2\024\ufeb2" +
    "\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\ufeb2\057\ufeb2\070" +
    "\ufeb2\073\ufeb2\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8" +
    "\101\uffb8\102\uffb8\103\ufeb2\105\ufeb2\001\002\000\004\105" +
    "\261\001\002\000\004\105\260\001\002\000\056\004\ufe9e" +
    "\006\ufe9e\007\ufe9e\010\ufe9e\011\ufe9e\012\ufe9e\020\ufe9e\021" +
    "\ufe9e\022\ufe9e\036\ufe9e\037\ufe9e\041\ufe9e\042\ufe9e\060\ufe9e" +
    "\073\ufe9e\074\ufe9e\075\ufe9e\076\ufe9e\077\ufe9e\100\ufe9e\101" +
    "\ufe9e\102\ufe9e\001\002\000\056\004\ufea1\006\ufea1\007\ufea1" +
    "\010\ufea1\011\ufea1\012\ufea1\020\ufea1\021\ufea1\022\ufea1\036" +
    "\ufea1\037\ufea1\041\ufea1\042\ufea1\060\ufea1\073\ufea1\074\ufea1" +
    "\075\ufea1\076\ufea1\077\ufea1\100\ufea1\101\ufea1\102\ufea1\001" +
    "\002\000\056\004\ufea3\006\ufea3\007\ufea3\010\ufea3\011\ufea3" +
    "\012\ufea3\020\ufea3\021\ufea3\022\ufea3\036\ufea3\037\ufea3\041" +
    "\ufea3\042\ufea3\060\ufea3\073\ufea3\074\ufea3\075\ufea3\076\ufea3" +
    "\077\ufea3\100\ufea3\101\ufea3\102\ufea3\001\002\000\006\103" +
    "\267\105\270\001\002\000\006\102\266\103\265\001\002" +
    "\000\056\004\ufea2\006\ufea2\007\ufea2\010\ufea2\011\ufea2\012" +
    "\ufea2\020\ufea2\021\ufea2\022\ufea2\036\ufea2\037\ufea2\041\ufea2" +
    "\042\ufea2\060\ufea2\073\ufea2\074\ufea2\075\ufea2\076\ufea2\077" +
    "\ufea2\100\ufea2\101\ufea2\102\ufea2\001\002\000\056\004\ufe9d" +
    "\006\ufe9d\007\ufe9d\010\ufe9d\011\ufe9d\012\ufe9d\020\ufe9d\021" +
    "\ufe9d\022\ufe9d\036\ufe9d\037\ufe9d\041\ufe9d\042\ufe9d\060\ufe9d" +
    "\073\ufe9d\074\ufe9d\075\ufe9d\076\ufe9d\077\ufe9d\100\ufe9d\101" +
    "\ufe9d\102\ufe9d\001\002\000\056\004\ufe9f\006\ufe9f\007\ufe9f" +
    "\010\ufe9f\011\ufe9f\012\ufe9f\020\ufe9f\021\ufe9f\022\ufe9f\036" +
    "\ufe9f\037\ufe9f\041\ufe9f\042\ufe9f\060\ufe9f\073\ufe9f\074\ufe9f" +
    "\075\ufe9f\076\ufe9f\077\ufe9f\100\ufe9f\101\ufe9f\102\ufe9f\001" +
    "\002\000\056\004\ufea0\006\ufea0\007\ufea0\010\ufea0\011\ufea0" +
    "\012\ufea0\020\ufea0\021\ufea0\022\ufea0\036\ufea0\037\ufea0\041" +
    "\ufea0\042\ufea0\060\ufea0\073\ufea0\074\ufea0\075\ufea0\076\ufea0" +
    "\077\ufea0\100\ufea0\101\ufea0\102\ufea0\001\002\000\014\023" +
    "\113\024\110\057\112\103\107\105\111\001\002\000\020" +
    "\023\113\024\110\043\274\057\165\070\273\103\107\105" +
    "\111\001\002\000\060\004\ufed6\006\ufed6\007\ufed6\010\ufed6" +
    "\011\ufed6\012\ufed6\020\ufed6\021\ufed6\022\ufed6\026\ufed6\036" +
    "\ufed6\037\ufed6\041\ufed6\042\ufed6\043\ufed6\070\ufed6\074\ufed6" +
    "\075\ufed6\076\ufed6\077\ufed6\100\ufed6\101\ufed6\102\ufed6\001" +
    "\002\000\004\073\275\001\002\000\052\004\047\006\055" +
    "\007\062\010\070\011\130\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\074\011\075\016" +
    "\076\007\077\020\100\013\101\022\102\074\001\002\000" +
    "\054\004\047\006\055\007\062\010\070\011\204\012\076" +
    "\020\101\021\067\022\037\036\063\037\064\041\075\042" +
    "\102\070\277\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\102\074\001\002\000\060\004\ufec9\006\ufec9\007" +
    "\ufec9\010\ufec9\011\ufec9\012\ufec9\020\ufec9\021\ufec9\022\ufec9" +
    "\026\ufec9\036\ufec9\037\ufec9\041\ufec9\042\ufec9\043\ufec9\070" +
    "\ufec9\074\ufec9\075\ufec9\076\ufec9\077\ufec9\100\ufec9\101\ufec9" +
    "\102\ufec9\001\002\000\004\066\u0143\001\002\000\010\046" +
    "\367\066\370\067\371\001\002\000\004\066\357\001\002" +
    "\000\004\066\347\001\002\000\004\066\337\001\002\000" +
    "\004\067\330\001\002\000\004\066\320\001\002\000\024" +
    "\022\037\066\310\074\011\075\016\076\007\077\020\100" +
    "\013\101\022\104\043\001\002\000\004\067\311\001\002" +
    "\000\014\023\113\024\110\057\112\103\107\105\111\001" +
    "\002\000\020\023\113\024\110\043\314\057\165\070\313" +
    "\103\107\105\111\001\002\000\060\004\ufecd\006\ufecd\007" +
    "\ufecd\010\ufecd\011\ufecd\012\ufecd\020\ufecd\021\ufecd\022\ufecd" +
    "\026\ufecd\036\ufecd\037\ufecd\041\ufecd\042\ufecd\043\ufecd\070" +
    "\ufecd\074\ufecd\075\ufecd\076\ufecd\077\ufecd\100\ufecd\101\ufecd" +
    "\102\ufecd\001\002\000\004\073\315\001\002\000\052\004" +
    "\047\006\055\007\062\010\070\011\130\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\054\004\047\006\055\007\062\010\070\011" +
    "\204\012\076\020\101\021\067\022\037\036\063\037\064" +
    "\041\075\042\102\070\317\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\060\004\ufec0" +
    "\006\ufec0\007\ufec0\010\ufec0\011\ufec0\012\ufec0\020\ufec0\021" +
    "\ufec0\022\ufec0\026\ufec0\036\ufec0\037\ufec0\041\ufec0\042\ufec0" +
    "\043\ufec0\070\ufec0\074\ufec0\075\ufec0\076\ufec0\077\ufec0\100" +
    "\ufec0\101\ufec0\102\ufec0\001\002\000\004\067\321\001\002" +
    "\000\014\023\113\024\110\057\112\103\107\105\111\001" +
    "\002\000\020\023\113\024\110\043\324\057\165\070\323" +
    "\103\107\105\111\001\002\000\060\004\ufed1\006\ufed1\007" +
    "\ufed1\010\ufed1\011\ufed1\012\ufed1\020\ufed1\021\ufed1\022\ufed1" +
    "\026\ufed1\036\ufed1\037\ufed1\041\ufed1\042\ufed1\043\ufed1\070" +
    "\ufed1\074\ufed1\075\ufed1\076\ufed1\077\ufed1\100\ufed1\101\ufed1" +
    "\102\ufed1\001\002\000\004\073\325\001\002\000\052\004" +
    "\047\006\055\007\062\010\070\011\130\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\054\004\047\006\055\007\062\010\070\011" +
    "\204\012\076\020\101\021\067\022\037\036\063\037\064" +
    "\041\075\042\102\070\327\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\060\004\ufec4" +
    "\006\ufec4\007\ufec4\010\ufec4\011\ufec4\012\ufec4\020\ufec4\021" +
    "\ufec4\022\ufec4\026\ufec4\036\ufec4\037\ufec4\041\ufec4\042\ufec4" +
    "\043\ufec4\070\ufec4\074\ufec4\075\ufec4\076\ufec4\077\ufec4\100" +
    "\ufec4\101\ufec4\102\ufec4\001\002\000\014\023\113\024\110" +
    "\057\112\103\107\105\111\001\002\000\020\023\113\024" +
    "\110\043\333\057\165\070\332\103\107\105\111\001\002" +
    "\000\060\004\ufed3\006\ufed3\007\ufed3\010\ufed3\011\ufed3\012" +
    "\ufed3\020\ufed3\021\ufed3\022\ufed3\026\ufed3\036\ufed3\037\ufed3" +
    "\041\ufed3\042\ufed3\043\ufed3\070\ufed3\074\ufed3\075\ufed3\076" +
    "\ufed3\077\ufed3\100\ufed3\101\ufed3\102\ufed3\001\002\000\004" +
    "\073\334\001\002\000\052\004\047\006\055\007\062\010" +
    "\070\011\130\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\054\004\047" +
    "\006\055\007\062\010\070\011\204\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\070\336" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\060\004\ufec6\006\ufec6\007\ufec6\010\ufec6" +
    "\011\ufec6\012\ufec6\020\ufec6\021\ufec6\022\ufec6\026\ufec6\036" +
    "\ufec6\037\ufec6\041\ufec6\042\ufec6\043\ufec6\070\ufec6\074\ufec6" +
    "\075\ufec6\076\ufec6\077\ufec6\100\ufec6\101\ufec6\102\ufec6\001" +
    "\002\000\004\067\340\001\002\000\014\023\113\024\110" +
    "\057\112\103\107\105\111\001\002\000\020\023\113\024" +
    "\110\043\343\057\165\070\342\103\107\105\111\001\002" +
    "\000\060\004\ufece\006\ufece\007\ufece\010\ufece\011\ufece\012" +
    "\ufece\020\ufece\021\ufece\022\ufece\026\ufece\036\ufece\037\ufece" +
    "\041\ufece\042\ufece\043\ufece\070\ufece\074\ufece\075\ufece\076" +
    "\ufece\077\ufece\100\ufece\101\ufece\102\ufece\001\002\000\004" +
    "\073\344\001\002\000\052\004\047\006\055\007\062\010" +
    "\070\011\130\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\054\004\047" +
    "\006\055\007\062\010\070\011\204\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\070\346" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\060\004\ufec1\006\ufec1\007\ufec1\010\ufec1" +
    "\011\ufec1\012\ufec1\020\ufec1\021\ufec1\022\ufec1\026\ufec1\036" +
    "\ufec1\037\ufec1\041\ufec1\042\ufec1\043\ufec1\070\ufec1\074\ufec1" +
    "\075\ufec1\076\ufec1\077\ufec1\100\ufec1\101\ufec1\102\ufec1\001" +
    "\002\000\004\067\350\001\002\000\014\023\113\024\110" +
    "\057\112\103\107\105\111\001\002\000\020\023\113\024" +
    "\110\043\353\057\165\070\352\103\107\105\111\001\002" +
    "\000\060\004\ufed2\006\ufed2\007\ufed2\010\ufed2\011\ufed2\012" +
    "\ufed2\020\ufed2\021\ufed2\022\ufed2\026\ufed2\036\ufed2\037\ufed2" +
    "\041\ufed2\042\ufed2\043\ufed2\070\ufed2\074\ufed2\075\ufed2\076" +
    "\ufed2\077\ufed2\100\ufed2\101\ufed2\102\ufed2\001\002\000\004" +
    "\073\354\001\002\000\052\004\047\006\055\007\062\010" +
    "\070\011\130\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\054\004\047" +
    "\006\055\007\062\010\070\011\204\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\070\356" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\060\004\ufec5\006\ufec5\007\ufec5\010\ufec5" +
    "\011\ufec5\012\ufec5\020\ufec5\021\ufec5\022\ufec5\026\ufec5\036" +
    "\ufec5\037\ufec5\041\ufec5\042\ufec5\043\ufec5\070\ufec5\074\ufec5" +
    "\075\ufec5\076\ufec5\077\ufec5\100\ufec5\101\ufec5\102\ufec5\001" +
    "\002\000\004\067\360\001\002\000\014\023\113\024\110" +
    "\057\112\103\107\105\111\001\002\000\020\023\113\024" +
    "\110\043\363\057\165\070\362\103\107\105\111\001\002" +
    "\000\060\004\ufed0\006\ufed0\007\ufed0\010\ufed0\011\ufed0\012" +
    "\ufed0\020\ufed0\021\ufed0\022\ufed0\026\ufed0\036\ufed0\037\ufed0" +
    "\041\ufed0\042\ufed0\043\ufed0\070\ufed0\074\ufed0\075\ufed0\076" +
    "\ufed0\077\ufed0\100\ufed0\101\ufed0\102\ufed0\001\002\000\004" +
    "\073\364\001\002\000\052\004\047\006\055\007\062\010" +
    "\070\011\130\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\054\004\047" +
    "\006\055\007\062\010\070\011\204\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\070\366" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\060\004\ufec3\006\ufec3\007\ufec3\010\ufec3" +
    "\011\ufec3\012\ufec3\020\ufec3\021\ufec3\022\ufec3\026\ufec3\036" +
    "\ufec3\037\ufec3\041\ufec3\042\ufec3\043\ufec3\070\ufec3\074\ufec3" +
    "\075\ufec3\076\ufec3\077\ufec3\100\ufec3\101\ufec3\102\ufec3\001" +
    "\002\000\016\020\101\050\u0134\065\u012e\102\u0133\103\u0135" +
    "\105\u0136\001\002\000\016\023\113\024\110\057\112\067" +
    "\u0101\103\107\105\111\001\002\000\014\023\113\024\110" +
    "\057\112\103\107\105\111\001\002\000\020\023\113\024" +
    "\110\043\374\057\165\070\373\103\107\105\111\001\002" +
    "\000\060\004\ufed5\006\ufed5\007\ufed5\010\ufed5\011\ufed5\012" +
    "\ufed5\020\ufed5\021\ufed5\022\ufed5\026\ufed5\036\ufed5\037\ufed5" +
    "\041\ufed5\042\ufed5\043\ufed5\070\ufed5\074\ufed5\075\ufed5\076" +
    "\ufed5\077\ufed5\100\ufed5\101\ufed5\102\ufed5\001\002\000\004" +
    "\073\375\001\002\000\052\004\047\006\055\007\062\010" +
    "\070\011\130\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\054\004\047" +
    "\006\055\007\062\010\070\011\204\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\070\377" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\060\004\ufec8\006\ufec8\007\ufec8\010\ufec8" +
    "\011\ufec8\012\ufec8\020\ufec8\021\ufec8\022\ufec8\026\ufec8\036" +
    "\ufec8\037\ufec8\041\ufec8\042\ufec8\043\ufec8\070\ufec8\074\ufec8" +
    "\075\ufec8\076\ufec8\077\ufec8\100\ufec8\101\ufec8\102\ufec8\001" +
    "\002\000\020\023\113\024\110\043\u0129\057\165\070\u0128" +
    "\103\107\105\111\001\002\000\070\004\047\006\055\007" +
    "\062\010\070\011\061\012\076\020\101\021\067\022\037" +
    "\023\113\024\110\036\063\037\064\041\075\042\102\043" +
    "\u0103\057\112\070\u0102\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\102\074\103\107\105\111\001\002\000" +
    "\060\004\ufecb\006\ufecb\007\ufecb\010\ufecb\011\ufecb\012\ufecb" +
    "\020\ufecb\021\ufecb\022\ufecb\026\ufecb\036\ufecb\037\ufecb\041" +
    "\ufecb\042\ufecb\043\ufecb\070\ufecb\074\ufecb\075\ufecb\076\ufecb" +
    "\077\ufecb\100\ufecb\101\ufecb\102\ufecb\001\002\000\004\073" +
    "\u0125\001\002\000\022\023\113\024\110\043\u011b\057\165" +
    "\070\u011c\073\u011a\103\107\105\111\001\002\000\056\004" +
    "\047\006\055\007\062\010\070\011\u0110\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\043" +
    "\u010c\070\u0109\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\102\074\001\002\000\056\004\uff8a\006\uff8a\007" +
    "\uff8a\010\uff8a\011\uff8a\012\uff8a\020\uff8a\021\uff8a\022\uff8a" +
    "\036\uff8a\037\uff8a\041\uff8a\042\uff8a\043\uff8a\070\uff8a\074" +
    "\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a" +
    "\001\002\000\056\004\uff8c\006\uff8c\007\uff8c\010\uff8c\011" +
    "\uff8c\012\uff8c\020\uff8c\021\uff8c\022\uff8c\036\uff8c\037\uff8c" +
    "\041\uff8c\042\uff8c\043\uff8c\070\uff8c\074\uff8c\075\uff8c\076" +
    "\uff8c\077\uff8c\100\uff8c\101\uff8c\102\uff8c\001\002\000\056" +
    "\004\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\020" +
    "\uff88\021\uff88\022\uff88\036\uff88\037\uff88\041\uff88\042\uff88" +
    "\043\uff88\070\uff88\074\uff88\075\uff88\076\uff88\077\uff88\100" +
    "\uff88\101\uff88\102\uff88\001\002\000\060\004\ufeca\006\ufeca" +
    "\007\ufeca\010\ufeca\011\ufeca\012\ufeca\020\ufeca\021\ufeca\022" +
    "\ufeca\026\ufeca\036\ufeca\037\ufeca\041\ufeca\042\ufeca\043\ufeca" +
    "\070\ufeca\074\ufeca\075\ufeca\076\ufeca\077\ufeca\100\ufeca\101" +
    "\ufeca\102\ufeca\001\002\000\056\004\uff8e\006\uff8e\007\uff8e" +
    "\010\uff8e\011\uff8e\012\uff8e\020\uff8e\021\uff8e\022\uff8e\036" +
    "\uff8e\037\uff8e\041\uff8e\042\uff8e\043\uff8e\070\uff8e\074\uff8e" +
    "\075\uff8e\076\uff8e\077\uff8e\100\uff8e\101\uff8e\102\uff8e\001" +
    "\002\000\056\004\uff98\006\uff98\007\uff98\010\uff98\011\uff98" +
    "\012\uff98\020\uff98\021\uff98\022\uff98\036\uff98\037\uff98\041" +
    "\uff98\042\uff98\043\uff98\070\uff98\074\uff98\075\uff98\076\uff98" +
    "\077\uff98\100\uff98\101\uff98\102\uff98\001\002\000\004\073" +
    "\u0117\001\002\000\056\004\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\020\uffa0\021\uffa0\022\uffa0\036\uffa0\037" +
    "\uffa0\041\uffa0\042\uffa0\043\uffa0\070\uffa0\074\uffa0\075\uffa0" +
    "\076\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\001\002\000" +
    "\056\004\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e" +
    "\020\uff9e\021\uff9e\022\uff9e\036\uff9e\037\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\070\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e" +
    "\100\uff9e\101\uff9e\102\uff9e\001\002\000\056\004\uff9c\006" +
    "\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c\020\uff9c\021\uff9c" +
    "\022\uff9c\036\uff9c\037\uff9c\041\uff9c\042\uff9c\043\uff9c\070" +
    "\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c" +
    "\102\uff9c\001\002\000\056\004\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\020\uff9a\021\uff9a\022\uff9a\036\uff9a" +
    "\037\uff9a\041\uff9a\042\uff9a\043\uff9a\070\uff9a\074\uff9a\075" +
    "\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\001\002" +
    "\000\056\004\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012" +
    "\uff96\020\uff96\021\uff96\022\uff96\036\uff96\037\uff96\041\uff96" +
    "\042\uff96\043\uff96\070\uff96\074\uff96\075\uff96\076\uff96\077" +
    "\uff96\100\uff96\101\uff96\102\uff96\001\002\000\056\004\uffa2" +
    "\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\036\uffa2\037\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\070\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\101" +
    "\uffa2\102\uffa2\001\002\000\056\004\uff92\006\uff92\007\uff92" +
    "\010\uff92\011\uff92\012\uff92\020\uff92\021\uff92\022\uff92\036" +
    "\uff92\037\uff92\041\uff92\042\uff92\043\uff92\070\uff92\074\uff92" +
    "\075\uff92\076\uff92\077\uff92\100\uff92\101\uff92\102\uff92\001" +
    "\002\000\056\004\uff94\006\uff94\007\uff94\010\uff94\011\uff94" +
    "\012\uff94\020\uff94\021\uff94\022\uff94\036\uff94\037\uff94\041" +
    "\uff94\042\uff94\043\uff94\070\uff94\074\uff94\075\uff94\076\uff94" +
    "\077\uff94\100\uff94\101\uff94\102\uff94\001\002\000\056\004" +
    "\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\020\uff90" +
    "\021\uff90\022\uff90\036\uff90\037\uff90\041\uff90\042\uff90\043" +
    "\uff90\070\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90" +
    "\101\uff90\102\uff90\001\002\000\056\004\uff86\006\uff86\007" +
    "\uff86\010\uff86\011\uff86\012\uff86\020\uff86\021\uff86\022\uff86" +
    "\036\uff86\037\uff86\041\uff86\042\uff86\043\uff86\070\uff86\074" +
    "\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101\uff86\102\uff86" +
    "\001\002\000\052\004\047\006\055\007\062\010\070\011" +
    "\130\012\076\020\101\021\067\022\037\036\063\037\064" +
    "\041\075\042\102\074\011\075\016\076\007\077\020\100" +
    "\013\101\022\102\074\001\002\000\054\004\047\006\055" +
    "\007\062\010\070\011\204\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\070\u0119\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\060\004\ufebd\006\ufebd\007\ufebd\010\ufebd\011\ufebd" +
    "\012\ufebd\020\ufebd\021\ufebd\022\ufebd\026\ufebd\036\ufebd\037" +
    "\ufebd\041\ufebd\042\ufebd\043\ufebd\070\ufebd\074\ufebd\075\ufebd" +
    "\076\ufebd\077\ufebd\100\ufebd\101\ufebd\102\ufebd\001\002\000" +
    "\052\004\047\006\055\007\062\010\070\011\130\012\076" +
    "\020\101\021\067\022\037\036\063\037\064\041\075\042" +
    "\102\074\011\075\016\076\007\077\020\100\013\101\022" +
    "\102\074\001\002\000\054\004\047\006\055\007\062\010" +
    "\070\011\130\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\073\u011d\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\074\001\002\000\060" +
    "\004\ufed8\006\ufed8\007\ufed8\010\ufed8\011\ufed8\012\ufed8\020" +
    "\ufed8\021\ufed8\022\ufed8\026\ufed8\036\ufed8\037\ufed8\041\ufed8" +
    "\042\ufed8\043\ufed8\070\ufed8\074\ufed8\075\ufed8\076\ufed8\077" +
    "\ufed8\100\ufed8\101\ufed8\102\ufed8\001\002\000\054\004\047" +
    "\006\055\007\062\010\070\011\130\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\070\u0120" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\054\004\047\006\055\007\062\010\070" +
    "\011\204\012\076\020\101\021\067\022\037\036\063\037" +
    "\064\041\075\042\102\070\u011f\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\102\074\001\002\000\060\004" +
    "\ufebb\006\ufebb\007\ufebb\010\ufebb\011\ufebb\012\ufebb\020\ufebb" +
    "\021\ufebb\022\ufebb\026\ufebb\036\ufebb\037\ufebb\041\ufebb\042" +
    "\ufebb\043\ufebb\070\ufebb\074\ufebb\075\ufebb\076\ufebb\077\ufebb" +
    "\100\ufebb\101\ufebb\102\ufebb\001\002\000\060\004\ufebc\006" +
    "\ufebc\007\ufebc\010\ufebc\011\ufebc\012\ufebc\020\ufebc\021\ufebc" +
    "\022\ufebc\026\ufebc\036\ufebc\037\ufebc\041\ufebc\042\ufebc\043" +
    "\ufebc\070\ufebc\074\ufebc\075\ufebc\076\ufebc\077\ufebc\100\ufebc" +
    "\101\ufebc\102\ufebc\001\002\000\054\004\047\006\055\007" +
    "\062\010\070\011\204\012\076\020\101\021\067\022\037" +
    "\036\063\037\064\041\075\042\102\070\u0122\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\074\001\002" +
    "\000\060\004\ufed7\006\ufed7\007\ufed7\010\ufed7\011\ufed7\012" +
    "\ufed7\020\ufed7\021\ufed7\022\ufed7\026\ufed7\036\ufed7\037\ufed7" +
    "\041\ufed7\042\ufed7\043\ufed7\070\ufed7\074\ufed7\075\ufed7\076" +
    "\ufed7\077\ufed7\100\ufed7\101\ufed7\102\ufed7\001\002\000\054" +
    "\004\047\006\055\007\062\010\070\011\204\012\076\020" +
    "\101\021\067\022\037\036\063\037\064\041\075\042\102" +
    "\070\u0124\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\060\004\ufeba\006\ufeba\007\ufeba" +
    "\010\ufeba\011\ufeba\012\ufeba\020\ufeba\021\ufeba\022\ufeba\026" +
    "\ufeba\036\ufeba\037\ufeba\041\ufeba\042\ufeba\043\ufeba\070\ufeba" +
    "\074\ufeba\075\ufeba\076\ufeba\077\ufeba\100\ufeba\101\ufeba\102" +
    "\ufeba\001\002\000\052\004\047\006\055\007\062\010\070" +
    "\011\130\012\076\020\101\021\067\022\037\036\063\037" +
    "\064\041\075\042\102\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\102\074\001\002\000\054\004\047\006" +
    "\055\007\062\010\070\011\204\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\070\u0127\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\060\004\ufebe\006\ufebe\007\ufebe\010\ufebe\011" +
    "\ufebe\012\ufebe\020\ufebe\021\ufebe\022\ufebe\026\ufebe\036\ufebe" +
    "\037\ufebe\041\ufebe\042\ufebe\043\ufebe\070\ufebe\074\ufebe\075" +
    "\ufebe\076\ufebe\077\ufebe\100\ufebe\101\ufebe\102\ufebe\001\002" +
    "\000\060\004\ufecc\006\ufecc\007\ufecc\010\ufecc\011\ufecc\012" +
    "\ufecc\020\ufecc\021\ufecc\022\ufecc\026\ufecc\036\ufecc\037\ufecc" +
    "\041\ufecc\042\ufecc\043\ufecc\070\ufecc\074\ufecc\075\ufecc\076" +
    "\ufecc\077\ufecc\100\ufecc\101\ufecc\102\ufecc\001\002\000\004" +
    "\073\u012a\001\002\000\052\004\047\006\055\007\062\010" +
    "\070\011\130\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\054\004\047" +
    "\006\055\007\062\010\070\011\204\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\070\u012c" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\060\004\ufebf\006\ufebf\007\ufebf\010\ufebf" +
    "\011\ufebf\012\ufebf\020\ufebf\021\ufebf\022\ufebf\026\ufebf\036" +
    "\ufebf\037\ufebf\041\ufebf\042\ufebf\043\ufebf\070\ufebf\074\ufebf" +
    "\075\ufebf\076\ufebf\077\ufebf\100\ufebf\101\ufebf\102\ufebf\001" +
    "\002\000\016\047\ufe86\050\ufe86\051\ufe86\052\ufe86\064\ufe86" +
    "\066\ufe86\001\002\000\014\050\u0134\065\u012e\102\u0133\103" +
    "\u0135\105\u0136\001\002\000\016\047\ufe8a\050\ufe8a\051\u013d" +
    "\052\u013c\064\ufe8a\066\ufe8a\001\002\000\062\004\ufe8d\006" +
    "\ufe8d\007\ufe8d\010\ufe8d\011\ufe8d\012\ufe8d\020\ufe8d\021\ufe8d" +
    "\022\ufe8d\026\ufe8d\036\ufe8d\037\ufe8d\041\ufe8d\042\ufe8d\043" +
    "\ufe8d\066\ufe8d\070\ufe8d\074\ufe8d\075\ufe8d\076\ufe8d\077\ufe8d" +
    "\100\ufe8d\101\ufe8d\102\ufe8d\001\002\000\010\047\u0139\050" +
    "\u013a\064\u0138\001\002\000\016\047\ufe87\050\ufe87\051\ufe87" +
    "\052\ufe87\064\ufe87\066\ufe87\001\002\000\114\004\ufee9\006" +
    "\ufee9\007\ufee9\010\ufee9\011\ufee9\012\ufee9\020\ufee9\021\ufee9" +
    "\022\ufee9\026\ufee9\030\ufee9\031\ufee9\034\ufee9\035\ufee9\036" +
    "\ufee9\037\ufee9\040\ufee9\041\ufee9\042\ufee9\043\ufee9\045\ufee9" +
    "\047\ufee9\050\ufee9\051\ufee9\052\ufee9\064\ufee9\066\ufee9\067" +
    "\ufee9\070\ufee9\074\ufee9\075\ufee9\076\ufee9\077\ufee9\100\ufee9" +
    "\101\ufee9\102\ufee9\104\ufee9\001\002\000\014\050\u0134\065" +
    "\u012e\102\u0133\103\u0135\105\u0136\001\002\000\114\004\ufeea" +
    "\006\ufeea\007\ufeea\010\ufeea\011\ufeea\012\ufeea\020\ufeea\021" +
    "\ufeea\022\ufeea\026\ufeea\030\ufeea\031\ufeea\034\ufeea\035\ufeea" +
    "\036\ufeea\037\ufeea\040\ufeea\041\ufeea\042\ufeea\043\ufeea\045" +
    "\ufeea\047\ufeea\050\ufeea\051\ufeea\052\ufeea\064\ufeea\066\ufeea" +
    "\067\ufeea\070\ufeea\074\ufeea\075\ufeea\076\ufeea\077\ufeea\100" +
    "\ufeea\101\ufeea\102\ufeea\104\ufeea\001\002\000\114\004\ufee8" +
    "\006\ufee8\007\ufee8\010\ufee8\011\ufee8\012\ufee8\020\ufee8\021" +
    "\ufee8\022\ufee8\026\ufee8\030\ufee8\031\ufee8\034\ufee8\035\ufee8" +
    "\036\ufee8\037\ufee8\040\ufee8\041\ufee8\042\ufee8\043\ufee8\045" +
    "\ufee8\047\ufee8\050\ufee8\051\ufee8\052\ufee8\064\ufee8\066\ufee8" +
    "\067\ufee8\070\ufee8\074\ufee8\075\ufee8\076\ufee8\077\ufee8\100" +
    "\ufee8\101\ufee8\102\ufee8\104\ufee8\001\002\000\016\047\ufe84" +
    "\050\ufe84\051\ufe84\052\ufe84\064\ufe84\066\ufe84\001\002\000" +
    "\062\004\ufe8e\006\ufe8e\007\ufe8e\010\ufe8e\011\ufe8e\012\ufe8e" +
    "\020\ufe8e\021\ufe8e\022\ufe8e\026\ufe8e\036\ufe8e\037\ufe8e\041" +
    "\ufe8e\042\ufe8e\043\ufe8e\066\ufe8e\070\ufe8e\074\ufe8e\075\ufe8e" +
    "\076\ufe8e\077\ufe8e\100\ufe8e\101\ufe8e\102\ufe8e\001\002\000" +
    "\014\050\u0134\065\u012e\102\u0133\103\u0135\105\u0136\001\002" +
    "\000\014\050\u0134\065\u012e\102\u0133\103\u0135\105\u0136\001" +
    "\002\000\016\047\ufe8b\050\ufe8b\051\u013d\052\u013c\064\ufe8b" +
    "\066\ufe8b\001\002\000\014\050\u0134\065\u012e\102\u0133\103" +
    "\u0135\105\u0136\001\002\000\014\050\u0134\065\u012e\102\u0133" +
    "\103\u0135\105\u0136\001\002\000\016\047\ufe89\050\ufe89\051" +
    "\ufe89\052\ufe89\064\ufe89\066\ufe89\001\002\000\016\047\ufe88" +
    "\050\ufe88\051\ufe88\052\ufe88\064\ufe88\066\ufe88\001\002\000" +
    "\016\047\ufe8c\050\ufe8c\051\u013d\052\u013c\064\ufe8c\066\ufe8c" +
    "\001\002\000\010\047\u0139\050\u013a\066\u0142\001\002\000" +
    "\016\047\ufe85\050\ufe85\051\ufe85\052\ufe85\064\ufe85\066\ufe85" +
    "\001\002\000\004\067\u0144\001\002\000\014\023\113\024" +
    "\110\057\112\103\107\105\111\001\002\000\020\023\113" +
    "\024\110\043\u0147\057\165\070\u0146\103\107\105\111\001" +
    "\002\000\060\004\ufecf\006\ufecf\007\ufecf\010\ufecf\011\ufecf" +
    "\012\ufecf\020\ufecf\021\ufecf\022\ufecf\026\ufecf\036\ufecf\037" +
    "\ufecf\041\ufecf\042\ufecf\043\ufecf\070\ufecf\074\ufecf\075\ufecf" +
    "\076\ufecf\077\ufecf\100\ufecf\101\ufecf\102\ufecf\001\002\000" +
    "\004\073\u0148\001\002\000\052\004\047\006\055\007\062" +
    "\010\070\011\130\012\076\020\101\021\067\022\037\036" +
    "\063\037\064\041\075\042\102\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\102\074\001\002\000\054\004" +
    "\047\006\055\007\062\010\070\011\204\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\070" +
    "\u014a\074\011\075\016\076\007\077\020\100\013\101\022" +
    "\102\074\001\002\000\060\004\ufec2\006\ufec2\007\ufec2\010" +
    "\ufec2\011\ufec2\012\ufec2\020\ufec2\021\ufec2\022\ufec2\026\ufec2" +
    "\036\ufec2\037\ufec2\041\ufec2\042\ufec2\043\ufec2\070\ufec2\074" +
    "\ufec2\075\ufec2\076\ufec2\077\ufec2\100\ufec2\101\ufec2\102\ufec2" +
    "\001\002\000\130\004\ufee7\006\ufee7\007\ufee7\010\ufee7\011" +
    "\ufee7\012\ufee7\020\ufee7\021\ufee7\022\ufee7\023\ufee7\024\ufee7" +
    "\026\ufee7\032\ufee7\036\ufee7\037\ufee7\041\ufee7\042\ufee7\043" +
    "\ufee7\046\ufee7\053\ufee7\054\ufee7\055\ufee7\056\ufee7\057\ufee7" +
    "\060\ufee7\061\ufee7\062\ufee7\063\ufee7\064\ufee7\065\ufee7\066" +
    "\ufee7\067\ufee7\070\ufee7\074\ufee7\075\ufee7\076\ufee7\077\ufee7" +
    "\100\ufee7\101\ufee7\102\ufee7\103\ufee7\104\ufee7\105\ufee7\001" +
    "\002\000\010\066\u0152\102\u014f\103\u014b\001\002\000\062" +
    "\004\ufe78\006\ufe78\007\ufe78\010\ufe78\011\ufe78\012\ufe78\020" +
    "\ufe78\021\ufe78\022\ufe78\026\ufe78\036\ufe78\037\ufe78\041\ufe78" +
    "\042\ufe78\043\ufe78\066\ufe78\070\ufe78\074\ufe78\075\ufe78\076" +
    "\ufe78\077\ufe78\100\ufe78\101\ufe78\102\ufe78\001\002\000\004" +
    "\066\u0150\001\002\000\054\023\ufee6\024\ufee6\032\ufee6\046" +
    "\ufee6\053\ufee6\054\ufee6\055\ufee6\056\ufee6\057\ufee6\060\ufee6" +
    "\061\ufee6\062\ufee6\063\ufee6\064\ufee6\065\ufee6\066\ufee6\067" +
    "\ufee6\102\ufee6\103\ufee6\104\ufee6\105\ufee6\001\002\000\004" +
    "\064\u0151\001\002\000\062\004\ufe79\006\ufe79\007\ufe79\010" +
    "\ufe79\011\ufe79\012\ufe79\020\ufe79\021\ufe79\022\ufe79\026\ufe79" +
    "\036\ufe79\037\ufe79\041\ufe79\042\ufe79\043\ufe79\066\ufe79\070" +
    "\ufe79\074\ufe79\075\ufe79\076\ufe79\077\ufe79\100\ufe79\101\ufe79" +
    "\102\ufe79\001\002\000\004\064\u0157\001\002\000\006\064" +
    "\u0155\066\u0154\001\002\000\064\004\ufe7c\006\ufe7c\007\ufe7c" +
    "\010\ufe7c\011\ufe7c\012\ufe7c\020\ufe7c\021\ufe7c\022\ufe7c\026" +
    "\ufe7c\036\ufe7c\037\ufe7c\041\ufe7c\042\ufe7c\043\ufe7c\064\u0156" +
    "\066\ufe7c\070\ufe7c\074\ufe7c\075\ufe7c\076\ufe7c\077\ufe7c\100" +
    "\ufe7c\101\ufe7c\102\ufe7c\001\002\000\062\004\ufe7b\006\ufe7b" +
    "\007\ufe7b\010\ufe7b\011\ufe7b\012\ufe7b\020\ufe7b\021\ufe7b\022" +
    "\ufe7b\026\ufe7b\036\ufe7b\037\ufe7b\041\ufe7b\042\ufe7b\043\ufe7b" +
    "\066\ufe7b\070\ufe7b\074\ufe7b\075\ufe7b\076\ufe7b\077\ufe7b\100" +
    "\ufe7b\101\ufe7b\102\ufe7b\001\002\000\062\004\ufe7d\006\ufe7d" +
    "\007\ufe7d\010\ufe7d\011\ufe7d\012\ufe7d\020\ufe7d\021\ufe7d\022" +
    "\ufe7d\026\ufe7d\036\ufe7d\037\ufe7d\041\ufe7d\042\ufe7d\043\ufe7d" +
    "\066\ufe7d\070\ufe7d\074\ufe7d\075\ufe7d\076\ufe7d\077\ufe7d\100" +
    "\ufe7d\101\ufe7d\102\ufe7d\001\002\000\062\004\ufe7a\006\ufe7a" +
    "\007\ufe7a\010\ufe7a\011\ufe7a\012\ufe7a\020\ufe7a\021\ufe7a\022" +
    "\ufe7a\026\ufe7a\036\ufe7a\037\ufe7a\041\ufe7a\042\ufe7a\043\ufe7a" +
    "\066\ufe7a\070\ufe7a\074\ufe7a\075\ufe7a\076\ufe7a\077\ufe7a\100" +
    "\ufe7a\101\ufe7a\102\ufe7a\001\002\000\060\004\uffda\006\uffda" +
    "\007\uffda\010\uffda\011\uffda\012\uffda\020\uffda\021\uffda\022" +
    "\uffda\026\uffda\036\uffda\037\uffda\041\uffda\042\uffda\043\uffda" +
    "\070\uffda\074\uffda\075\uffda\076\uffda\077\uffda\100\uffda\101" +
    "\uffda\102\uffda\001\002\000\060\004\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\020\uffdc\021\uffdc\022\uffdc\026" +
    "\uffdc\036\uffdc\037\uffdc\041\uffdc\042\uffdc\043\uffdc\070\uffdc" +
    "\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102" +
    "\uffdc\001\002\000\062\004\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\020\uffdb\021\uffdb\022\uffdb\026\uffdb\036" +
    "\uffdb\037\uffdb\041\uffdb\042\uffdb\043\uffdb\064\u015b\070\uffdb" +
    "\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102" +
    "\uffdb\001\002\000\060\004\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\020\uffdd\021\uffdd\022\uffdd\026\uffdd\036" +
    "\uffdd\037\uffdd\041\uffdd\042\uffdd\043\uffdd\070\uffdd\074\uffdd" +
    "\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd\001" +
    "\002\000\010\066\u0168\102\u016b\103\u014b\001\002\000\010" +
    "\064\u0162\102\u014f\103\u014b\001\002\000\060\004\ufe58\006" +
    "\ufe58\007\ufe58\010\ufe58\011\ufe58\012\ufe58\020\ufe58\021\ufe58" +
    "\022\ufe58\026\ufe58\036\ufe58\037\ufe58\041\ufe58\042\ufe58\043" +
    "\ufe58\070\ufe58\074\ufe58\075\ufe58\076\ufe58\077\ufe58\100\ufe58" +
    "\101\ufe58\102\ufe58\001\002\000\004\066\u0160\001\002\000" +
    "\004\064\u0161\001\002\000\060\004\ufe5a\006\ufe5a\007\ufe5a" +
    "\010\ufe5a\011\ufe5a\012\ufe5a\020\ufe5a\021\ufe5a\022\ufe5a\026" +
    "\ufe5a\036\ufe5a\037\ufe5a\041\ufe5a\042\ufe5a\043\ufe5a\070\ufe5a" +
    "\074\ufe5a\075\ufe5a\076\ufe5a\077\ufe5a\100\ufe5a\101\ufe5a\102" +
    "\ufe5a\001\002\000\060\004\ufe59\006\ufe59\007\ufe59\010\ufe59" +
    "\011\ufe59\012\ufe59\020\ufe59\021\ufe59\022\ufe59\026\ufe59\036" +
    "\ufe59\037\ufe59\041\ufe59\042\ufe59\043\ufe59\070\ufe59\074\ufe59" +
    "\075\ufe59\076\ufe59\077\ufe59\100\ufe59\101\ufe59\102\ufe59\001" +
    "\002\000\006\065\u0165\066\u0164\001\002\000\004\064\u0167" +
    "\001\002\000\004\064\u0166\001\002\000\060\004\ufe55\006" +
    "\ufe55\007\ufe55\010\ufe55\011\ufe55\012\ufe55\020\ufe55\021\ufe55" +
    "\022\ufe55\026\ufe55\036\ufe55\037\ufe55\041\ufe55\042\ufe55\043" +
    "\ufe55\070\ufe55\074\ufe55\075\ufe55\076\ufe55\077\ufe55\100\ufe55" +
    "\101\ufe55\102\ufe55\001\002\000\060\004\ufe54\006\ufe54\007" +
    "\ufe54\010\ufe54\011\ufe54\012\ufe54\020\ufe54\021\ufe54\022\ufe54" +
    "\026\ufe54\036\ufe54\037\ufe54\041\ufe54\042\ufe54\043\ufe54\070" +
    "\ufe54\074\ufe54\075\ufe54\076\ufe54\077\ufe54\100\ufe54\101\ufe54" +
    "\102\ufe54\001\002\000\062\004\ufe57\006\ufe57\007\ufe57\010" +
    "\ufe57\011\ufe57\012\ufe57\020\ufe57\021\ufe57\022\ufe57\026\ufe57" +
    "\036\ufe57\037\ufe57\041\ufe57\042\ufe57\043\ufe57\064\u0173\070" +
    "\ufe57\074\ufe57\075\ufe57\076\ufe57\077\ufe57\100\ufe57\101\ufe57" +
    "\102\ufe57\001\002\000\066\004\ufe56\006\ufe56\007\ufe56\010" +
    "\ufe56\011\ufe56\012\ufe56\020\ufe56\021\ufe56\022\ufe56\026\ufe56" +
    "\036\ufe56\037\ufe56\041\ufe56\042\ufe56\043\ufe56\064\u0170\065" +
    "\u016f\066\u016e\070\ufe56\074\ufe56\075\ufe56\076\ufe56\077\ufe56" +
    "\100\ufe56\101\ufe56\102\ufe56\001\002\000\004\066\u016c\001" +
    "\002\000\070\004\ufee6\006\ufee6\007\ufee6\010\ufee6\011\ufee6" +
    "\012\ufee6\020\ufee6\021\ufee6\022\ufee6\026\ufee6\036\ufee6\037" +
    "\ufee6\041\ufee6\042\ufee6\043\ufee6\046\367\064\ufee6\065\ufee6" +
    "\066\ufee6\070\ufee6\074\ufee6\075\ufee6\076\ufee6\077\ufee6\100" +
    "\ufee6\101\ufee6\102\ufee6\001\002\000\004\064\u016d\001\002" +
    "\000\060\004\ufe5e\006\ufe5e\007\ufe5e\010\ufe5e\011\ufe5e\012" +
    "\ufe5e\020\ufe5e\021\ufe5e\022\ufe5e\026\ufe5e\036\ufe5e\037\ufe5e" +
    "\041\ufe5e\042\ufe5e\043\ufe5e\070\ufe5e\074\ufe5e\075\ufe5e\076" +
    "\ufe5e\077\ufe5e\100\ufe5e\101\ufe5e\102\ufe5e\001\002\000\062" +
    "\004\ufe5d\006\ufe5d\007\ufe5d\010\ufe5d\011\ufe5d\012\ufe5d\020" +
    "\ufe5d\021\ufe5d\022\ufe5d\026\ufe5d\036\ufe5d\037\ufe5d\041\ufe5d" +
    "\042\ufe5d\043\ufe5d\064\u0172\070\ufe5d\074\ufe5d\075\ufe5d\076" +
    "\ufe5d\077\ufe5d\100\ufe5d\101\ufe5d\102\ufe5d\001\002\000\004" +
    "\064\u0171\001\002\000\060\004\ufe5c\006\ufe5c\007\ufe5c\010" +
    "\ufe5c\011\ufe5c\012\ufe5c\020\ufe5c\021\ufe5c\022\ufe5c\026\ufe5c" +
    "\036\ufe5c\037\ufe5c\041\ufe5c\042\ufe5c\043\ufe5c\070\ufe5c\074" +
    "\ufe5c\075\ufe5c\076\ufe5c\077\ufe5c\100\ufe5c\101\ufe5c\102\ufe5c" +
    "\001\002\000\060\004\ufe53\006\ufe53\007\ufe53\010\ufe53\011" +
    "\ufe53\012\ufe53\020\ufe53\021\ufe53\022\ufe53\026\ufe53\036\ufe53" +
    "\037\ufe53\041\ufe53\042\ufe53\043\ufe53\070\ufe53\074\ufe53\075" +
    "\ufe53\076\ufe53\077\ufe53\100\ufe53\101\ufe53\102\ufe53\001\002" +
    "\000\060\004\ufe5f\006\ufe5f\007\ufe5f\010\ufe5f\011\ufe5f\012" +
    "\ufe5f\020\ufe5f\021\ufe5f\022\ufe5f\026\ufe5f\036\ufe5f\037\ufe5f" +
    "\041\ufe5f\042\ufe5f\043\ufe5f\070\ufe5f\074\ufe5f\075\ufe5f\076" +
    "\ufe5f\077\ufe5f\100\ufe5f\101\ufe5f\102\ufe5f\001\002\000\060" +
    "\004\ufe5b\006\ufe5b\007\ufe5b\010\ufe5b\011\ufe5b\012\ufe5b\020" +
    "\ufe5b\021\ufe5b\022\ufe5b\026\ufe5b\036\ufe5b\037\ufe5b\041\ufe5b" +
    "\042\ufe5b\043\ufe5b\070\ufe5b\074\ufe5b\075\ufe5b\076\ufe5b\077" +
    "\ufe5b\100\ufe5b\101\ufe5b\102\ufe5b\001\002\000\032\002\uffdf" +
    "\003\uffdf\013\uffdf\025\uffdf\033\uffdf\074\uffdf\075\uffdf\076" +
    "\uffdf\077\uffdf\100\uffdf\101\uffdf\102\uffdf\001\002\000\006" +
    "\046\ufe3c\102\ufe3c\001\002\000\022\064\u01c7\074\u0178\075" +
    "\u017b\076\u017a\077\u0175\100\u0179\101\u017c\102\u01c9\001\002" +
    "\000\004\102\u017d\001\002\000\006\046\ufe3b\102\ufe3b\001" +
    "\002\000\006\046\ufe39\102\ufe39\001\002\000\006\046\ufe3d" +
    "\102\ufe3d\001\002\000\006\046\ufe3e\102\ufe3e\001\002\000" +
    "\006\046\ufe3a\102\ufe3a\001\002\000\004\046\u017e\001\002" +
    "\000\006\102\u014f\103\u014b\001\002\000\004\064\u0180\001" +
    "\002\000\046\023\u0183\024\u0189\032\u0191\046\u018d\053\u018b" +
    "\054\u0192\055\u018a\056\u0193\057\u018e\060\u0186\061\u0185\062" +
    "\u018f\063\u0188\065\u0181\102\u014f\103\u014b\104\u0184\105\u0187" +
    "\001\002\000\046\023\u0183\024\u0189\032\u0191\046\u018d\053" +
    "\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060\u0186\061\u0185" +
    "\062\u018f\063\u0188\065\u0181\102\u014f\103\u014b\104\u0184\105" +
    "\u0187\001\002\000\042\032\u0191\046\u018d\053\u018b\054\u0192" +
    "\055\u018a\057\u018e\060\u0186\061\u0185\062\u018f\063\u0188\064" +
    "\uff28\066\uff28\067\uff28\102\u014f\103\u014b\104\u0184\001\002" +
    "\000\054\023\u0183\024\u0189\032\u0191\046\u018d\053\u018b\054" +
    "\u0192\055\u018a\056\u0193\057\u018e\060\u0186\061\u0185\062\u018f" +
    "\063\u0188\064\uff26\065\u0181\066\uff26\067\uff26\102\u014f\103" +
    "\u014b\104\u0184\105\u0187\001\002\000\054\023\uff11\024\uff11" +
    "\032\uff11\046\uff11\053\uff11\054\uff11\055\uff11\056\uff11\057" +
    "\uff11\060\uff11\061\uff11\062\uff11\063\uff11\064\uff11\065\uff11" +
    "\066\uff11\067\uff11\102\uff11\103\uff11\104\uff11\105\uff11\001" +
    "\002\000\054\023\uff13\024\uff13\032\uff13\046\uff13\053\uff13" +
    "\054\uff13\055\uff13\056\uff13\057\uff13\060\uff13\061\uff13\062" +
    "\uff13\063\uff13\064\uff13\065\uff13\066\uff13\067\uff13\102\uff13" +
    "\103\uff13\104\uff13\105\uff13\001\002\000\054\023\uff14\024" +
    "\uff14\032\uff14\046\uff14\053\uff14\054\uff14\055\uff14\056\uff14" +
    "\057\uff14\060\uff14\061\uff14\062\uff14\063\uff14\064\uff14\065" +
    "\uff14\066\uff14\067\uff14\102\uff14\103\uff14\104\uff14\105\uff14" +
    "\001\002\000\036\032\u0191\046\u018d\053\u018b\054\u0192\055" +
    "\u018a\057\u018e\060\u0186\061\u0185\062\u018f\063\u0188\064\uff1d" +
    "\066\uff1d\067\uff1d\104\u0184\001\002\000\054\023\uff17\024" +
    "\uff17\032\uff17\046\uff17\053\uff17\054\uff17\055\uff17\056\uff17" +
    "\057\uff17\060\uff17\061\uff17\062\uff17\063\uff17\064\uff17\065" +
    "\uff17\066\uff17\067\uff17\102\uff17\103\uff17\104\uff17\105\uff17" +
    "\001\002\000\054\023\u0183\024\u0189\032\u0191\046\u018d\053" +
    "\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060\u0186\061\u0185" +
    "\062\u018f\063\u0188\064\uff27\065\u0181\066\uff27\067\uff27\102" +
    "\u014f\103\u014b\104\u0184\105\u0187\001\002\000\054\023\uff1a" +
    "\024\uff1a\032\uff1a\046\uff1a\053\uff1a\054\uff1a\055\uff1a\056" +
    "\uff1a\057\uff1a\060\uff1a\061\uff1a\062\uff1a\063\uff1a\064\uff1a" +
    "\065\uff1a\066\uff1a\067\uff1a\102\uff1a\103\uff1a\104\uff1a\105" +
    "\uff1a\001\002\000\054\023\uff19\024\uff19\032\uff19\046\uff19" +
    "\053\uff19\054\uff19\055\uff19\056\uff19\057\uff19\060\uff19\061" +
    "\uff19\062\uff19\063\uff19\064\uff19\065\uff19\066\uff19\067\uff19" +
    "\102\uff19\103\uff19\104\uff19\105\uff19\001\002\000\014\064" +
    "\uff20\066\uff20\067\uff20\102\u014f\103\u014b\001\002\000\054" +
    "\023\uff10\024\uff10\032\uff10\046\uff10\053\uff10\054\uff10\055" +
    "\uff10\056\uff10\057\uff10\060\uff10\061\uff10\062\uff10\063\uff10" +
    "\064\uff10\065\uff10\066\uff10\067\uff10\102\uff10\103\uff10\104" +
    "\uff10\105\uff10\001\002\000\054\023\uff12\024\uff12\032\uff12" +
    "\046\uff12\053\uff12\054\uff12\055\uff12\056\uff12\057\uff12\060" +
    "\uff12\061\uff12\062\uff12\063\uff12\064\uff12\065\uff12\066\uff12" +
    "\067\uff12\102\uff12\103\uff12\104\uff12\105\uff12\001\002\000" +
    "\054\023\uff15\024\uff15\032\uff15\046\uff15\053\uff15\054\uff15" +
    "\055\uff15\056\uff15\057\uff15\060\uff15\061\uff15\062\uff15\063" +
    "\uff15\064\uff15\065\uff15\066\uff15\067\uff15\102\uff15\103\uff15" +
    "\104\uff15\105\uff15\001\002\000\004\064\u0199\001\002\000" +
    "\054\023\uff16\024\uff16\032\uff16\046\uff16\053\uff16\054\uff16" +
    "\055\uff16\056\uff16\057\uff16\060\uff16\061\uff16\062\uff16\063" +
    "\uff16\064\uff16\065\uff16\066\uff16\067\uff16\102\uff16\103\uff16" +
    "\104\uff16\105\uff16\001\002\000\054\023\uff18\024\uff18\032" +
    "\uff18\046\uff18\053\uff18\054\uff18\055\uff18\056\uff18\057\uff18" +
    "\060\uff18\061\uff18\062\uff18\063\uff18\064\uff18\065\uff18\066" +
    "\uff18\067\uff18\102\uff18\103\uff18\104\uff18\105\uff18\001\002" +
    "\000\032\032\u0191\046\u018d\053\u018b\054\u0192\055\u018a\057" +
    "\u018e\060\u0186\061\u0185\062\u018f\063\u0188\102\u0195\104\u0184" +
    "\001\002\000\006\102\u014f\103\u014b\001\002\000\036\032" +
    "\u0191\046\u018d\053\u018b\054\u0192\055\u018a\057\u018e\060\u0186" +
    "\061\u0185\062\u018f\063\u0188\064\uff2a\066\uff2a\067\uff2a\104" +
    "\u0184\001\002\000\046\023\u0183\024\u0189\032\u0191\046\u018d" +
    "\053\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060\u0186\061" +
    "\u0185\062\u018f\063\u0188\065\u0181\102\u014f\103\u014b\104\u0184" +
    "\105\u0187\001\002\000\010\064\uff29\066\uff29\067\uff29\001" +
    "\002\000\010\064\uff21\066\uff21\067\uff21\001\002\000\016" +
    "\003\u019e\047\u019f\050\u01a1\051\u01a0\052\u01a2\102\u019d\001" +
    "\002\000\004\066\u01b6\001\002\000\010\065\ufe3f\066\ufe3f" +
    "\067\ufe3f\001\002\000\004\046\u01b3\001\002\000\014\003" +
    "\u01a5\047\u01a6\050\u01a7\051\u01a0\052\u01a2\001\002\000\004" +
    "\064\u01a3\001\002\000\004\046\ufe35\001\002\000\010\046" +
    "\ufe33\102\ufe33\103\ufe33\001\002\000\004\046\ufe34\001\002" +
    "\000\010\046\ufe32\102\ufe32\103\ufe32\001\002\000\010\065" +
    "\ufe2b\066\ufe2b\067\ufe2b\001\002\000\010\046\u01ad\102\u014f" +
    "\103\u014b\001\002\000\004\064\u01ac\001\002\000\012\046" +
    "\ufe35\047\u01ab\102\ufe35\103\ufe35\001\002\000\012\046\ufe34" +
    "\050\u01aa\102\ufe34\103\ufe34\001\002\000\012\064\u01a9\065" +
    "\ufe40\066\ufe40\067\ufe40\001\002\000\010\065\ufe30\066\ufe30" +
    "\067\ufe30\001\002\000\012\064\ufe37\065\ufe37\066\ufe37\067" +
    "\ufe37\001\002\000\012\064\ufe38\065\ufe38\066\ufe38\067\ufe38" +
    "\001\002\000\012\064\ufe36\065\ufe36\066\ufe36\067\ufe36\001" +
    "\002\000\010\064\u01b0\102\u014f\103\u014b\001\002\000\004" +
    "\064\u01af\001\002\000\010\065\ufe2d\066\ufe2d\067\ufe2d\001" +
    "\002\000\010\065\ufe2e\066\ufe2e\067\ufe2e\001\002\000\012" +
    "\064\u01b2\065\ufe2f\066\ufe2f\067\ufe2f\001\002\000\010\065" +
    "\ufe31\066\ufe31\067\ufe31\001\002\000\006\102\u014f\103\u014b" +
    "\001\002\000\004\064\u01b5\001\002\000\010\065\ufe2c\066" +
    "\ufe2c\067\ufe2c\001\002\000\004\067\u01b7\001\002\000\052" +
    "\004\047\006\055\007\062\010\070\011\130\012\076\020" +
    "\101\021\067\022\037\036\063\037\064\041\075\042\102" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\054\004\047\006\055\007\062\010\070" +
    "\011\204\012\076\020\101\021\067\022\037\036\063\037" +
    "\064\041\075\042\102\070\u01b9\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\102\074\001\002\000\060\004" +
    "\ufe50\006\ufe50\007\ufe50\010\ufe50\011\ufe50\012\ufe50\020\ufe50" +
    "\021\ufe50\022\ufe50\026\ufe50\036\ufe50\037\ufe50\041\ufe50\042" +
    "\ufe50\043\ufe50\070\ufe50\074\ufe50\075\ufe50\076\ufe50\077\ufe50" +
    "\100\ufe50\101\ufe50\102\ufe50\001\002\000\010\064\uff1f\066" +
    "\uff1f\067\uff1f\001\002\000\010\064\uff24\066\uff24\067\uff24" +
    "\001\002\000\010\102\u014f\103\u014b\105\u01bd\001\002\000" +
    "\010\064\uff1c\066\uff1c\067\uff1c\001\002\000\010\064\uff1b" +
    "\066\uff1b\067\uff1b\001\002\000\010\064\uff23\066\uff23\067" +
    "\uff23\001\002\000\042\032\u0191\046\u018d\053\u018b\054\u0192" +
    "\055\u018a\057\u018e\060\u0186\061\u0185\062\u018f\063\u0188\064" +
    "\uff25\066\uff25\067\uff25\102\u014f\103\u014b\104\u0184\001\002" +
    "\000\010\064\uff22\066\uff22\067\uff22\001\002\000\006\102" +
    "\u014f\103\u014b\001\002\000\010\064\uff2c\066\uff2c\067\uff2c" +
    "\001\002\000\010\064\uff1e\066\uff1e\067\uff1e\001\002\000" +
    "\004\066\u01c6\001\002\000\010\064\uff2b\066\uff2b\067\uff2b" +
    "\001\002\000\050\023\u0183\024\u0189\032\u0191\046\u018d\053" +
    "\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060\u0186\061\u0185" +
    "\062\u018f\063\u0188\064\u0213\065\u0181\102\u014f\103\u014b\104" +
    "\u0184\105\u0187\001\002\000\006\046\u01d4\102\u01d5\001\002" +
    "\000\004\046\u01ca\001\002\000\006\102\u014f\103\u014b\001" +
    "\002\000\004\064\u01cc\001\002\000\046\023\u0183\024\u0189" +
    "\032\u0191\046\u018d\053\u018b\054\u0192\055\u018a\056\u0193\057" +
    "\u018e\060\u0186\061\u0185\062\u018f\063\u0188\065\u0181\102\u014f" +
    "\103\u014b\104\u0184\105\u0187\001\002\000\004\064\u01ce\001" +
    "\002\000\016\003\u019e\047\u019f\050\u01a1\051\u01a0\052\u01a2" +
    "\102\u019d\001\002\000\004\066\u01d0\001\002\000\004\067" +
    "\u01d1\001\002\000\052\004\047\006\055\007\062\010\070" +
    "\011\130\012\076\020\101\021\067\022\037\036\063\037" +
    "\064\041\075\042\102\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\102\074\001\002\000\054\004\047\006" +
    "\055\007\062\010\070\011\204\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\070\u01d3\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\060\004\ufe4f\006\ufe4f\007\ufe4f\010\ufe4f\011" +
    "\ufe4f\012\ufe4f\020\ufe4f\021\ufe4f\022\ufe4f\026\ufe4f\036\ufe4f" +
    "\037\ufe4f\041\ufe4f\042\ufe4f\043\ufe4f\070\ufe4f\074\ufe4f\075" +
    "\ufe4f\076\ufe4f\077\ufe4f\100\ufe4f\101\ufe4f\102\ufe4f\001\002" +
    "\000\006\102\u014f\103\u014b\001\002\000\010\046\u01d6\102" +
    "\u014f\103\u014b\001\002\000\010\064\u01e0\102\u014f\103\u014b" +
    "\001\002\000\004\064\u01d8\001\002\000\046\023\u0183\024" +
    "\u0189\032\u0191\046\u018d\053\u018b\054\u0192\055\u018a\056\u0193" +
    "\057\u018e\060\u0186\061\u0185\062\u018f\063\u0188\065\u0181\102" +
    "\u014f\103\u014b\104\u0184\105\u0187\001\002\000\004\064\u01da" +
    "\001\002\000\016\003\u019e\047\u019f\050\u01a1\051\u01a0\052" +
    "\u01a2\102\u019d\001\002\000\004\066\u01dc\001\002\000\004" +
    "\067\u01dd\001\002\000\052\004\047\006\055\007\062\010" +
    "\070\011\130\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\054\004\047" +
    "\006\055\007\062\010\070\011\204\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\070\u01df" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\060\004\ufe4d\006\ufe4d\007\ufe4d\010\ufe4d" +
    "\011\ufe4d\012\ufe4d\020\ufe4d\021\ufe4d\022\ufe4d\026\ufe4d\036" +
    "\ufe4d\037\ufe4d\041\ufe4d\042\ufe4d\043\ufe4d\070\ufe4d\074\ufe4d" +
    "\075\ufe4d\076\ufe4d\077\ufe4d\100\ufe4d\101\ufe4d\102\ufe4d\001" +
    "\002\000\046\023\u0183\024\u0189\032\u0191\046\u018d\053\u018b" +
    "\054\u0192\055\u018a\056\u0193\057\u018e\060\u0186\061\u0185\062" +
    "\u018f\063\u0188\065\u0181\102\u014f\103\u014b\104\u0184\105\u0187" +
    "\001\002\000\050\023\u0183\024\u0189\032\u0191\046\u018d\053" +
    "\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060\u0186\061\u0185" +
    "\062\u018f\063\u0188\064\u01e2\065\u0181\102\u014f\103\u014b\104" +
    "\u0184\105\u0187\001\002\000\050\023\u0183\024\u0189\032\u0191" +
    "\046\u018d\053\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060" +
    "\u0186\061\u0185\062\u018f\063\u0188\064\u01ea\065\u0181\102\u014f" +
    "\103\u014b\104\u0184\105\u0187\001\002\000\004\064\u01e4\001" +
    "\002\000\016\003\u019e\047\u019f\050\u01a1\051\u01a0\052\u01a2" +
    "\102\u019d\001\002\000\004\066\u01e6\001\002\000\004\067" +
    "\u01e7\001\002\000\052\004\047\006\055\007\062\010\070" +
    "\011\130\012\076\020\101\021\067\022\037\036\063\037" +
    "\064\041\075\042\102\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\102\074\001\002\000\054\004\047\006" +
    "\055\007\062\010\070\011\204\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\070\u01e9\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\060\004\ufe4b\006\ufe4b\007\ufe4b\010\ufe4b\011" +
    "\ufe4b\012\ufe4b\020\ufe4b\021\ufe4b\022\ufe4b\026\ufe4b\036\ufe4b" +
    "\037\ufe4b\041\ufe4b\042\ufe4b\043\ufe4b\070\ufe4b\074\ufe4b\075" +
    "\ufe4b\076\ufe4b\077\ufe4b\100\ufe4b\101\ufe4b\102\ufe4b\001\002" +
    "\000\016\003\u019e\047\u019f\050\u01a1\051\u01a0\052\u01a2\102" +
    "\u019d\001\002\000\004\064\u01ec\001\002\000\020\003\u019e" +
    "\047\u019f\050\u01a1\051\u01a0\052\u01a2\066\u01ee\102\u019d\001" +
    "\002\000\010\065\u01f3\066\u01f2\067\u01f4\001\002\000\004" +
    "\067\u01ef\001\002\000\052\004\047\006\055\007\062\010" +
    "\070\011\130\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\054\004\047" +
    "\006\055\007\062\010\070\011\204\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\070\u01f1" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\060\004\ufe49\006\ufe49\007\ufe49\010\ufe49" +
    "\011\ufe49\012\ufe49\020\ufe49\021\ufe49\022\ufe49\026\ufe49\036" +
    "\ufe49\037\ufe49\041\ufe49\042\ufe49\043\ufe49\070\ufe49\074\ufe49" +
    "\075\ufe49\076\ufe49\077\ufe49\100\ufe49\101\ufe49\102\ufe49\001" +
    "\002\000\004\067\u01fb\001\002\000\054\004\047\006\055" +
    "\007\062\010\070\011\130\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\067\u01f7\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\052\004\047\006\055\007\062\010\070\011\130" +
    "\012\076\020\101\021\067\022\037\036\063\037\064\041" +
    "\075\042\102\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\102\074\001\002\000\054\004\047\006\055\007" +
    "\062\010\070\011\204\012\076\020\101\021\067\022\037" +
    "\036\063\037\064\041\075\042\102\070\u01f6\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\074\001\002" +
    "\000\060\004\ufe48\006\ufe48\007\ufe48\010\ufe48\011\ufe48\012" +
    "\ufe48\020\ufe48\021\ufe48\022\ufe48\026\ufe48\036\ufe48\037\ufe48" +
    "\041\ufe48\042\ufe48\043\ufe48\070\ufe48\074\ufe48\075\ufe48\076" +
    "\ufe48\077\ufe48\100\ufe48\101\ufe48\102\ufe48\001\002\000\004" +
    "\070\u01fa\001\002\000\054\004\047\006\055\007\062\010" +
    "\070\011\204\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\070\u01f9\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\074\001\002\000\060" +
    "\004\ufe47\006\ufe47\007\ufe47\010\ufe47\011\ufe47\012\ufe47\020" +
    "\ufe47\021\ufe47\022\ufe47\026\ufe47\036\ufe47\037\ufe47\041\ufe47" +
    "\042\ufe47\043\ufe47\070\ufe47\074\ufe47\075\ufe47\076\ufe47\077" +
    "\ufe47\100\ufe47\101\ufe47\102\ufe47\001\002\000\060\004\ufe46" +
    "\006\ufe46\007\ufe46\010\ufe46\011\ufe46\012\ufe46\020\ufe46\021" +
    "\ufe46\022\ufe46\026\ufe46\036\ufe46\037\ufe46\041\ufe46\042\ufe46" +
    "\043\ufe46\070\ufe46\074\ufe46\075\ufe46\076\ufe46\077\ufe46\100" +
    "\ufe46\101\ufe46\102\ufe46\001\002\000\052\004\047\006\055" +
    "\007\062\010\070\011\130\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\074\011\075\016" +
    "\076\007\077\020\100\013\101\022\102\074\001\002\000" +
    "\054\004\047\006\055\007\062\010\070\011\204\012\076" +
    "\020\101\021\067\022\037\036\063\037\064\041\075\042" +
    "\102\070\u01fd\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\102\074\001\002\000\060\004\ufe52\006\ufe52\007" +
    "\ufe52\010\ufe52\011\ufe52\012\ufe52\020\ufe52\021\ufe52\022\ufe52" +
    "\026\ufe52\036\ufe52\037\ufe52\041\ufe52\042\ufe52\043\ufe52\070" +
    "\ufe52\074\ufe52\075\ufe52\076\ufe52\077\ufe52\100\ufe52\101\ufe52" +
    "\102\ufe52\001\002\000\004\066\u01ff\001\002\000\004\067" +
    "\u0200\001\002\000\052\004\047\006\055\007\062\010\070" +
    "\011\130\012\076\020\101\021\067\022\037\036\063\037" +
    "\064\041\075\042\102\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\102\074\001\002\000\054\004\047\006" +
    "\055\007\062\010\070\011\204\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\070\u0202\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\060\004\ufe4a\006\ufe4a\007\ufe4a\010\ufe4a\011" +
    "\ufe4a\012\ufe4a\020\ufe4a\021\ufe4a\022\ufe4a\026\ufe4a\036\ufe4a" +
    "\037\ufe4a\041\ufe4a\042\ufe4a\043\ufe4a\070\ufe4a\074\ufe4a\075" +
    "\ufe4a\076\ufe4a\077\ufe4a\100\ufe4a\101\ufe4a\102\ufe4a\001\002" +
    "\000\004\064\u0204\001\002\000\016\003\u019e\047\u019f\050" +
    "\u01a1\051\u01a0\052\u01a2\102\u019d\001\002\000\004\066\u0206" +
    "\001\002\000\004\067\u0207\001\002\000\052\004\047\006" +
    "\055\007\062\010\070\011\130\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\074\001\002" +
    "\000\054\004\047\006\055\007\062\010\070\011\204\012" +
    "\076\020\101\021\067\022\037\036\063\037\064\041\075" +
    "\042\102\070\u0209\074\011\075\016\076\007\077\020\100" +
    "\013\101\022\102\074\001\002\000\060\004\ufe4c\006\ufe4c" +
    "\007\ufe4c\010\ufe4c\011\ufe4c\012\ufe4c\020\ufe4c\021\ufe4c\022" +
    "\ufe4c\026\ufe4c\036\ufe4c\037\ufe4c\041\ufe4c\042\ufe4c\043\ufe4c" +
    "\070\ufe4c\074\ufe4c\075\ufe4c\076\ufe4c\077\ufe4c\100\ufe4c\101" +
    "\ufe4c\102\ufe4c\001\002\000\004\064\u020b\001\002\000\046" +
    "\023\u0183\024\u0189\032\u0191\046\u018d\053\u018b\054\u0192\055" +
    "\u018a\056\u0193\057\u018e\060\u0186\061\u0185\062\u018f\063\u0188" +
    "\065\u0181\102\u014f\103\u014b\104\u0184\105\u0187\001\002\000" +
    "\004\064\u020d\001\002\000\016\003\u019e\047\u019f\050\u01a1" +
    "\051\u01a0\052\u01a2\102\u019d\001\002\000\004\066\u020f\001" +
    "\002\000\004\067\u0210\001\002\000\052\004\047\006\055" +
    "\007\062\010\070\011\130\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\074\011\075\016" +
    "\076\007\077\020\100\013\101\022\102\074\001\002\000" +
    "\054\004\047\006\055\007\062\010\070\011\204\012\076" +
    "\020\101\021\067\022\037\036\063\037\064\041\075\042" +
    "\102\070\u0212\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\102\074\001\002\000\060\004\ufe4e\006\ufe4e\007" +
    "\ufe4e\010\ufe4e\011\ufe4e\012\ufe4e\020\ufe4e\021\ufe4e\022\ufe4e" +
    "\026\ufe4e\036\ufe4e\037\ufe4e\041\ufe4e\042\ufe4e\043\ufe4e\070" +
    "\ufe4e\074\ufe4e\075\ufe4e\076\ufe4e\077\ufe4e\100\ufe4e\101\ufe4e" +
    "\102\ufe4e\001\002\000\016\003\u019e\047\u019f\050\u01a1\051" +
    "\u01a0\052\u01a2\102\u019d\001\002\000\004\064\u0215\001\002" +
    "\000\020\003\u019e\047\u019f\050\u01a1\051\u01a0\052\u01a2\066" +
    "\u0217\102\u019d\001\002\000\010\065\u021b\066\u021c\067\u021d" +
    "\001\002\000\004\067\u0218\001\002\000\052\004\047\006" +
    "\055\007\062\010\070\011\130\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\074\001\002" +
    "\000\054\004\047\006\055\007\062\010\070\011\204\012" +
    "\076\020\101\021\067\022\037\036\063\037\064\041\075" +
    "\042\102\070\u021a\074\011\075\016\076\007\077\020\100" +
    "\013\101\022\102\074\001\002\000\060\004\ufe44\006\ufe44" +
    "\007\ufe44\010\ufe44\011\ufe44\012\ufe44\020\ufe44\021\ufe44\022" +
    "\ufe44\026\ufe44\036\ufe44\037\ufe44\041\ufe44\042\ufe44\043\ufe44" +
    "\070\ufe44\074\ufe44\075\ufe44\076\ufe44\077\ufe44\100\ufe44\101" +
    "\ufe44\102\ufe44\001\002\000\054\004\047\006\055\007\062" +
    "\010\070\011\130\012\076\020\101\021\067\022\037\036" +
    "\063\037\064\041\075\042\102\067\u0223\074\011\075\016" +
    "\076\007\077\020\100\013\101\022\102\074\001\002\000" +
    "\004\067\u0220\001\002\000\052\004\047\006\055\007\062" +
    "\010\070\011\130\012\076\020\101\021\067\022\037\036" +
    "\063\037\064\041\075\042\102\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\102\074\001\002\000\054\004" +
    "\047\006\055\007\062\010\070\011\204\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\070" +
    "\u021f\074\011\075\016\076\007\077\020\100\013\101\022" +
    "\102\074\001\002\000\060\004\ufe43\006\ufe43\007\ufe43\010" +
    "\ufe43\011\ufe43\012\ufe43\020\ufe43\021\ufe43\022\ufe43\026\ufe43" +
    "\036\ufe43\037\ufe43\041\ufe43\042\ufe43\043\ufe43\070\ufe43\074" +
    "\ufe43\075\ufe43\076\ufe43\077\ufe43\100\ufe43\101\ufe43\102\ufe43" +
    "\001\002\000\052\004\047\006\055\007\062\010\070\011" +
    "\130\012\076\020\101\021\067\022\037\036\063\037\064" +
    "\041\075\042\102\074\011\075\016\076\007\077\020\100" +
    "\013\101\022\102\074\001\002\000\054\004\047\006\055" +
    "\007\062\010\070\011\204\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\070\u0222\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\060\004\ufe51\006\ufe51\007\ufe51\010\ufe51\011\ufe51" +
    "\012\ufe51\020\ufe51\021\ufe51\022\ufe51\026\ufe51\036\ufe51\037" +
    "\ufe51\041\ufe51\042\ufe51\043\ufe51\070\ufe51\074\ufe51\075\ufe51" +
    "\076\ufe51\077\ufe51\100\ufe51\101\ufe51\102\ufe51\001\002\000" +
    "\004\070\u0226\001\002\000\054\004\047\006\055\007\062" +
    "\010\070\011\204\012\076\020\101\021\067\022\037\036" +
    "\063\037\064\041\075\042\102\070\u0225\074\011\075\016" +
    "\076\007\077\020\100\013\101\022\102\074\001\002\000" +
    "\060\004\ufe42\006\ufe42\007\ufe42\010\ufe42\011\ufe42\012\ufe42" +
    "\020\ufe42\021\ufe42\022\ufe42\026\ufe42\036\ufe42\037\ufe42\041" +
    "\ufe42\042\ufe42\043\ufe42\070\ufe42\074\ufe42\075\ufe42\076\ufe42" +
    "\077\ufe42\100\ufe42\101\ufe42\102\ufe42\001\002\000\060\004" +
    "\ufe41\006\ufe41\007\ufe41\010\ufe41\011\ufe41\012\ufe41\020\ufe41" +
    "\021\ufe41\022\ufe41\026\ufe41\036\ufe41\037\ufe41\041\ufe41\042" +
    "\ufe41\043\ufe41\070\ufe41\074\ufe41\075\ufe41\076\ufe41\077\ufe41" +
    "\100\ufe41\101\ufe41\102\ufe41\001\002\000\004\066\u0228\001" +
    "\002\000\004\067\u0229\001\002\000\052\004\047\006\055" +
    "\007\062\010\070\011\130\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\074\011\075\016" +
    "\076\007\077\020\100\013\101\022\102\074\001\002\000" +
    "\054\004\047\006\055\007\062\010\070\011\204\012\076" +
    "\020\101\021\067\022\037\036\063\037\064\041\075\042" +
    "\102\070\u022b\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\102\074\001\002\000\060\004\ufe45\006\ufe45\007" +
    "\ufe45\010\ufe45\011\ufe45\012\ufe45\020\ufe45\021\ufe45\022\ufe45" +
    "\026\ufe45\036\ufe45\037\ufe45\041\ufe45\042\ufe45\043\ufe45\070" +
    "\ufe45\074\ufe45\075\ufe45\076\ufe45\077\ufe45\100\ufe45\101\ufe45" +
    "\102\ufe45\001\002\000\012\031\u023b\066\u023a\102\u023d\104" +
    "\u023c\001\002\000\004\105\u0237\001\002\000\004\104\u022f" +
    "\001\002\000\006\102\u014f\103\u014b\001\002\000\006\066" +
    "\u0231\104\u0232\001\002\000\004\064\u0236\001\002\000\006" +
    "\102\u014f\103\u014b\001\002\000\004\066\u0234\001\002\000" +
    "\004\064\u0235\001\002\000\060\004\ufe66\006\ufe66\007\ufe66" +
    "\010\ufe66\011\ufe66\012\ufe66\020\ufe66\021\ufe66\022\ufe66\026" +
    "\ufe66\036\ufe66\037\ufe66\041\ufe66\042\ufe66\043\ufe66\070\ufe66" +
    "\074\ufe66\075\ufe66\076\ufe66\077\ufe66\100\ufe66\101\ufe66\102" +
    "\ufe66\001\002\000\060\004\ufe6f\006\ufe6f\007\ufe6f\010\ufe6f" +
    "\011\ufe6f\012\ufe6f\020\ufe6f\021\ufe6f\022\ufe6f\026\ufe6f\036" +
    "\ufe6f\037\ufe6f\041\ufe6f\042\ufe6f\043\ufe6f\070\ufe6f\074\ufe6f" +
    "\075\ufe6f\076\ufe6f\077\ufe6f\100\ufe6f\101\ufe6f\102\ufe6f\001" +
    "\002\000\004\066\u0238\001\002\000\004\064\u0239\001\002" +
    "\000\060\004\ufe60\006\ufe60\007\ufe60\010\ufe60\011\ufe60\012" +
    "\ufe60\020\ufe60\021\ufe60\022\ufe60\026\ufe60\036\ufe60\037\ufe60" +
    "\041\ufe60\042\ufe60\043\ufe60\070\ufe60\074\ufe60\075\ufe60\076" +
    "\ufe60\077\ufe60\100\ufe60\101\ufe60\102\ufe60\001\002\000\004" +
    "\064\u026e\001\002\000\006\104\u0265\105\u0264\001\002\000" +
    "\010\102\u014f\103\u014b\105\u025a\001\002\000\010\102\u014f" +
    "\103\u014b\104\u023f\001\002\000\006\066\u0254\104\u0255\001" +
    "\002\000\012\066\u0240\102\u014f\103\u014b\104\u0241\001\002" +
    "\000\004\064\u0253\001\002\000\006\102\u014f\103\u014b\001" +
    "\002\000\014\064\u0244\066\u0243\102\u014f\103\u014b\104\u0245" +
    "\001\002\000\062\004\ufe74\006\ufe74\007\ufe74\010\ufe74\011" +
    "\ufe74\012\ufe74\020\ufe74\021\ufe74\022\ufe74\026\ufe74\036\ufe74" +
    "\037\ufe74\041\ufe74\042\ufe74\043\ufe74\064\u024f\070\ufe74\074" +
    "\ufe74\075\ufe74\076\ufe74\077\ufe74\100\ufe74\101\ufe74\102\ufe74" +
    "\001\002\000\060\004\ufe73\006\ufe73\007\ufe73\010\ufe73\011" +
    "\ufe73\012\ufe73\020\ufe73\021\ufe73\022\ufe73\026\ufe73\036\ufe73" +
    "\037\ufe73\041\ufe73\042\ufe73\043\ufe73\070\ufe73\074\ufe73\075" +
    "\ufe73\076\ufe73\077\ufe73\100\ufe73\101\ufe73\102\ufe73\001\002" +
    "\000\010\066\u0249\102\u014f\103\u014b\001\002\000\004\066" +
    "\u0247\001\002\000\004\064\u0248\001\002\000\060\004\ufe6a" +
    "\006\ufe6a\007\ufe6a\010\ufe6a\011\ufe6a\012\ufe6a\020\ufe6a\021" +
    "\ufe6a\022\ufe6a\026\ufe6a\036\ufe6a\037\ufe6a\041\ufe6a\042\ufe6a" +
    "\043\ufe6a\070\ufe6a\074\ufe6a\075\ufe6a\076\ufe6a\077\ufe6a\100" +
    "\ufe6a\101\ufe6a\102\ufe6a\001\002\000\004\064\u024e\001\002" +
    "\000\006\064\u024c\066\u024b\001\002\000\062\004\ufe6d\006" +
    "\ufe6d\007\ufe6d\010\ufe6d\011\ufe6d\012\ufe6d\020\ufe6d\021\ufe6d" +
    "\022\ufe6d\026\ufe6d\036\ufe6d\037\ufe6d\041\ufe6d\042\ufe6d\043" +
    "\ufe6d\064\u024d\070\ufe6d\074\ufe6d\075\ufe6d\076\ufe6d\077\ufe6d" +
    "\100\ufe6d\101\ufe6d\102\ufe6d\001\002\000\060\004\ufe6c\006" +
    "\ufe6c\007\ufe6c\010\ufe6c\011\ufe6c\012\ufe6c\020\ufe6c\021\ufe6c" +
    "\022\ufe6c\026\ufe6c\036\ufe6c\037\ufe6c\041\ufe6c\042\ufe6c\043" +
    "\ufe6c\070\ufe6c\074\ufe6c\075\ufe6c\076\ufe6c\077\ufe6c\100\ufe6c" +
    "\101\ufe6c\102\ufe6c\001\002\000\060\004\ufe76\006\ufe76\007" +
    "\ufe76\010\ufe76\011\ufe76\012\ufe76\020\ufe76\021\ufe76\022\ufe76" +
    "\026\ufe76\036\ufe76\037\ufe76\041\ufe76\042\ufe76\043\ufe76\070" +
    "\ufe76\074\ufe76\075\ufe76\076\ufe76\077\ufe76\100\ufe76\101\ufe76" +
    "\102\ufe76\001\002\000\060\004\ufe6b\006\ufe6b\007\ufe6b\010" +
    "\ufe6b\011\ufe6b\012\ufe6b\020\ufe6b\021\ufe6b\022\ufe6b\026\ufe6b" +
    "\036\ufe6b\037\ufe6b\041\ufe6b\042\ufe6b\043\ufe6b\070\ufe6b\074" +
    "\ufe6b\075\ufe6b\076\ufe6b\077\ufe6b\100\ufe6b\101\ufe6b\102\ufe6b" +
    "\001\002\000\060\004\ufe77\006\ufe77\007\ufe77\010\ufe77\011" +
    "\ufe77\012\ufe77\020\ufe77\021\ufe77\022\ufe77\026\ufe77\036\ufe77" +
    "\037\ufe77\041\ufe77\042\ufe77\043\ufe77\070\ufe77\074\ufe77\075" +
    "\ufe77\076\ufe77\077\ufe77\100\ufe77\101\ufe77\102\ufe77\001\002" +
    "\000\004\066\u0251\001\002\000\004\064\u0252\001\002\000" +
    "\060\004\ufe69\006\ufe69\007\ufe69\010\ufe69\011\ufe69\012\ufe69" +
    "\020\ufe69\021\ufe69\022\ufe69\026\ufe69\036\ufe69\037\ufe69\041" +
    "\ufe69\042\ufe69\043\ufe69\070\ufe69\074\ufe69\075\ufe69\076\ufe69" +
    "\077\ufe69\100\ufe69\101\ufe69\102\ufe69\001\002\000\060\004" +
    "\ufe72\006\ufe72\007\ufe72\010\ufe72\011\ufe72\012\ufe72\020\ufe72" +
    "\021\ufe72\022\ufe72\026\ufe72\036\ufe72\037\ufe72\041\ufe72\042" +
    "\ufe72\043\ufe72\070\ufe72\074\ufe72\075\ufe72\076\ufe72\077\ufe72" +
    "\100\ufe72\101\ufe72\102\ufe72\001\002\000\004\064\u0259\001" +
    "\002\000\006\102\u014f\103\u014b\001\002\000\004\066\u0257" +
    "\001\002\000\004\064\u0258\001\002\000\060\004\ufe68\006" +
    "\ufe68\007\ufe68\010\ufe68\011\ufe68\012\ufe68\020\ufe68\021\ufe68" +
    "\022\ufe68\026\ufe68\036\ufe68\037\ufe68\041\ufe68\042\ufe68\043" +
    "\ufe68\070\ufe68\074\ufe68\075\ufe68\076\ufe68\077\ufe68\100\ufe68" +
    "\101\ufe68\102\ufe68\001\002\000\060\004\ufe71\006\ufe71\007" +
    "\ufe71\010\ufe71\011\ufe71\012\ufe71\020\ufe71\021\ufe71\022\ufe71" +
    "\026\ufe71\036\ufe71\037\ufe71\041\ufe71\042\ufe71\043\ufe71\070" +
    "\ufe71\074\ufe71\075\ufe71\076\ufe71\077\ufe71\100\ufe71\101\ufe71" +
    "\102\ufe71\001\002\000\004\066\u0262\001\002\000\006\066" +
    "\u025c\104\u025d\001\002\000\004\064\u0261\001\002\000\006" +
    "\102\u014f\103\u014b\001\002\000\004\066\u025f\001\002\000" +
    "\004\064\u0260\001\002\000\060\004\ufe67\006\ufe67\007\ufe67" +
    "\010\ufe67\011\ufe67\012\ufe67\020\ufe67\021\ufe67\022\ufe67\026" +
    "\ufe67\036\ufe67\037\ufe67\041\ufe67\042\ufe67\043\ufe67\070\ufe67" +
    "\074\ufe67\075\ufe67\076\ufe67\077\ufe67\100\ufe67\101\ufe67\102" +
    "\ufe67\001\002\000\060\004\ufe70\006\ufe70\007\ufe70\010\ufe70" +
    "\011\ufe70\012\ufe70\020\ufe70\021\ufe70\022\ufe70\026\ufe70\036" +
    "\ufe70\037\ufe70\041\ufe70\042\ufe70\043\ufe70\070\ufe70\074\ufe70" +
    "\075\ufe70\076\ufe70\077\ufe70\100\ufe70\101\ufe70\102\ufe70\001" +
    "\002\000\004\064\u0263\001\002\000\060\004\ufe61\006\ufe61" +
    "\007\ufe61\010\ufe61\011\ufe61\012\ufe61\020\ufe61\021\ufe61\022" +
    "\ufe61\026\ufe61\036\ufe61\037\ufe61\041\ufe61\042\ufe61\043\ufe61" +
    "\070\ufe61\074\ufe61\075\ufe61\076\ufe61\077\ufe61\100\ufe61\101" +
    "\ufe61\102\ufe61\001\002\000\004\066\u026c\001\002\000\006" +
    "\066\u0267\105\u0266\001\002\000\006\064\u026a\066\u0269\001" +
    "\002\000\004\064\u0268\001\002\000\060\004\ufe63\006\ufe63" +
    "\007\ufe63\010\ufe63\011\ufe63\012\ufe63\020\ufe63\021\ufe63\022" +
    "\ufe63\026\ufe63\036\ufe63\037\ufe63\041\ufe63\042\ufe63\043\ufe63" +
    "\070\ufe63\074\ufe63\075\ufe63\076\ufe63\077\ufe63\100\ufe63\101" +
    "\ufe63\102\ufe63\001\002\000\062\004\ufe65\006\ufe65\007\ufe65" +
    "\010\ufe65\011\ufe65\012\ufe65\020\ufe65\021\ufe65\022\ufe65\026" +
    "\ufe65\036\ufe65\037\ufe65\041\ufe65\042\ufe65\043\ufe65\064\u026b" +
    "\070\ufe65\074\ufe65\075\ufe65\076\ufe65\077\ufe65\100\ufe65\101" +
    "\ufe65\102\ufe65\001\002\000\060\004\ufe64\006\ufe64\007\ufe64" +
    "\010\ufe64\011\ufe64\012\ufe64\020\ufe64\021\ufe64\022\ufe64\026" +
    "\ufe64\036\ufe64\037\ufe64\041\ufe64\042\ufe64\043\ufe64\070\ufe64" +
    "\074\ufe64\075\ufe64\076\ufe64\077\ufe64\100\ufe64\101\ufe64\102" +
    "\ufe64\001\002\000\060\004\ufe75\006\ufe75\007\ufe75\010\ufe75" +
    "\011\ufe75\012\ufe75\020\ufe75\021\ufe75\022\ufe75\026\ufe75\036" +
    "\ufe75\037\ufe75\041\ufe75\042\ufe75\043\ufe75\070\ufe75\074\ufe75" +
    "\075\ufe75\076\ufe75\077\ufe75\100\ufe75\101\ufe75\102\ufe75\001" +
    "\002\000\004\064\u026d\001\002\000\060\004\ufe62\006\ufe62" +
    "\007\ufe62\010\ufe62\011\ufe62\012\ufe62\020\ufe62\021\ufe62\022" +
    "\ufe62\026\ufe62\036\ufe62\037\ufe62\041\ufe62\042\ufe62\043\ufe62" +
    "\070\ufe62\074\ufe62\075\ufe62\076\ufe62\077\ufe62\100\ufe62\101" +
    "\ufe62\102\ufe62\001\002\000\060\004\ufe6e\006\ufe6e\007\ufe6e" +
    "\010\ufe6e\011\ufe6e\012\ufe6e\020\ufe6e\021\ufe6e\022\ufe6e\026" +
    "\ufe6e\036\ufe6e\037\ufe6e\041\ufe6e\042\ufe6e\043\ufe6e\070\ufe6e" +
    "\074\ufe6e\075\ufe6e\076\ufe6e\077\ufe6e\100\ufe6e\101\ufe6e\102" +
    "\ufe6e\001\002\000\046\023\u0183\024\u0189\032\u0191\046\u018d" +
    "\053\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060\u0186\061" +
    "\u0185\062\u018f\063\u0188\065\u0181\102\u014f\103\u014b\104\u0184" +
    "\105\u0187\001\002\000\004\066\u0271\001\002\000\004\064" +
    "\u0272\001\002\000\060\004\uff2e\006\uff2e\007\uff2e\010\uff2e" +
    "\011\uff2e\012\uff2e\020\uff2e\021\uff2e\022\uff2e\026\uff2e\036" +
    "\uff2e\037\uff2e\041\uff2e\042\uff2e\043\uff2e\070\uff2e\074\uff2e" +
    "\075\uff2e\076\uff2e\077\uff2e\100\uff2e\101\uff2e\102\uff2e\001" +
    "\002\000\006\064\u0275\066\u0274\001\002\000\064\004\uff2f" +
    "\006\uff2f\007\uff2f\010\uff2f\011\uff2f\012\uff2f\020\uff2f\021" +
    "\uff2f\022\uff2f\026\uff2f\036\uff2f\037\uff2f\041\uff2f\042\uff2f" +
    "\043\uff2f\064\u0276\066\uff2b\070\uff2f\074\uff2f\075\uff2f\076" +
    "\uff2f\077\uff2f\100\uff2f\101\uff2f\102\uff2f\001\002\000\060" +
    "\004\uff2d\006\uff2d\007\uff2d\010\uff2d\011\uff2d\012\uff2d\020" +
    "\uff2d\021\uff2d\022\uff2d\026\uff2d\036\uff2d\037\uff2d\041\uff2d" +
    "\042\uff2d\043\uff2d\070\uff2d\074\uff2d\075\uff2d\076\uff2d\077" +
    "\uff2d\100\uff2d\101\uff2d\102\uff2d\001\002\000\060\004\uff30" +
    "\006\uff30\007\uff30\010\uff30\011\uff30\012\uff30\020\uff30\021" +
    "\uff30\022\uff30\026\uff30\036\uff30\037\uff30\041\uff30\042\uff30" +
    "\043\uff30\070\uff30\074\uff30\075\uff30\076\uff30\077\uff30\100" +
    "\uff30\101\uff30\102\uff30\001\002\000\006\102\u0282\103\u0281" +
    "\001\002\000\004\104\u0279\001\002\000\004\103\u027a\001" +
    "\002\000\006\066\u027b\104\u027c\001\002\000\004\064\u0280" +
    "\001\002\000\004\103\u027d\001\002\000\004\066\u027e\001" +
    "\002\000\004\064\u027f\001\002\000\074\004\uff3d\006\uff3d" +
    "\007\uff3d\010\uff3d\011\uff3d\012\uff3d\020\uff3d\021\uff3d\022" +
    "\uff3d\026\uff3d\030\uff3d\031\uff3d\034\uff3d\035\uff3d\036\uff3d" +
    "\037\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d\045\uff3d\070" +
    "\uff3d\074\uff3d\075\uff3d\076\uff3d\077\uff3d\100\uff3d\101\uff3d" +
    "\102\uff3d\001\002\000\074\004\uff3f\006\uff3f\007\uff3f\010" +
    "\uff3f\011\uff3f\012\uff3f\020\uff3f\021\uff3f\022\uff3f\026\uff3f" +
    "\030\uff3f\031\uff3f\034\uff3f\035\uff3f\036\uff3f\037\uff3f\040" +
    "\uff3f\041\uff3f\042\uff3f\043\uff3f\045\uff3f\070\uff3f\074\uff3f" +
    "\075\uff3f\076\uff3f\077\uff3f\100\uff3f\101\uff3f\102\uff3f\001" +
    "\002\000\004\104\u029a\001\002\000\006\103\u0283\104\u0284" +
    "\001\002\000\010\066\u0292\103\u0291\104\u0293\001\002\000" +
    "\004\103\u0285\001\002\000\012\064\u0288\066\u0287\103\u0286" +
    "\104\u0289\001\002\000\004\066\u028f\001\002\000\076\004" +
    "\uff48\006\uff48\007\uff48\010\uff48\011\uff48\012\uff48\020\uff48" +
    "\021\uff48\022\uff48\026\uff48\030\uff48\031\uff48\034\uff48\035" +
    "\uff48\036\uff48\037\uff48\040\uff48\041\uff48\042\uff48\043\uff48" +
    "\045\uff48\064\u028e\070\uff48\074\uff48\075\uff48\076\uff48\077" +
    "\uff48\100\uff48\101\uff48\102\uff48\001\002\000\074\004\uff3e" +
    "\006\uff3e\007\uff3e\010\uff3e\011\uff3e\012\uff3e\020\uff3e\021" +
    "\uff3e\022\uff3e\026\uff3e\030\uff3e\031\uff3e\034\uff3e\035\uff3e" +
    "\036\uff3e\037\uff3e\040\uff3e\041\uff3e\042\uff3e\043\uff3e\045" +
    "\uff3e\070\uff3e\074\uff3e\075\uff3e\076\uff3e\077\uff3e\100\uff3e" +
    "\101\uff3e\102\uff3e\001\002\000\004\103\u028a\001\002\000" +
    "\006\064\u028c\066\u028b\001\002\000\076\004\uff47\006\uff47" +
    "\007\uff47\010\uff47\011\uff47\012\uff47\020\uff47\021\uff47\022" +
    "\uff47\026\uff47\030\uff47\031\uff47\034\uff47\035\uff47\036\uff47" +
    "\037\uff47\040\uff47\041\uff47\042\uff47\043\uff47\045\uff47\064" +
    "\u028d\070\uff47\074\uff47\075\uff47\076\uff47\077\uff47\100\uff47" +
    "\101\uff47\102\uff47\001\002\000\074\004\uff3c\006\uff3c\007" +
    "\uff3c\010\uff3c\011\uff3c\012\uff3c\020\uff3c\021\uff3c\022\uff3c" +
    "\026\uff3c\030\uff3c\031\uff3c\034\uff3c\035\uff3c\036\uff3c\037" +
    "\uff3c\040\uff3c\041\uff3c\042\uff3c\043\uff3c\045\uff3c\070\uff3c" +
    "\074\uff3c\075\uff3c\076\uff3c\077\uff3c\100\uff3c\101\uff3c\102" +
    "\uff3c\001\002\000\074\004\uff49\006\uff49\007\uff49\010\uff49" +
    "\011\uff49\012\uff49\020\uff49\021\uff49\022\uff49\026\uff49\030" +
    "\uff49\031\uff49\034\uff49\035\uff49\036\uff49\037\uff49\040\uff49" +
    "\041\uff49\042\uff49\043\uff49\045\uff49\070\uff49\074\uff49\075" +
    "\uff49\076\uff49\077\uff49\100\uff49\101\uff49\102\uff49\001\002" +
    "\000\074\004\uff4a\006\uff4a\007\uff4a\010\uff4a\011\uff4a\012" +
    "\uff4a\020\uff4a\021\uff4a\022\uff4a\026\uff4a\030\uff4a\031\uff4a" +
    "\034\uff4a\035\uff4a\036\uff4a\037\uff4a\040\uff4a\041\uff4a\042" +
    "\uff4a\043\uff4a\045\uff4a\070\uff4a\074\uff4a\075\uff4a\076\uff4a" +
    "\077\uff4a\100\uff4a\101\uff4a\102\uff4a\001\002\000\004\064" +
    "\u0290\001\002\000\074\004\uff42\006\uff42\007\uff42\010\uff42" +
    "\011\uff42\012\uff42\020\uff42\021\uff42\022\uff42\026\uff42\030" +
    "\uff42\031\uff42\034\uff42\035\uff42\036\uff42\037\uff42\040\uff42" +
    "\041\uff42\042\uff42\043\uff42\045\uff42\070\uff42\074\uff42\075" +
    "\uff42\076\uff42\077\uff42\100\uff42\101\uff42\102\uff42\001\002" +
    "\000\004\066\u0298\001\002\000\004\064\u0297\001\002\000" +
    "\004\103\u0294\001\002\000\004\066\u0295\001\002\000\004" +
    "\064\u0296\001\002\000\074\004\uff41\006\uff41\007\uff41\010" +
    "\uff41\011\uff41\012\uff41\020\uff41\021\uff41\022\uff41\026\uff41" +
    "\030\uff41\031\uff41\034\uff41\035\uff41\036\uff41\037\uff41\040" +
    "\uff41\041\uff41\042\uff41\043\uff41\045\uff41\070\uff41\074\uff41" +
    "\075\uff41\076\uff41\077\uff41\100\uff41\101\uff41\102\uff41\001" +
    "\002\000\074\004\uff43\006\uff43\007\uff43\010\uff43\011\uff43" +
    "\012\uff43\020\uff43\021\uff43\022\uff43\026\uff43\030\uff43\031" +
    "\uff43\034\uff43\035\uff43\036\uff43\037\uff43\040\uff43\041\uff43" +
    "\042\uff43\043\uff43\045\uff43\070\uff43\074\uff43\075\uff43\076" +
    "\uff43\077\uff43\100\uff43\101\uff43\102\uff43\001\002\000\004" +
    "\064\u0299\001\002\000\074\004\uff40\006\uff40\007\uff40\010" +
    "\uff40\011\uff40\012\uff40\020\uff40\021\uff40\022\uff40\026\uff40" +
    "\030\uff40\031\uff40\034\uff40\035\uff40\036\uff40\037\uff40\040" +
    "\uff40\041\uff40\042\uff40\043\uff40\045\uff40\070\uff40\074\uff40" +
    "\075\uff40\076\uff40\077\uff40\100\uff40\101\uff40\102\uff40\001" +
    "\002\000\006\102\u029c\103\u029b\001\002\000\004\104\u02a3" +
    "\001\002\000\006\066\u029d\104\u029e\001\002\000\004\064" +
    "\u02a2\001\002\000\004\103\u029f\001\002\000\004\066\u02a0" +
    "\001\002\000\004\064\u02a1\001\002\000\074\004\uff45\006" +
    "\uff45\007\uff45\010\uff45\011\uff45\012\uff45\020\uff45\021\uff45" +
    "\022\uff45\026\uff45\030\uff45\031\uff45\034\uff45\035\uff45\036" +
    "\uff45\037\uff45\040\uff45\041\uff45\042\uff45\043\uff45\045\uff45" +
    "\070\uff45\074\uff45\075\uff45\076\uff45\077\uff45\100\uff45\101" +
    "\uff45\102\uff45\001\002\000\074\004\uff46\006\uff46\007\uff46" +
    "\010\uff46\011\uff46\012\uff46\020\uff46\021\uff46\022\uff46\026" +
    "\uff46\030\uff46\031\uff46\034\uff46\035\uff46\036\uff46\037\uff46" +
    "\040\uff46\041\uff46\042\uff46\043\uff46\045\uff46\070\uff46\074" +
    "\uff46\075\uff46\076\uff46\077\uff46\100\uff46\101\uff46\102\uff46" +
    "\001\002\000\004\102\u02a4\001\002\000\004\066\u02a5\001" +
    "\002\000\004\064\u02a6\001\002\000\074\004\uff44\006\uff44" +
    "\007\uff44\010\uff44\011\uff44\012\uff44\020\uff44\021\uff44\022" +
    "\uff44\026\uff44\030\uff44\031\uff44\034\uff44\035\uff44\036\uff44" +
    "\037\uff44\040\uff44\041\uff44\042\uff44\043\uff44\045\uff44\070" +
    "\uff44\074\uff44\075\uff44\076\uff44\077\uff44\100\uff44\101\uff44" +
    "\102\uff44\001\002\000\054\004\047\006\055\007\062\010" +
    "\070\011\130\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\070\u02af\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\074\001\002\000\054" +
    "\004\047\006\055\007\062\010\070\011\204\012\076\020" +
    "\101\021\067\022\037\036\063\037\064\041\075\042\102" +
    "\070\u02a9\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\004\006\u02aa\001\002\000\004" +
    "\065\u02ab\001\002\000\046\023\u0183\024\u0189\032\u0191\046" +
    "\u018d\053\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060\u0186" +
    "\061\u0185\062\u018f\063\u0188\065\u0181\102\u014f\103\u014b\104" +
    "\u0184\105\u0187\001\002\000\004\066\u02ad\001\002\000\004" +
    "\064\u02ae\001\002\000\060\004\ufe8f\006\ufe8f\007\ufe8f\010" +
    "\ufe8f\011\ufe8f\012\ufe8f\020\ufe8f\021\ufe8f\022\ufe8f\026\ufe8f" +
    "\036\ufe8f\037\ufe8f\041\ufe8f\042\ufe8f\043\ufe8f\070\ufe8f\074" +
    "\ufe8f\075\ufe8f\076\ufe8f\077\ufe8f\100\ufe8f\101\ufe8f\102\ufe8f" +
    "\001\002\000\004\006\u02d7\001\002\000\054\004\047\006" +
    "\u02b2\007\062\010\070\011\204\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\070\u02b1\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\006\006\u02c9\065\u02c8\001\002\000\046\023" +
    "\u0183\024\u0189\032\u0191\046\u018d\053\u018b\054\u0192\055\u018a" +
    "\056\u0193\057\u018e\060\u0186\061\u0185\062\u018f\063\u0188\065" +
    "\u02b3\102\u014f\103\u014b\104\u0184\105\u0187\001\002\000\050" +
    "\023\u0183\024\u0189\032\u0191\046\u018d\053\u018b\054\u0192\055" +
    "\u018a\056\u0193\057\u018e\060\u0186\061\u0185\062\u018f\063\u0188" +
    "\065\u0181\066\u02b9\102\u014f\103\u014b\104\u0184\105\u0187\001" +
    "\002\000\004\066\u02b5\001\002\000\004\067\u02b6\001\002" +
    "\000\052\004\047\006\055\007\062\010\070\011\130\012" +
    "\076\020\101\021\067\022\037\036\063\037\064\041\075" +
    "\042\102\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\054\004\047\006\055\007\062" +
    "\010\070\011\204\012\076\020\101\021\067\022\037\036" +
    "\063\037\064\041\075\042\102\070\u02b8\074\011\075\016" +
    "\076\007\077\020\100\013\101\022\102\074\001\002\000" +
    "\060\004\ufe9b\006\ufe9b\007\ufe9b\010\ufe9b\011\ufe9b\012\ufe9b" +
    "\020\ufe9b\021\ufe9b\022\ufe9b\026\ufe9b\036\ufe9b\037\ufe9b\041" +
    "\ufe9b\042\ufe9b\043\ufe9b\070\ufe9b\074\ufe9b\075\ufe9b\076\ufe9b" +
    "\077\ufe9b\100\ufe9b\101\ufe9b\102\ufe9b\001\002\000\004\067" +
    "\u02c5\001\002\000\006\066\u02bb\067\u02bc\001\002\000\060" +
    "\004\047\006\055\007\062\010\070\011\130\012\076\020" +
    "\101\021\067\022\037\036\063\037\064\041\075\042\102" +
    "\064\u02c1\066\uff2b\067\u02bf\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\052\004\047" +
    "\006\055\007\062\010\070\011\130\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\054\004\047\006\055\007\062\010\070\011\204" +
    "\012\076\020\101\021\067\022\037\036\063\037\064\041" +
    "\075\042\102\070\u02be\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\102\074\001\002\000\060\004\ufe9a\006" +
    "\ufe9a\007\ufe9a\010\ufe9a\011\ufe9a\012\ufe9a\020\ufe9a\021\ufe9a" +
    "\022\ufe9a\026\ufe9a\036\ufe9a\037\ufe9a\041\ufe9a\042\ufe9a\043" +
    "\ufe9a\070\ufe9a\074\ufe9a\075\ufe9a\076\ufe9a\077\ufe9a\100\ufe9a" +
    "\101\ufe9a\102\ufe9a\001\002\000\052\004\047\006\055\007" +
    "\062\010\070\011\130\012\076\020\101\021\067\022\037" +
    "\036\063\037\064\041\075\042\102\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\074\001\002\000\054" +
    "\004\047\006\055\007\062\010\070\011\204\012\076\020" +
    "\101\021\067\022\037\036\063\037\064\041\075\042\102" +
    "\070\u02c2\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\060\004\ufe91\006\ufe91\007\ufe91" +
    "\010\ufe91\011\ufe91\012\ufe91\020\ufe91\021\ufe91\022\ufe91\026" +
    "\ufe91\036\ufe91\037\ufe91\041\ufe91\042\ufe91\043\ufe91\070\ufe91" +
    "\074\ufe91\075\ufe91\076\ufe91\077\ufe91\100\ufe91\101\ufe91\102" +
    "\ufe91\001\002\000\060\004\ufe99\006\ufe99\007\ufe99\010\ufe99" +
    "\011\ufe99\012\ufe99\020\ufe99\021\ufe99\022\ufe99\026\ufe99\036" +
    "\ufe99\037\ufe99\041\ufe99\042\ufe99\043\ufe99\070\ufe99\074\ufe99" +
    "\075\ufe99\076\ufe99\077\ufe99\100\ufe99\101\ufe99\102\ufe99\001" +
    "\002\000\054\004\047\006\055\007\062\010\070\011\204" +
    "\012\076\020\101\021\067\022\037\036\063\037\064\041" +
    "\075\042\102\070\u02c4\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\102\074\001\002\000\060\004\ufe9c\006" +
    "\ufe9c\007\ufe9c\010\ufe9c\011\ufe9c\012\ufe9c\020\ufe9c\021\ufe9c" +
    "\022\ufe9c\026\ufe9c\036\ufe9c\037\ufe9c\041\ufe9c\042\ufe9c\043" +
    "\ufe9c\070\ufe9c\074\ufe9c\075\ufe9c\076\ufe9c\077\ufe9c\100\ufe9c" +
    "\101\ufe9c\102\ufe9c\001\002\000\052\004\047\006\055\007" +
    "\062\010\070\011\130\012\076\020\101\021\067\022\037" +
    "\036\063\037\064\041\075\042\102\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\074\001\002\000\054" +
    "\004\047\006\055\007\062\010\070\011\204\012\076\020" +
    "\101\021\067\022\037\036\063\037\064\041\075\042\102" +
    "\070\u02c7\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\060\004\ufe98\006\ufe98\007\ufe98" +
    "\010\ufe98\011\ufe98\012\ufe98\020\ufe98\021\ufe98\022\ufe98\026" +
    "\ufe98\036\ufe98\037\ufe98\041\ufe98\042\ufe98\043\ufe98\070\ufe98" +
    "\074\ufe98\075\ufe98\076\ufe98\077\ufe98\100\ufe98\101\ufe98\102" +
    "\ufe98\001\002\000\046\023\u0183\024\u0189\032\u0191\046\u018d" +
    "\053\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060\u0186\061" +
    "\u0185\062\u018f\063\u0188\065\u0181\102\u014f\103\u014b\104\u0184" +
    "\105\u0187\001\002\000\046\023\u0183\024\u0189\032\u0191\046" +
    "\u018d\053\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060\u0186" +
    "\061\u0185\062\u018f\063\u0188\065\u02ca\102\u014f\103\u014b\104" +
    "\u0184\105\u0187\001\002\000\050\023\u0183\024\u0189\032\u0191" +
    "\046\u018d\053\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060" +
    "\u0186\061\u0185\062\u018f\063\u0188\065\u0181\066\u02ce\102\u014f" +
    "\103\u014b\104\u0184\105\u0187\001\002\000\004\066\u02cc\001" +
    "\002\000\004\064\u02cd\001\002\000\060\004\ufe93\006\ufe93" +
    "\007\ufe93\010\ufe93\011\ufe93\012\ufe93\020\ufe93\021\ufe93\022" +
    "\ufe93\026\ufe93\036\ufe93\037\ufe93\041\ufe93\042\ufe93\043\ufe93" +
    "\070\ufe93\074\ufe93\075\ufe93\076\ufe93\077\ufe93\100\ufe93\101" +
    "\ufe93\102\ufe93\001\002\000\004\064\u02d3\001\002\000\006" +
    "\064\u02d1\066\u02d0\001\002\000\064\004\ufe96\006\ufe96\007" +
    "\ufe96\010\ufe96\011\ufe96\012\ufe96\020\ufe96\021\ufe96\022\ufe96" +
    "\026\ufe96\036\ufe96\037\ufe96\041\ufe96\042\ufe96\043\ufe96\064" +
    "\u02d2\066\uff2b\070\ufe96\074\ufe96\075\ufe96\076\ufe96\077\ufe96" +
    "\100\ufe96\101\ufe96\102\ufe96\001\002\000\060\004\ufe95\006" +
    "\ufe95\007\ufe95\010\ufe95\011\ufe95\012\ufe95\020\ufe95\021\ufe95" +
    "\022\ufe95\026\ufe95\036\ufe95\037\ufe95\041\ufe95\042\ufe95\043" +
    "\ufe95\070\ufe95\074\ufe95\075\ufe95\076\ufe95\077\ufe95\100\ufe95" +
    "\101\ufe95\102\ufe95\001\002\000\060\004\ufe97\006\ufe97\007" +
    "\ufe97\010\ufe97\011\ufe97\012\ufe97\020\ufe97\021\ufe97\022\ufe97" +
    "\026\ufe97\036\ufe97\037\ufe97\041\ufe97\042\ufe97\043\ufe97\070" +
    "\ufe97\074\ufe97\075\ufe97\076\ufe97\077\ufe97\100\ufe97\101\ufe97" +
    "\102\ufe97\001\002\000\060\004\ufe94\006\ufe94\007\ufe94\010" +
    "\ufe94\011\ufe94\012\ufe94\020\ufe94\021\ufe94\022\ufe94\026\ufe94" +
    "\036\ufe94\037\ufe94\041\ufe94\042\ufe94\043\ufe94\070\ufe94\074" +
    "\ufe94\075\ufe94\076\ufe94\077\ufe94\100\ufe94\101\ufe94\102\ufe94" +
    "\001\002\000\004\066\u02d5\001\002\000\004\064\u02d6\001" +
    "\002\000\060\004\ufe92\006\ufe92\007\ufe92\010\ufe92\011\ufe92" +
    "\012\ufe92\020\ufe92\021\ufe92\022\ufe92\026\ufe92\036\ufe92\037" +
    "\ufe92\041\ufe92\042\ufe92\043\ufe92\070\ufe92\074\ufe92\075\ufe92" +
    "\076\ufe92\077\ufe92\100\ufe92\101\ufe92\102\ufe92\001\002\000" +
    "\004\065\u02d8\001\002\000\046\023\u0183\024\u0189\032\u0191" +
    "\046\u018d\053\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060" +
    "\u0186\061\u0185\062\u018f\063\u0188\065\u0181\102\u014f\103\u014b" +
    "\104\u0184\105\u0187\001\002\000\004\066\u02da\001\002\000" +
    "\004\064\u02db\001\002\000\060\004\ufe90\006\ufe90\007\ufe90" +
    "\010\ufe90\011\ufe90\012\ufe90\020\ufe90\021\ufe90\022\ufe90\026" +
    "\ufe90\036\ufe90\037\ufe90\041\ufe90\042\ufe90\043\ufe90\070\ufe90" +
    "\074\ufe90\075\ufe90\076\ufe90\077\ufe90\100\ufe90\101\ufe90\102" +
    "\ufe90\001\002\000\050\023\u0183\024\u0189\032\u0191\046\u018d" +
    "\053\u018b\054\u0192\055\u018a\056\u0193\057\u018e\060\u0186\061" +
    "\u0185\062\u018f\063\u0188\065\u0181\066\u02b9\102\u014f\103\u014b" +
    "\104\u0184\105\u0187\001\002\000\006\066\u02de\067\u02bc\001" +
    "\002\000\056\004\047\006\055\007\062\010\070\011\130" +
    "\012\076\020\101\021\067\022\037\036\063\037\064\041" +
    "\075\042\102\066\uff2b\067\u02bf\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\102\074\001\002\000\046\023" +
    "\u0183\024\u0189\032\u0191\046\u018d\053\u018b\054\u0192\055\u018a" +
    "\056\u0193\057\u018e\060\u0186\061\u0185\062\u018f\063\u0188\065" +
    "\u0181\102\u014f\103\u014b\104\u0184\105\u0187\001\002\000\004" +
    "\066\u02e1\001\002\000\004\067\u02e2\001\002\000\052\004" +
    "\047\006\055\007\062\010\070\011\130\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\054\004\047\006\055\007\062\010\070\011" +
    "\204\012\076\020\101\021\067\022\037\036\063\037\064" +
    "\041\075\042\102\070\u02e4\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\062\004\ufee0" +
    "\005\u02e5\006\ufee0\007\ufee0\010\ufee0\011\ufee0\012\ufee0\020" +
    "\ufee0\021\ufee0\022\ufee0\026\ufee0\036\ufee0\037\ufee0\041\ufee0" +
    "\042\ufee0\043\ufee0\070\ufee0\074\ufee0\075\ufee0\076\ufee0\077" +
    "\ufee0\100\ufee0\101\ufee0\102\ufee0\001\002\000\004\067\u02e6" +
    "\001\002\000\052\004\047\006\055\007\062\010\070\011" +
    "\130\012\076\020\101\021\067\022\037\036\063\037\064" +
    "\041\075\042\102\074\011\075\016\076\007\077\020\100" +
    "\013\101\022\102\074\001\002\000\054\004\047\006\055" +
    "\007\062\010\070\011\204\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\070\u02e8\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\060\004\ufedd\006\ufedd\007\ufedd\010\ufedd\011\ufedd" +
    "\012\ufedd\020\ufedd\021\ufedd\022\ufedd\026\ufedd\036\ufedd\037" +
    "\ufedd\041\ufedd\042\ufedd\043\ufedd\070\ufedd\074\ufedd\075\ufedd" +
    "\076\ufedd\077\ufedd\100\ufedd\101\ufedd\102\ufedd\001\002\000" +
    "\006\066\u02ea\067\u02eb\001\002\000\056\004\047\006\055" +
    "\007\062\010\070\011\130\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\066\uff2b\067\u02f2" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\052\004\047\006\055\007\062\010\070" +
    "\011\130\012\076\020\101\021\067\022\037\036\063\037" +
    "\064\041\075\042\102\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\102\074\001\002\000\054\004\047\006" +
    "\055\007\062\010\070\011\204\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\070\u02ed\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\062\004\ufedf\005\u02ee\006\ufedf\007\ufedf\010" +
    "\ufedf\011\ufedf\012\ufedf\020\ufedf\021\ufedf\022\ufedf\026\ufedf" +
    "\036\ufedf\037\ufedf\041\ufedf\042\ufedf\043\ufedf\070\ufedf\074" +
    "\ufedf\075\ufedf\076\ufedf\077\ufedf\100\ufedf\101\ufedf\102\ufedf" +
    "\001\002\000\004\067\u02ef\001\002\000\052\004\047\006" +
    "\055\007\062\010\070\011\130\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\074\001\002" +
    "\000\054\004\047\006\055\007\062\010\070\011\204\012" +
    "\076\020\101\021\067\022\037\036\063\037\064\041\075" +
    "\042\102\070\u02f1\074\011\075\016\076\007\077\020\100" +
    "\013\101\022\102\074\001\002\000\060\004\ufedc\006\ufedc" +
    "\007\ufedc\010\ufedc\011\ufedc\012\ufedc\020\ufedc\021\ufedc\022" +
    "\ufedc\026\ufedc\036\ufedc\037\ufedc\041\ufedc\042\ufedc\043\ufedc" +
    "\070\ufedc\074\ufedc\075\ufedc\076\ufedc\077\ufedc\100\ufedc\101" +
    "\ufedc\102\ufedc\001\002\000\052\004\047\006\055\007\062" +
    "\010\070\011\130\012\076\020\101\021\067\022\037\036" +
    "\063\037\064\041\075\042\102\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\102\074\001\002\000\054\004" +
    "\047\006\055\007\062\010\070\011\204\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\070" +
    "\u02f4\074\011\075\016\076\007\077\020\100\013\101\022" +
    "\102\074\001\002\000\062\004\ufede\005\u02f5\006\ufede\007" +
    "\ufede\010\ufede\011\ufede\012\ufede\020\ufede\021\ufede\022\ufede" +
    "\026\ufede\036\ufede\037\ufede\041\ufede\042\ufede\043\ufede\070" +
    "\ufede\074\ufede\075\ufede\076\ufede\077\ufede\100\ufede\101\ufede" +
    "\102\ufede\001\002\000\004\067\u02f6\001\002\000\052\004" +
    "\047\006\055\007\062\010\070\011\130\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\054\004\047\006\055\007\062\010\070\011" +
    "\204\012\076\020\101\021\067\022\037\036\063\037\064" +
    "\041\075\042\102\070\u02f8\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\060\004\ufedb" +
    "\006\ufedb\007\ufedb\010\ufedb\011\ufedb\012\ufedb\020\ufedb\021" +
    "\ufedb\022\ufedb\026\ufedb\036\ufedb\037\ufedb\041\ufedb\042\ufedb" +
    "\043\ufedb\070\ufedb\074\ufedb\075\ufedb\076\ufedb\077\ufedb\100" +
    "\ufedb\101\ufedb\102\ufedb\001\002\000\054\004\047\006\055" +
    "\007\062\010\070\011\204\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\070\u02fa\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\064\004\ufee2\005\u02fb\006\ufee2\007\ufee2\010\ufee2" +
    "\011\ufee2\012\ufee2\020\ufee2\021\ufee2\022\ufee2\026\ufee2\036" +
    "\ufee2\037\ufee2\041\ufee2\042\ufee2\043\ufee2\067\u02fc\070\ufee2" +
    "\074\ufee2\075\ufee2\076\ufee2\077\ufee2\100\ufee2\101\ufee2\102" +
    "\ufee2\001\002\000\054\004\047\006\055\007\062\010\070" +
    "\011\130\012\076\020\101\021\067\022\037\036\063\037" +
    "\064\041\075\042\102\067\u02ff\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\102\074\001\002\000\052\004" +
    "\047\006\055\007\062\010\070\011\130\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\054\004\047\006\055\007\062\010\070\011" +
    "\204\012\076\020\101\021\067\022\037\036\063\037\064" +
    "\041\075\042\102\070\u02fe\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\060\004\ufed9" +
    "\006\ufed9\007\ufed9\010\ufed9\011\ufed9\012\ufed9\020\ufed9\021" +
    "\ufed9\022\ufed9\026\ufed9\036\ufed9\037\ufed9\041\ufed9\042\ufed9" +
    "\043\ufed9\070\ufed9\074\ufed9\075\ufed9\076\ufed9\077\ufed9\100" +
    "\ufed9\101\ufed9\102\ufed9\001\002\000\052\004\047\006\055" +
    "\007\062\010\070\011\130\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\074\011\075\016" +
    "\076\007\077\020\100\013\101\022\102\074\001\002\000" +
    "\054\004\047\006\055\007\062\010\070\011\204\012\076" +
    "\020\101\021\067\022\037\036\063\037\064\041\075\042" +
    "\102\070\u0301\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\102\074\001\002\000\060\004\ufeda\006\ufeda\007" +
    "\ufeda\010\ufeda\011\ufeda\012\ufeda\020\ufeda\021\ufeda\022\ufeda" +
    "\026\ufeda\036\ufeda\037\ufeda\041\ufeda\042\ufeda\043\ufeda\070" +
    "\ufeda\074\ufeda\075\ufeda\076\ufeda\077\ufeda\100\ufeda\101\ufeda" +
    "\102\ufeda\001\002\000\054\004\047\006\055\007\062\010" +
    "\070\011\204\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\070\u0303\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\074\001\002\000\060" +
    "\004\ufee1\006\ufee1\007\ufee1\010\ufee1\011\ufee1\012\ufee1\020" +
    "\ufee1\021\ufee1\022\ufee1\026\ufee1\036\ufee1\037\ufee1\041\ufee1" +
    "\042\ufee1\043\ufee1\070\ufee1\074\ufee1\075\ufee1\076\ufee1\077" +
    "\ufee1\100\ufee1\101\ufee1\102\ufee1\001\002\000\026\022\ufee4" +
    "\066\ufee4\067\ufee4\074\ufee4\075\ufee4\076\ufee4\077\ufee4\100" +
    "\ufee4\101\ufee4\104\ufee4\001\002\000\006\046\u0306\064\u0307" +
    "\001\002\000\010\102\u0133\103\u0135\105\u0136\001\002\000" +
    "\102\004\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012\uff82" +
    "\020\uff82\021\uff82\022\uff82\026\uff82\030\uff82\031\uff82\034" +
    "\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82" +
    "\043\uff82\045\uff82\066\uff82\067\uff82\070\uff82\074\uff82\075" +
    "\uff82\076\uff82\077\uff82\100\uff82\101\uff82\102\uff82\104\uff82" +
    "\001\002\000\004\064\u0309\001\002\000\102\004\uff80\006" +
    "\uff80\007\uff80\010\uff80\011\uff80\012\uff80\020\uff80\021\uff80" +
    "\022\uff80\026\uff80\030\uff80\031\uff80\034\uff80\035\uff80\036" +
    "\uff80\037\uff80\040\uff80\041\uff80\042\uff80\043\uff80\045\uff80" +
    "\066\uff80\067\uff80\070\uff80\074\uff80\075\uff80\076\uff80\077" +
    "\uff80\100\uff80\101\uff80\102\uff80\104\uff80\001\002\000\004" +
    "\065\u034d\001\002\000\006\065\u0342\102\u0343\001\002\000" +
    "\004\102\u033d\001\002\000\020\014\u032e\074\011\075\016" +
    "\076\007\077\020\100\013\101\022\001\002\000\004\065" +
    "\u0325\001\002\000\004\065\u031b\001\002\000\004\065\u0311" +
    "\001\002\000\004\102\u0312\001\002\000\004\104\u0313\001" +
    "\002\000\004\103\u0314\001\002\000\006\066\u0315\104\u0316" +
    "\001\002\000\004\064\u031a\001\002\000\004\103\u0317\001" +
    "\002\000\004\066\u0318\001\002\000\004\064\u0319\001\002" +
    "\000\102\004\uff76\006\uff76\007\uff76\010\uff76\011\uff76\012" +
    "\uff76\020\uff76\021\uff76\022\uff76\026\uff76\030\uff76\031\uff76" +
    "\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042" +
    "\uff76\043\uff76\045\uff76\066\uff76\067\uff76\070\uff76\074\uff76" +
    "\075\uff76\076\uff76\077\uff76\100\uff76\101\uff76\102\uff76\104" +
    "\uff76\001\002\000\102\004\uff77\006\uff77\007\uff77\010\uff77" +
    "\011\uff77\012\uff77\020\uff77\021\uff77\022\uff77\026\uff77\030" +
    "\uff77\031\uff77\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77" +
    "\041\uff77\042\uff77\043\uff77\045\uff77\066\uff77\067\uff77\070" +
    "\uff77\074\uff77\075\uff77\076\uff77\077\uff77\100\uff77\101\uff77" +
    "\102\uff77\104\uff77\001\002\000\004\102\u031c\001\002\000" +
    "\004\104\u031d\001\002\000\006\016\u031e\017\u031f\001\002" +
    "\000\012\017\u0324\064\uff56\066\uff56\104\uff56\001\002\000" +
    "\012\016\u0323\064\uff55\066\uff55\104\uff55\001\002\000\004" +
    "\066\u0321\001\002\000\004\064\u0322\001\002\000\102\004" +
    "\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79\020\uff79" +
    "\021\uff79\022\uff79\026\uff79\030\uff79\031\uff79\034\uff79\035" +
    "\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79" +
    "\045\uff79\066\uff79\067\uff79\070\uff79\074\uff79\075\uff79\076" +
    "\uff79\077\uff79\100\uff79\101\uff79\102\uff79\104\uff79\001\002" +
    "\000\010\064\uff53\066\uff53\104\uff53\001\002\000\010\064" +
    "\uff54\066\uff54\104\uff54\001\002\000\004\102\u0326\001\002" +
    "\000\004\104\u0327\001\002\000\004\103\u0328\001\002\000" +
    "\004\104\u0329\001\002\000\004\103\u032a\001\002\000\004" +
    "\066\u032b\001\002\000\004\064\u032c\001\002\000\102\004" +
    "\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78\020\uff78" +
    "\021\uff78\022\uff78\026\uff78\030\uff78\031\uff78\034\uff78\035" +
    "\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78" +
    "\045\uff78\066\uff78\067\uff78\070\uff78\074\uff78\075\uff78\076" +
    "\uff78\077\uff78\100\uff78\101\uff78\102\uff78\104\uff78\001\002" +
    "\000\004\102\u0336\001\002\000\004\102\u032f\001\002\000" +
    "\004\065\u0330\001\002\000\020\022\037\074\011\075\016" +
    "\076\007\077\020\100\013\101\022\001\002\000\024\022" +
    "\037\066\u0332\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\104\043\001\002\000\004\067\u0333\001\002\000" +
    "\052\004\047\006\055\007\062\010\070\011\061\012\076" +
    "\020\101\021\067\022\037\036\063\037\064\041\075\042" +
    "\102\074\011\075\016\076\007\077\020\100\013\101\022" +
    "\102\074\001\002\000\054\004\047\006\055\007\062\010" +
    "\070\011\u0110\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\070\u0335\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\074\001\002\000\102" +
    "\004\uff7a\006\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\020" +
    "\uff7a\021\uff7a\022\uff7a\026\uff7a\030\uff7a\031\uff7a\034\uff7a" +
    "\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\045\uff7a\066\uff7a\067\uff7a\070\uff7a\074\uff7a\075\uff7a" +
    "\076\uff7a\077\uff7a\100\uff7a\101\uff7a\102\uff7a\104\uff7a\001" +
    "\002\000\004\065\u0337\001\002\000\020\022\037\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\001\002\000" +
    "\024\022\037\066\u0339\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\104\043\001\002\000\004\067\u033a\001" +
    "\002\000\052\004\047\006\055\007\062\010\070\011\061" +
    "\012\076\020\101\021\067\022\037\036\063\037\064\041" +
    "\075\042\102\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\102\074\001\002\000\054\004\047\006\055\007" +
    "\062\010\070\011\u0110\012\076\020\101\021\067\022\037" +
    "\036\063\037\064\041\075\042\102\070\u033c\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\074\001\002" +
    "\000\102\004\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012" +
    "\uff7b\020\uff7b\021\uff7b\022\uff7b\026\uff7b\030\uff7b\031\uff7b" +
    "\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042" +
    "\uff7b\043\uff7b\045\uff7b\066\uff7b\067\uff7b\070\uff7b\074\uff7b" +
    "\075\uff7b\076\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b\104" +
    "\uff7b\001\002\000\106\004\uff83\006\uff83\007\uff83\010\uff83" +
    "\011\uff83\012\uff83\020\uff83\021\uff83\022\uff83\026\uff83\030" +
    "\uff83\031\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040\uff83" +
    "\041\uff83\042\uff83\043\uff83\045\uff83\046\u033e\064\u033f\066" +
    "\uff83\067\uff83\070\uff83\074\uff83\075\uff83\076\uff83\077\uff83" +
    "\100\uff83\101\uff83\102\uff83\104\uff83\001\002\000\010\102" +
    "\u0133\103\u0135\105\u0136\001\002\000\102\004\uff85\006\uff85" +
    "\007\uff85\010\uff85\011\uff85\012\uff85\020\uff85\021\uff85\022" +
    "\uff85\026\uff85\030\uff85\031\uff85\034\uff85\035\uff85\036\uff85" +
    "\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\045\uff85\066" +
    "\uff85\067\uff85\070\uff85\074\uff85\075\uff85\076\uff85\077\uff85" +
    "\100\uff85\101\uff85\102\uff85\104\uff85\001\002\000\104\004" +
    "\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\020\uff81" +
    "\021\uff81\022\uff81\026\uff81\030\uff81\031\uff81\034\uff81\035" +
    "\uff81\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81" +
    "\045\uff81\064\u0341\066\uff81\067\uff81\070\uff81\074\uff81\075" +
    "\uff81\076\uff81\077\uff81\100\uff81\101\uff81\102\uff81\104\uff81" +
    "\001\002\000\102\004\uff84\006\uff84\007\uff84\010\uff84\011" +
    "\uff84\012\uff84\020\uff84\021\uff84\022\uff84\026\uff84\030\uff84" +
    "\031\uff84\034\uff84\035\uff84\036\uff84\037\uff84\040\uff84\041" +
    "\uff84\042\uff84\043\uff84\045\uff84\066\uff84\067\uff84\070\uff84" +
    "\074\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101\uff84\102" +
    "\uff84\104\uff84\001\002\000\004\103\u0348\001\002\000\006" +
    "\046\u0344\064\u0345\001\002\000\010\102\u0133\103\u0135\105" +
    "\u0136\001\002\000\102\004\uff7f\006\uff7f\007\uff7f\010\uff7f" +
    "\011\uff7f\012\uff7f\020\uff7f\021\uff7f\022\uff7f\026\uff7f\030" +
    "\uff7f\031\uff7f\034\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f" +
    "\041\uff7f\042\uff7f\043\uff7f\045\uff7f\066\uff7f\067\uff7f\070" +
    "\uff7f\074\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f" +
    "\102\uff7f\104\uff7f\001\002\000\004\064\u0347\001\002\000" +
    "\102\004\uff7e\006\uff7e\007\uff7e\010\uff7e\011\uff7e\012\uff7e" +
    "\020\uff7e\021\uff7e\022\uff7e\026\uff7e\030\uff7e\031\uff7e\034" +
    "\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e" +
    "\043\uff7e\045\uff7e\066\uff7e\067\uff7e\070\uff7e\074\uff7e\075" +
    "\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e\102\uff7e\104\uff7e" +
    "\001\002\000\004\104\u0349\001\002\000\004\102\u034a\001" +
    "\002\000\004\066\u034b\001\002\000\004\064\u034c\001\002" +
    "\000\102\004\uff7d\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012" +
    "\uff7d\020\uff7d\021\uff7d\022\uff7d\026\uff7d\030\uff7d\031\uff7d" +
    "\034\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d\041\uff7d\042" +
    "\uff7d\043\uff7d\045\uff7d\066\uff7d\067\uff7d\070\uff7d\074\uff7d" +
    "\075\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d\104" +
    "\uff7d\001\002\000\004\103\u034e\001\002\000\012\064\uff69" +
    "\066\uff69\103\u034e\104\u0352\001\002\000\004\066\u0350\001" +
    "\002\000\004\064\u0351\001\002\000\102\004\uff7c\006\uff7c" +
    "\007\uff7c\010\uff7c\011\uff7c\012\uff7c\020\uff7c\021\uff7c\022" +
    "\uff7c\026\uff7c\030\uff7c\031\uff7c\034\uff7c\035\uff7c\036\uff7c" +
    "\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\045\uff7c\066" +
    "\uff7c\067\uff7c\070\uff7c\074\uff7c\075\uff7c\076\uff7c\077\uff7c" +
    "\100\uff7c\101\uff7c\102\uff7c\104\uff7c\001\002\000\012\064" +
    "\uff67\066\uff67\103\u034e\104\u0355\001\002\000\006\064\uff66" +
    "\066\uff66\001\002\000\006\064\uff68\066\uff68\001\002\000" +
    "\012\064\uff65\066\uff65\103\u0356\104\u0357\001\002\000\006" +
    "\064\uff62\066\uff62\001\002\000\010\064\uff64\066\uff64\104" +
    "\u0358\001\002\000\006\064\uff63\066\uff63\001\002\000\024" +
    "\002\ufff9\013\014\074\011\075\016\076\007\077\020\100" +
    "\013\101\022\102\032\001\002\000\024\002\ufff8\013\014" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\032\001\002\000\012\046\u0435\065\u0436\102\u0437\103\u0434" +
    "\001\002\000\040\022\uffc5\030\uffc5\031\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\040\uffc5\045\uffc5\070\uffc5\074\uffc5\075\uffc5" +
    "\076\uffc5\077\uffc5\100\uffc5\101\uffc5\001\002\000\036\022" +
    "\037\030\u035f\031\u0366\034\u0360\035\u036a\036\063\040\u0367" +
    "\045\u035b\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\001\002\000\040\022\uffd1\030\uffd1\031\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\040\uffd1\045\uffd1\070\uffd1\074\uffd1\075" +
    "\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\001\002\000\006" +
    "\065\u0411\102\u0412\001\002\000\006\065\u03f3\102\u03f4\001" +
    "\002\000\040\022\037\030\u035f\031\u0366\034\u0360\035\u036a" +
    "\036\063\040\u0367\045\u035b\070\u03eb\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\001\002\000\040\022\uffcf" +
    "\030\uffcf\031\uffcf\034\uffcf\035\uffcf\036\uffcf\040\uffcf\045" +
    "\uffcf\070\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf" +
    "\101\uffcf\001\002\000\040\022\uffcb\030\uffcb\031\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\040\uffcb\045\uffcb\070\uffcb\074\uffcb" +
    "\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\001\002\000" +
    "\040\022\uffc9\030\uffc9\031\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\040\uffc9\045\uffc9\070\uffc9\074\uffc9\075\uffc9\076\uffc9\077" +
    "\uffc9\100\uffc9\101\uffc9\001\002\000\040\022\uffc7\030\uffc7" +
    "\031\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\045\uffc7\070" +
    "\uffc7\074\uffc7\075\uffc7\076\uffc7\077\uffc7\100\uffc7\101\uffc7" +
    "\001\002\000\006\065\u03e0\103\u034e\001\002\000\010\065" +
    "\u0383\102\u014f\103\u014b\001\002\000\040\022\uffcd\030\uffcd" +
    "\031\uffcd\034\uffcd\035\uffcd\036\uffcd\040\uffcd\045\uffcd\070" +
    "\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd" +
    "\001\002\000\040\022\uffc3\030\uffc3\031\uffc3\034\uffc3\035" +
    "\uffc3\036\uffc3\040\uffc3\045\uffc3\070\uffc3\074\uffc3\075\uffc3" +
    "\076\uffc3\077\uffc3\100\uffc3\101\uffc3\001\002\000\006\065" +
    "\u036c\103\u036b\001\002\000\006\065\u037b\104\u037c\001\002" +
    "\000\006\102\u036e\103\u036d\001\002\000\006\066\u0375\104" +
    "\u0376\001\002\000\006\066\u036f\104\u0370\001\002\000\004" +
    "\064\u0374\001\002\000\004\103\u0371\001\002\000\004\066" +
    "\u0372\001\002\000\004\064\u0373\001\002\000\040\022\uff71" +
    "\030\uff71\031\uff71\034\uff71\035\uff71\036\uff71\040\uff71\045" +
    "\uff71\070\uff71\074\uff71\075\uff71\076\uff71\077\uff71\100\uff71" +
    "\101\uff71\001\002\000\040\022\uff73\030\uff73\031\uff73\034" +
    "\uff73\035\uff73\036\uff73\040\uff73\045\uff73\070\uff73\074\uff73" +
    "\075\uff73\076\uff73\077\uff73\100\uff73\101\uff73\001\002\000" +
    "\004\064\u037a\001\002\000\004\102\u0377\001\002\000\004" +
    "\066\u0378\001\002\000\042\022\uff74\030\uff74\031\uff74\034" +
    "\uff74\035\uff74\036\uff74\040\uff74\045\uff74\064\u0379\070\uff74" +
    "\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74\101\uff74\001" +
    "\002\000\040\022\uff75\030\uff75\031\uff75\034\uff75\035\uff75" +
    "\036\uff75\040\uff75\045\uff75\070\uff75\074\uff75\075\uff75\076" +
    "\uff75\077\uff75\100\uff75\101\uff75\001\002\000\040\022\uff72" +
    "\030\uff72\031\uff72\034\uff72\035\uff72\036\uff72\040\uff72\045" +
    "\uff72\070\uff72\074\uff72\075\uff72\076\uff72\077\uff72\100\uff72" +
    "\101\uff72\001\002\000\004\104\u0380\001\002\000\004\102" +
    "\u037d\001\002\000\004\066\u037e\001\002\000\004\064\u037f" +
    "\001\002\000\040\022\uff70\030\uff70\031\uff70\034\uff70\035" +
    "\uff70\036\uff70\040\uff70\045\uff70\070\uff70\074\uff70\075\uff70" +
    "\076\uff70\077\uff70\100\uff70\101\uff70\001\002\000\004\102" +
    "\u0381\001\002\000\004\064\u0382\001\002\000\040\022\uff6f" +
    "\030\uff6f\031\uff6f\034\uff6f\035\uff6f\036\uff6f\040\uff6f\045" +
    "\uff6f\070\uff6f\074\uff6f\075\uff6f\076\uff6f\077\uff6f\100\uff6f" +
    "\101\uff6f\001\002\000\010\102\u014f\103\u014b\105\u0394\001" +
    "\002\000\004\104\u0385\001\002\000\006\102\u014f\103\u014b" +
    "\001\002\000\010\064\u0388\066\u0387\104\u0389\001\002\000" +
    "\004\064\u0393\001\002\000\040\022\ufefe\030\ufefe\031\ufefe" +
    "\034\ufefe\035\ufefe\036\ufefe\040\ufefe\045\ufefe\070\ufefe\074" +
    "\ufefe\075\ufefe\076\ufefe\077\ufefe\100\ufefe\101\ufefe\001\002" +
    "\000\006\102\u014f\103\u014b\001\002\000\010\064\u038c\066" +
    "\u038b\104\u038d\001\002\000\004\064\u0392\001\002\000\040" +
    "\022\ufefb\030\ufefb\031\ufefb\034\ufefb\035\ufefb\036\ufefb\040" +
    "\ufefb\045\ufefb\070\ufefb\074\ufefb\075\ufefb\076\ufefb\077\ufefb" +
    "\100\ufefb\101\ufefb\001\002\000\006\102\u014f\103\u014b\001" +
    "\002\000\006\064\u0390\066\u038f\001\002\000\004\064\u0391" +
    "\001\002\000\040\022\ufef8\030\ufef8\031\ufef8\034\ufef8\035" +
    "\ufef8\036\ufef8\040\ufef8\045\ufef8\070\ufef8\074\ufef8\075\ufef8" +
    "\076\ufef8\077\ufef8\100\ufef8\101\ufef8\001\002\000\040\022" +
    "\ufef9\030\ufef9\031\ufef9\034\ufef9\035\ufef9\036\ufef9\040\ufef9" +
    "\045\ufef9\070\ufef9\074\ufef9\075\ufef9\076\ufef9\077\ufef9\100" +
    "\ufef9\101\ufef9\001\002\000\040\022\ufefc\030\ufefc\031\ufefc" +
    "\034\ufefc\035\ufefc\036\ufefc\040\ufefc\045\ufefc\070\ufefc\074" +
    "\ufefc\075\ufefc\076\ufefc\077\ufefc\100\ufefc\101\ufefc\001\002" +
    "\000\040\022\ufeff\030\ufeff\031\ufeff\034\ufeff\035\ufeff\036" +
    "\ufeff\040\ufeff\045\ufeff\070\ufeff\074\ufeff\075\ufeff\076\ufeff" +
    "\077\ufeff\100\ufeff\101\ufeff\001\002\000\004\104\u03d4\001" +
    "\002\000\010\102\u014f\103\u014b\104\u0397\001\002\000\012" +
    "\066\u03c0\102\u014f\103\u014b\104\u03c2\001\002\000\010\102" +
    "\u014f\103\u014b\105\u0398\001\002\000\006\066\u03b6\104\u03b7" +
    "\001\002\000\014\064\u039b\066\u039a\102\u014f\103\u014b\104" +
    "\u039c\001\002\000\042\022\uff0c\030\uff0c\031\uff0c\034\uff0c" +
    "\035\uff0c\036\uff0c\040\uff0c\045\uff0c\064\u03b5\070\uff0c\074" +
    "\uff0c\075\uff0c\076\uff0c\077\uff0c\100\uff0c\101\uff0c\001\002" +
    "\000\040\022\uff00\030\uff00\031\uff00\034\uff00\035\uff00\036" +
    "\uff00\040\uff00\045\uff00\070\uff00\074\uff00\075\uff00\076\uff00" +
    "\077\uff00\100\uff00\101\uff00\001\002\000\010\102\u014f\103" +
    "\u014b\105\u03a7\001\002\000\012\066\u039e\102\u014f\103\u014b" +
    "\104\u039f\001\002\000\004\064\u03a6\001\002\000\006\102" +
    "\u014f\103\u014b\001\002\000\004\066\u03a1\001\002\000\004" +
    "\064\u03a2\001\002\000\040\022\uff01\030\uff01\031\uff01\034" +
    "\uff01\035\uff01\036\uff01\040\uff01\045\uff01\070\uff01\074\uff01" +
    "\075\uff01\076\uff01\077\uff01\100\uff01\101\uff01\001\002\000" +
    "\004\066\u03a4\001\002\000\004\064\u03a5\001\002\000\040" +
    "\022\uff02\030\uff02\031\uff02\034\uff02\035\uff02\036\uff02\040" +
    "\uff02\045\uff02\070\uff02\074\uff02\075\uff02\076\uff02\077\uff02" +
    "\100\uff02\101\uff02\001\002\000\040\022\uff06\030\uff06\031" +
    "\uff06\034\uff06\035\uff06\036\uff06\040\uff06\045\uff06\070\uff06" +
    "\074\uff06\075\uff06\076\uff06\077\uff06\100\uff06\101\uff06\001" +
    "\002\000\004\104\u03b1\001\002\000\010\064\u03aa\066\u03a9" +
    "\104\u03ab\001\002\000\042\022\uff0b\030\uff0b\031\uff0b\034" +
    "\uff0b\035\uff0b\036\uff0b\040\uff0b\045\uff0b\064\u03b0\070\uff0b" +
    "\074\uff0b\075\uff0b\076\uff0b\077\uff0b\100\uff0b\101\uff0b\001" +
    "\002\000\040\022\ufefd\030\ufefd\031\ufefd\034\ufefd\035\ufefd" +
    "\036\ufefd\040\ufefd\045\ufefd\070\ufefd\074\ufefd\075\ufefd\076" +
    "\ufefd\077\ufefd\100\ufefd\101\ufefd\001\002\000\006\102\u014f" +
    "\103\u014b\001\002\000\006\064\u03ae\066\u03ad\001\002\000" +
    "\042\022\uff0a\030\uff0a\031\uff0a\034\uff0a\035\uff0a\036\uff0a" +
    "\040\uff0a\045\uff0a\064\u03af\070\uff0a\074\uff0a\075\uff0a\076" +
    "\uff0a\077\uff0a\100\uff0a\101\uff0a\001\002\000\040\022\ufefa" +
    "\030\ufefa\031\ufefa\034\ufefa\035\ufefa\036\ufefa\040\ufefa\045" +
    "\ufefa\070\ufefa\074\ufefa\075\ufefa\076\ufefa\077\ufefa\100\ufefa" +
    "\101\ufefa\001\002\000\040\022\uff0d\030\uff0d\031\uff0d\034" +
    "\uff0d\035\uff0d\036\uff0d\040\uff0d\045\uff0d\070\uff0d\074\uff0d" +
    "\075\uff0d\076\uff0d\077\uff0d\100\uff0d\101\uff0d\001\002\000" +
    "\040\022\uff0e\030\uff0e\031\uff0e\034\uff0e\035\uff0e\036\uff0e" +
    "\040\uff0e\045\uff0e\070\uff0e\074\uff0e\075\uff0e\076\uff0e\077" +
    "\uff0e\100\uff0e\101\uff0e\001\002\000\006\102\u014f\103\u014b" +
    "\001\002\000\004\066\u03b3\001\002\000\004\064\u03b4\001" +
    "\002\000\040\022\ufef1\030\ufef1\031\ufef1\034\ufef1\035\ufef1" +
    "\036\ufef1\040\ufef1\045\ufef1\070\ufef1\074\ufef1\075\ufef1\076" +
    "\ufef1\077\ufef1\100\ufef1\101\ufef1\001\002\000\040\022\uff0f" +
    "\030\uff0f\031\uff0f\034\uff0f\035\uff0f\036\uff0f\040\uff0f\045" +
    "\uff0f\070\uff0f\074\uff0f\075\uff0f\076\uff0f\077\uff0f\100\uff0f" +
    "\101\uff0f\001\002\000\004\064\u03bf\001\002\000\006\102" +
    "\u014f\103\u014b\001\002\000\006\066\u03b9\104\u03ba\001\002" +
    "\000\004\064\u03be\001\002\000\006\102\u014f\103\u014b\001" +
    "\002\000\004\066\u03bc\001\002\000\004\064\u03bd\001\002" +
    "\000\040\022\ufef2\030\ufef2\031\ufef2\034\ufef2\035\ufef2\036" +
    "\ufef2\040\ufef2\045\ufef2\070\ufef2\074\ufef2\075\ufef2\076\ufef2" +
    "\077\ufef2\100\ufef2\101\ufef2\001\002\000\040\022\ufef4\030" +
    "\ufef4\031\ufef4\034\ufef4\035\ufef4\036\ufef4\040\ufef4\045\ufef4" +
    "\070\ufef4\074\ufef4\075\ufef4\076\ufef4\077\ufef4\100\ufef4\101" +
    "\ufef4\001\002\000\040\022\ufef6\030\ufef6\031\ufef6\034\ufef6" +
    "\035\ufef6\036\ufef6\040\ufef6\045\ufef6\070\ufef6\074\ufef6\075" +
    "\ufef6\076\ufef6\077\ufef6\100\ufef6\101\ufef6\001\002\000\004" +
    "\064\u03d3\001\002\000\012\066\u03ca\102\u014f\103\u014b\104" +
    "\u03cb\001\002\000\006\102\u014f\103\u014b\001\002\000\006" +
    "\066\u03c4\104\u03c5\001\002\000\004\064\u03c9\001\002\000" +
    "\006\102\u014f\103\u014b\001\002\000\004\066\u03c7\001\002" +
    "\000\004\064\u03c8\001\002\000\040\022\uff05\030\uff05\031" +
    "\uff05\034\uff05\035\uff05\036\uff05\040\uff05\045\uff05\070\uff05" +
    "\074\uff05\075\uff05\076\uff05\077\uff05\100\uff05\101\uff05\001" +
    "\002\000\040\022\uff08\030\uff08\031\uff08\034\uff08\035\uff08" +
    "\036\uff08\040\uff08\045\uff08\070\uff08\074\uff08\075\uff08\076" +
    "\uff08\077\uff08\100\uff08\101\uff08\001\002\000\004\064\u03d2" +
    "\001\002\000\006\102\u014f\103\u014b\001\002\000\004\066" +
    "\u03cd\001\002\000\004\064\u03ce\001\002\000\040\022\uff03" +
    "\030\uff03\031\uff03\034\uff03\035\uff03\036\uff03\040\uff03\045" +
    "\uff03\070\uff03\074\uff03\075\uff03\076\uff03\077\uff03\100\uff03" +
    "\101\uff03\001\002\000\004\066\u03d0\001\002\000\004\064" +
    "\u03d1\001\002\000\040\022\uff04\030\uff04\031\uff04\034\uff04" +
    "\035\uff04\036\uff04\040\uff04\045\uff04\070\uff04\074\uff04\075" +
    "\uff04\076\uff04\077\uff04\100\uff04\101\uff04\001\002\000\040" +
    "\022\uff07\030\uff07\031\uff07\034\uff07\035\uff07\036\uff07\040" +
    "\uff07\045\uff07\070\uff07\074\uff07\075\uff07\076\uff07\077\uff07" +
    "\100\uff07\101\uff07\001\002\000\040\022\uff09\030\uff09\031" +
    "\uff09\034\uff09\035\uff09\036\uff09\040\uff09\045\uff09\070\uff09" +
    "\074\uff09\075\uff09\076\uff09\077\uff09\100\uff09\101\uff09\001" +
    "\002\000\006\102\u014f\103\u014b\001\002\000\006\066\u03d6" +
    "\104\u03d7\001\002\000\004\064\u03df\001\002\000\006\102" +
    "\u014f\103\u014b\001\002\000\006\066\u03d9\104\u03da\001\002" +
    "\000\004\064\u03de\001\002\000\006\102\u014f\103\u014b\001" +
    "\002\000\004\066\u03dc\001\002\000\004\064\u03dd\001\002" +
    "\000\040\022\ufef3\030\ufef3\031\ufef3\034\ufef3\035\ufef3\036" +
    "\ufef3\040\ufef3\045\ufef3\070\ufef3\074\ufef3\075\ufef3\076\ufef3" +
    "\077\ufef3\100\ufef3\101\ufef3\001\002\000\040\022\ufef5\030" +
    "\ufef5\031\ufef5\034\ufef5\035\ufef5\036\ufef5\040\ufef5\045\ufef5" +
    "\070\ufef5\074\ufef5\075\ufef5\076\ufef5\077\ufef5\100\ufef5\101" +
    "\ufef5\001\002\000\040\022\ufef7\030\ufef7\031\ufef7\034\ufef7" +
    "\035\ufef7\036\ufef7\040\ufef7\045\ufef7\070\ufef7\074\ufef7\075" +
    "\ufef7\076\ufef7\077\ufef7\100\ufef7\101\ufef7\001\002\000\006" +
    "\066\u03e4\103\u034e\001\002\000\004\066\u03e2\001\002\000" +
    "\004\064\u03e3\001\002\000\040\022\uff6b\030\uff6b\031\uff6b" +
    "\034\uff6b\035\uff6b\036\uff6b\040\uff6b\045\uff6b\070\uff6b\074" +
    "\uff6b\075\uff6b\076\uff6b\077\uff6b\100\uff6b\101\uff6b\001\002" +
    "\000\004\064\u03e9\001\002\000\006\064\u03e7\066\u03e6\001" +
    "\002\000\042\022\uff6d\030\uff6d\031\uff6d\034\uff6d\035\uff6d" +
    "\036\uff6d\040\uff6d\045\uff6d\064\u03e8\070\uff6d\074\uff6d\075" +
    "\uff6d\076\uff6d\077\uff6d\100\uff6d\101\uff6d\001\002\000\040" +
    "\022\uff6a\030\uff6a\031\uff6a\034\uff6a\035\uff6a\036\uff6a\040" +
    "\uff6a\045\uff6a\070\uff6a\074\uff6a\075\uff6a\076\uff6a\077\uff6a" +
    "\100\uff6a\101\uff6a\001\002\000\040\022\uff6e\030\uff6e\031" +
    "\uff6e\034\uff6e\035\uff6e\036\uff6e\040\uff6e\045\uff6e\070\uff6e" +
    "\074\uff6e\075\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e\001" +
    "\002\000\040\022\uff6c\030\uff6c\031\uff6c\034\uff6c\035\uff6c" +
    "\036\uff6c\040\uff6c\045\uff6c\070\uff6c\074\uff6c\075\uff6c\076" +
    "\uff6c\077\uff6c\100\uff6c\101\uff6c\001\002\000\040\022\uffc4" +
    "\030\uffc4\031\uffc4\034\uffc4\035\uffc4\036\uffc4\040\uffc4\045" +
    "\uffc4\070\uffc4\074\uffc4\075\uffc4\076\uffc4\077\uffc4\100\uffc4" +
    "\101\uffc4\001\002\000\026\002\uffd8\013\uffd8\025\uffd8\074" +
    "\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8" +
    "\001\002\000\040\022\uffd0\030\uffd0\031\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\040\uffd0\045\uffd0\070\uffd0\074\uffd0\075\uffd0" +
    "\076\uffd0\077\uffd0\100\uffd0\101\uffd0\001\002\000\040\022" +
    "\uffce\030\uffce\031\uffce\034\uffce\035\uffce\036\uffce\040\uffce" +
    "\045\uffce\070\uffce\074\uffce\075\uffce\076\uffce\077\uffce\100" +
    "\uffce\101\uffce\001\002\000\040\022\uffca\030\uffca\031\uffca" +
    "\034\uffca\035\uffca\036\uffca\040\uffca\045\uffca\070\uffca\074" +
    "\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca\001\002" +
    "\000\040\022\uffc8\030\uffc8\031\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\040\uffc8\045\uffc8\070\uffc8\074\uffc8\075\uffc8\076\uffc8" +
    "\077\uffc8\100\uffc8\101\uffc8\001\002\000\040\022\uffc6\030" +
    "\uffc6\031\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6\045\uffc6" +
    "\070\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101" +
    "\uffc6\001\002\000\040\022\uffcc\030\uffcc\031\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\040\uffcc\045\uffcc\070\uffcc\074\uffcc\075" +
    "\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc\001\002\000\040" +
    "\022\uffc2\030\uffc2\031\uffc2\034\uffc2\035\uffc2\036\uffc2\040" +
    "\uffc2\045\uffc2\070\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2" +
    "\100\uffc2\101\uffc2\001\002\000\006\102\u03fc\103\u03fb\001" +
    "\002\000\004\104\u03f5\001\002\000\004\103\u03f6\001\002" +
    "\000\004\104\u03f7\001\002\000\004\103\u03f8\001\002\000" +
    "\004\066\u03f9\001\002\000\004\064\u03fa\001\002\000\040" +
    "\022\uff4c\030\uff4c\031\uff4c\034\uff4c\035\uff4c\036\uff4c\040" +
    "\uff4c\045\uff4c\070\uff4c\074\uff4c\075\uff4c\076\uff4c\077\uff4c" +
    "\100\uff4c\101\uff4c\001\002\000\004\104\u0406\001\002\000" +
    "\004\104\u03fd\001\002\000\004\103\u03fe\001\002\000\006" +
    "\066\u03ff\104\u0400\001\002\000\004\064\u0405\001\002\000" +
    "\004\103\u0401\001\002\000\006\064\u0403\066\u0402\001\002" +
    "\000\042\022\uff51\030\uff51\031\uff51\034\uff51\035\uff51\036" +
    "\uff51\040\uff51\045\uff51\064\u0404\070\uff51\074\uff51\075\uff51" +
    "\076\uff51\077\uff51\100\uff51\101\uff51\001\002\000\040\022" +
    "\uff4b\030\uff4b\031\uff4b\034\uff4b\035\uff4b\036\uff4b\040\uff4b" +
    "\045\uff4b\070\uff4b\074\uff4b\075\uff4b\076\uff4b\077\uff4b\100" +
    "\uff4b\101\uff4b\001\002\000\040\022\uff52\030\uff52\031\uff52" +
    "\034\uff52\035\uff52\036\uff52\040\uff52\045\uff52\070\uff52\074" +
    "\uff52\075\uff52\076\uff52\077\uff52\100\uff52\101\uff52\001\002" +
    "\000\040\022\uff4f\030\uff4f\031\uff4f\034\uff4f\035\uff4f\036" +
    "\uff4f\040\uff4f\045\uff4f\070\uff4f\074\uff4f\075\uff4f\076\uff4f" +
    "\077\uff4f\100\uff4f\101\uff4f\001\002\000\006\102\u0408\103" +
    "\u0407\001\002\000\006\066\u040b\104\u040c\001\002\000\004" +
    "\066\u0409\001\002\000\004\064\u040a\001\002\000\040\022" +
    "\uff4d\030\uff4d\031\uff4d\034\uff4d\035\uff4d\036\uff4d\040\uff4d" +
    "\045\uff4d\070\uff4d\074\uff4d\075\uff4d\076\uff4d\077\uff4d\100" +
    "\uff4d\101\uff4d\001\002\000\004\064\u0410\001\002\000\004" +
    "\102\u040d\001\002\000\004\066\u040e\001\002\000\004\064" +
    "\u040f\001\002\000\040\022\uff4e\030\uff4e\031\uff4e\034\uff4e" +
    "\035\uff4e\036\uff4e\040\uff4e\045\uff4e\070\uff4e\074\uff4e\075" +
    "\uff4e\076\uff4e\077\uff4e\100\uff4e\101\uff4e\001\002\000\040" +
    "\022\uff50\030\uff50\031\uff50\034\uff50\035\uff50\036\uff50\040" +
    "\uff50\045\uff50\070\uff50\074\uff50\075\uff50\076\uff50\077\uff50" +
    "\100\uff50\101\uff50\001\002\000\014\016\u031e\017\u031f\066" +
    "\u0419\102\u041a\103\u0418\001\002\000\004\104\u0413\001\002" +
    "\000\006\016\u031e\017\u031f\001\002\000\006\064\u0416\066" +
    "\u0415\001\002\000\004\064\u0417\001\002\000\040\022\uff5d" +
    "\030\uff5d\031\uff5d\034\uff5d\035\uff5d\036\uff5d\040\uff5d\045" +
    "\uff5d\070\uff5d\074\uff5d\075\uff5d\076\uff5d\077\uff5d\100\uff5d" +
    "\101\uff5d\001\002\000\040\022\uff5f\030\uff5f\031\uff5f\034" +
    "\uff5f\035\uff5f\036\uff5f\040\uff5f\045\uff5f\070\uff5f\074\uff5f" +
    "\075\uff5f\076\uff5f\077\uff5f\100\uff5f\101\uff5f\001\002\000" +
    "\004\104\u042e\001\002\000\004\064\u042d\001\002\000\010" +
    "\016\u031e\017\u031f\104\u041e\001\002\000\004\066\u041c\001" +
    "\002\000\004\064\u041d\001\002\000\040\022\uff5b\030\uff5b" +
    "\031\uff5b\034\uff5b\035\uff5b\036\uff5b\040\uff5b\045\uff5b\070" +
    "\uff5b\074\uff5b\075\uff5b\076\uff5b\077\uff5b\100\uff5b\101\uff5b" +
    "\001\002\000\012\016\u031e\017\u031f\102\u014f\103\u014b\001" +
    "\002\000\004\066\u0420\001\002\000\004\064\u0421\001\002" +
    "\000\040\022\uff5c\030\uff5c\031\uff5c\034\uff5c\035\uff5c\036" +
    "\uff5c\040\uff5c\045\uff5c\070\uff5c\074\uff5c\075\uff5c\076\uff5c" +
    "\077\uff5c\100\uff5c\101\uff5c\001\002\000\004\066\u042b\001" +
    "\002\000\010\064\u0425\066\u0424\104\u0426\001\002\000\042" +
    "\022\uff60\030\uff60\031\uff60\034\uff60\035\uff60\036\uff60\040" +
    "\uff60\045\uff60\064\u042a\070\uff60\074\uff60\075\uff60\076\uff60" +
    "\077\uff60\100\uff60\101\uff60\001\002\000\040\022\uff5e\030" +
    "\uff5e\031\uff5e\034\uff5e\035\uff5e\036\uff5e\040\uff5e\045\uff5e" +
    "\070\uff5e\074\uff5e\075\uff5e\076\uff5e\077\uff5e\100\uff5e\101" +
    "\uff5e\001\002\000\004\103\u0427\001\002\000\004\066\u0428" +
    "\001\002\000\004\064\u0429\001\002\000\040\022\uff57\030" +
    "\uff57\031\uff57\034\uff57\035\uff57\036\uff57\040\uff57\045\uff57" +
    "\070\uff57\074\uff57\075\uff57\076\uff57\077\uff57\100\uff57\101" +
    "\uff57\001\002\000\040\022\uff61\030\uff61\031\uff61\034\uff61" +
    "\035\uff61\036\uff61\040\uff61\045\uff61\070\uff61\074\uff61\075" +
    "\uff61\076\uff61\077\uff61\100\uff61\101\uff61\001\002\000\004" +
    "\064\u042c\001\002\000\040\022\uff5a\030\uff5a\031\uff5a\034" +
    "\uff5a\035\uff5a\036\uff5a\040\uff5a\045\uff5a\070\uff5a\074\uff5a" +
    "\075\uff5a\076\uff5a\077\uff5a\100\uff5a\101\uff5a\001\002\000" +
    "\040\022\uff59\030\uff59\031\uff59\034\uff59\035\uff59\036\uff59" +
    "\040\uff59\045\uff59\070\uff59\074\uff59\075\uff59\076\uff59\077" +
    "\uff59\100\uff59\101\uff59\001\002\000\006\016\u031e\017\u031f" +
    "\001\002\000\004\066\u0430\001\002\000\004\064\u0431\001" +
    "\002\000\040\022\uff58\030\uff58\031\uff58\034\uff58\035\uff58" +
    "\036\uff58\040\uff58\045\uff58\070\uff58\074\uff58\075\uff58\076" +
    "\uff58\077\uff58\100\uff58\101\uff58\001\002\000\040\022\037" +
    "\030\u035f\031\u0366\034\u0360\035\u036a\036\063\040\u0367\045" +
    "\u035b\070\u0433\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\001\002\000\026\002\uffd9\013\uffd9\025\uffd9\074" +
    "\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9" +
    "\001\002\000\004\066\u044b\001\002\000\010\065\u0445\102" +
    "\u014f\103\u014b\001\002\000\010\102\u043c\103\u043a\105\u043b" +
    "\001\002\000\004\066\u0438\001\002\000\004\064\u0439\001" +
    "\002\000\040\022\uff37\030\uff37\031\uff37\034\uff37\035\uff37" +
    "\036\uff37\040\uff37\045\uff37\070\uff37\074\uff37\075\uff37\076" +
    "\uff37\077\uff37\100\uff37\101\uff37\001\002\000\006\064\u0443" +
    "\066\u0442\001\002\000\004\066\u0440\001\002\000\006\064" +
    "\u043e\066\u043d\001\002\000\042\022\uff39\030\uff39\031\uff39" +
    "\034\uff39\035\uff39\036\uff39\040\uff39\045\uff39\064\u043f\070" +
    "\uff39\074\uff39\075\uff39\076\uff39\077\uff39\100\uff39\101\uff39" +
    "\001\002\000\040\022\uff36\030\uff36\031\uff36\034\uff36\035" +
    "\uff36\036\uff36\040\uff36\045\uff36\070\uff36\074\uff36\075\uff36" +
    "\076\uff36\077\uff36\100\uff36\101\uff36\001\002\000\040\022" +
    "\uff3b\030\uff3b\031\uff3b\034\uff3b\035\uff3b\036\uff3b\040\uff3b" +
    "\045\uff3b\070\uff3b\074\uff3b\075\uff3b\076\uff3b\077\uff3b\100" +
    "\uff3b\101\uff3b\001\002\000\004\064\u0441\001\002\000\040" +
    "\022\uff33\030\uff33\031\uff33\034\uff33\035\uff33\036\uff33\040" +
    "\uff33\045\uff33\070\uff33\074\uff33\075\uff33\076\uff33\077\uff33" +
    "\100\uff33\101\uff33\001\002\000\042\022\uff38\030\uff38\031" +
    "\uff38\034\uff38\035\uff38\036\uff38\040\uff38\045\uff38\064\u0444" +
    "\070\uff38\074\uff38\075\uff38\076\uff38\077\uff38\100\uff38\101" +
    "\uff38\001\002\000\040\022\uff34\030\uff34\031\uff34\034\uff34" +
    "\035\uff34\036\uff34\040\uff34\045\uff34\070\uff34\074\uff34\075" +
    "\uff34\076\uff34\077\uff34\100\uff34\101\uff34\001\002\000\040" +
    "\022\uff3a\030\uff3a\031\uff3a\034\uff3a\035\uff3a\036\uff3a\040" +
    "\uff3a\045\uff3a\070\uff3a\074\uff3a\075\uff3a\076\uff3a\077\uff3a" +
    "\100\uff3a\101\uff3a\001\002\000\006\102\u014f\103\u014b\001" +
    "\002\000\004\064\u0447\001\002\000\040\022\uff32\030\uff32" +
    "\031\uff32\034\uff32\035\uff32\036\uff32\040\uff32\045\uff32\070" +
    "\uff32\074\uff32\075\uff32\076\uff32\077\uff32\100\uff32\101\uff32" +
    "\001\002\000\004\066\u0449\001\002\000\004\064\u044a\001" +
    "\002\000\040\022\uff31\030\uff31\031\uff31\034\uff31\035\uff31" +
    "\036\uff31\040\uff31\045\uff31\070\uff31\074\uff31\075\uff31\076" +
    "\uff31\077\uff31\100\uff31\101\uff31\001\002\000\004\064\u044c" +
    "\001\002\000\040\022\uff35\030\uff35\031\uff35\034\uff35\035" +
    "\uff35\036\uff35\040\uff35\045\uff35\070\uff35\074\uff35\075\uff35" +
    "\076\uff35\077\uff35\100\uff35\101\uff35\001\002\000\004\065" +
    "\u044e\001\002\000\020\022\037\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\001\002\000\024\022\037\066" +
    "\u0450\074\011\075\016\076\007\077\020\100\013\101\022" +
    "\104\043\001\002\000\004\067\u0451\001\002\000\052\004" +
    "\047\006\055\007\062\010\070\011\061\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\054\004\047\006\055\007\062\010\070\011" +
    "\u0110\012\076\020\101\021\067\022\037\036\063\037\064" +
    "\041\075\042\102\070\u0453\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\032\002\uffe0" +
    "\003\uffe0\013\uffe0\025\uffe0\033\uffe0\074\uffe0\075\uffe0\076" +
    "\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0\001\002\000\004" +
    "\002\ufffe\001\002\000\024\002\uffec\013\014\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\032\001\002" +
    "\000\004\002\ufff3\001\002\000\026\002\uffd7\013\uffd7\025" +
    "\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101\uffd7" +
    "\102\uffd7\001\002\000\026\002\uffd6\013\uffd6\025\uffd6\074" +
    "\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6" +
    "\001\002\000\054\004\047\006\055\007\062\010\070\011" +
    "\204\012\076\020\101\021\067\022\037\026\u045e\036\063" +
    "\037\064\041\075\042\102\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\052\004\047" +
    "\006\055\007\062\010\070\011\130\012\076\020\101\021" +
    "\067\022\037\036\063\037\064\041\075\042\102\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\054\004\047\006\055\007\062\010\070\011\204" +
    "\012\076\020\101\021\067\022\037\026\u045c\036\063\037" +
    "\064\041\075\042\102\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\102\074\001\002\000\032\002\uffd3\003" +
    "\uffd3\013\uffd3\033\uffd3\064\u045d\074\uffd3\075\uffd3\076\uffd3" +
    "\077\uffd3\100\uffd3\101\uffd3\102\uffd3\001\002\000\030\002" +
    "\uffd5\003\uffd5\013\uffd5\033\uffd5\074\uffd5\075\uffd5\076\uffd5" +
    "\077\uffd5\100\uffd5\101\uffd5\102\uffd5\001\002\000\032\002" +
    "\uffd4\003\uffd4\013\uffd4\033\uffd4\064\u045f\074\uffd4\075\uffd4" +
    "\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\001\002\000" +
    "\030\002\uffd2\003\uffd2\013\uffd2\033\uffd2\074\uffd2\075\uffd2" +
    "\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\001\002\000" +
    "\020\022\037\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\001\002\000\006\065\u0475\102\u0476\001\002\000" +
    "\004\065\u046f\001\002\000\004\102\u0464\001\002\000\004" +
    "\065\u0465\001\002\000\022\022\037\066\u0466\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\001\002\000\004" +
    "\067\u046c\001\002\000\024\022\037\066\u0468\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\104\043\001\002" +
    "\000\004\067\u0469\001\002\000\052\004\047\006\055\007" +
    "\062\010\070\011\061\012\076\020\101\021\067\022\037" +
    "\036\063\037\064\041\075\042\102\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\074\001\002\000\054" +
    "\004\047\006\055\007\062\010\070\011\u0110\012\076\020" +
    "\101\021\067\022\037\036\063\037\064\041\075\042\102" +
    "\070\u046b\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\032\002\uffe8\003\uffe8\013\uffe8" +
    "\025\uffe8\033\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\100" +
    "\uffe8\101\uffe8\102\uffe8\001\002\000\052\004\047\006\055" +
    "\007\062\010\070\011\061\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\074\011\075\016" +
    "\076\007\077\020\100\013\101\022\102\074\001\002\000" +
    "\054\004\047\006\055\007\062\010\070\011\u0110\012\076" +
    "\020\101\021\067\022\037\036\063\037\064\041\075\042" +
    "\102\070\u046e\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\102\074\001\002\000\032\002\uffe7\003\uffe7\013" +
    "\uffe7\025\uffe7\033\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7" +
    "\100\uffe7\101\uffe7\102\uffe7\001\002\000\020\022\037\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\001\002" +
    "\000\024\022\037\066\u0471\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\104\043\001\002\000\004\067\u0472" +
    "\001\002\000\052\004\047\006\055\007\062\010\070\011" +
    "\061\012\076\020\101\021\067\022\037\036\063\037\064" +
    "\041\075\042\102\074\011\075\016\076\007\077\020\100" +
    "\013\101\022\102\074\001\002\000\054\004\047\006\055" +
    "\007\062\010\070\011\u0110\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\070\u0474\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\032\002\uffe6\003\uffe6\013\uffe6\025\uffe6\033\uffe6" +
    "\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\101\uffe6\102" +
    "\uffe6\001\002\000\020\022\037\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\001\002\000\022\022\037\065" +
    "\u0477\074\011\075\016\076\007\077\020\100\013\101\022" +
    "\001\002\000\020\022\037\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\001\002\000\026\022\037\066\u047a" +
    "\067\u0479\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\104\043\001\002\000\052\004\047\006\055\007\062" +
    "\010\070\011\061\012\076\020\101\021\067\022\037\036" +
    "\063\037\064\041\075\042\102\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\102\074\001\002\000\004\067" +
    "\u047b\001\002\000\052\004\047\006\055\007\062\010\070" +
    "\011\061\012\076\020\101\021\067\022\037\036\063\037" +
    "\064\041\075\042\102\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\102\074\001\002\000\054\004\047\006" +
    "\055\007\062\010\070\011\u0110\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\070\u047d\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\032\002\uffe3\003\uffe3\013\uffe3\025\uffe3\033" +
    "\uffe3\074\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3" +
    "\102\uffe3\001\002\000\054\004\047\006\055\007\062\010" +
    "\070\011\u0110\012\076\020\101\021\067\022\037\036\063" +
    "\037\064\041\075\042\102\070\u047f\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\074\001\002\000\032" +
    "\002\uffe1\003\uffe1\013\uffe1\025\uffe1\033\uffe1\074\uffe1\075" +
    "\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\001\002" +
    "\000\026\022\037\066\u0482\067\u0481\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\104\043\001\002\000\052" +
    "\004\047\006\055\007\062\010\070\011\061\012\076\020" +
    "\101\021\067\022\037\036\063\037\064\041\075\042\102" +
    "\074\011\075\016\076\007\077\020\100\013\101\022\102" +
    "\074\001\002\000\054\004\047\006\055\007\062\010\070" +
    "\011\061\012\076\020\101\021\067\022\037\036\063\037" +
    "\064\041\075\042\102\067\u0483\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\102\074\001\002\000\052\004" +
    "\047\006\055\007\062\010\070\011\061\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\102\074" +
    "\001\002\000\054\004\047\006\055\007\062\010\070\011" +
    "\u0110\012\076\020\101\021\067\022\037\036\063\037\064" +
    "\041\075\042\102\070\u0485\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\074\001\002\000\032\002\uffde" +
    "\003\uffde\013\uffde\025\uffde\033\uffde\074\uffde\075\uffde\076" +
    "\uffde\077\uffde\100\uffde\101\uffde\102\uffde\001\002\000\054" +
    "\004\047\006\055\007\062\010\070\011\u0110\012\076\020" +
    "\101\021\067\022\037\036\063\037\064\041\075\042\102" +
    "\070\u0487\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\074\001\002\000\032\002\uffe9\003\uffe9\013\uffe9" +
    "\025\uffe9\033\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100" +
    "\uffe9\101\uffe9\102\uffe9\001\002\000\054\004\047\006\055" +
    "\007\062\010\070\011\u0110\012\076\020\101\021\067\022" +
    "\037\036\063\037\064\041\075\042\102\070\u0489\074\011" +
    "\075\016\076\007\077\020\100\013\101\022\102\074\001" +
    "\002\000\032\002\uffe2\003\uffe2\013\uffe2\025\uffe2\033\uffe2" +
    "\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102" +
    "\uffe2\001\002\000\024\022\037\066\u048b\074\011\075\016" +
    "\076\007\077\020\100\013\101\022\104\043\001\002\000" +
    "\004\067\u048c\001\002\000\052\004\047\006\055\007\062" +
    "\010\070\011\061\012\076\020\101\021\067\022\037\036" +
    "\063\037\064\041\075\042\102\074\011\075\016\076\007" +
    "\077\020\100\013\101\022\102\074\001\002\000\054\004" +
    "\047\006\055\007\062\010\070\011\u0110\012\076\020\101" +
    "\021\067\022\037\036\063\037\064\041\075\042\102\070" +
    "\u048e\074\011\075\016\076\007\077\020\100\013\101\022" +
    "\102\074\001\002\000\032\002\uffe5\003\uffe5\013\uffe5\025" +
    "\uffe5\033\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5" +
    "\101\uffe5\102\uffe5\001\002\000\024\022\037\066\u0490\074" +
    "\011\075\016\076\007\077\020\100\013\101\022\104\043" +
    "\001\002\000\004\067\u0491\001\002\000\052\004\047\006" +
    "\055\007\062\010\070\011\061\012\076\020\101\021\067" +
    "\022\037\036\063\037\064\041\075\042\102\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\074\001\002" +
    "\000\054\004\047\006\055\007\062\010\070\011\u0110\012" +
    "\076\020\101\021\067\022\037\036\063\037\064\041\075" +
    "\042\102\070\u0493\074\011\075\016\076\007\077\020\100" +
    "\013\101\022\102\074\001\002\000\032\002\uffe4\003\uffe4" +
    "\013\uffe4\025\uffe4\033\uffe4\074\uffe4\075\uffe4\076\uffe4\077" +
    "\uffe4\100\uffe4\101\uffe4\102\uffe4\001\002\000\030\003\017" +
    "\013\014\025\015\033\026\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\032\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\000\001\002\000\026\002\uffef\013" +
    "\014\025\015\074\011\075\016\076\007\077\020\100\013" +
    "\101\022\102\032\001\002\000\004\002\uffed\001\002\000" +
    "\024\013\014\025\015\074\011\075\016\076\007\077\020" +
    "\100\013\101\022\102\032\001\002\000\024\002\ufffb\013" +
    "\014\074\011\075\016\076\007\077\020\100\013\101\022" +
    "\102\032\001\002\000\024\002\ufff7\013\014\074\011\075" +
    "\016\076\007\077\020\100\013\101\022\102\032\001\002" +
    "\000\024\002\ufff6\013\014\074\011\075\016\076\007\077" +
    "\020\100\013\101\022\102\032\001\002\000\024\002\ufff5" +
    "\013\014\074\011\075\016\076\007\077\020\100\013\101" +
    "\022\102\032\001\002\000\004\002\001\001\002\000\030" +
    "\003\017\013\014\025\015\033\026\074\011\075\016\076" +
    "\007\077\020\100\013\101\022\102\032\001\002\000\004" +
    "\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u049e\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\024\005\007\006\027\007\026" +
    "\010\020\013\023\001\001\000\002\001\001\000\012\006" +
    "\034\007\u0496\010\u0497\013\023\001\001\000\002\001\001" +
    "\000\016\003\u0494\005\007\006\027\007\026\010\020\013" +
    "\023\001\001\000\002\001\001\000\004\013\u0460\001\001" +
    "\000\042\004\131\011\u0458\013\040\023\132\024\135\026" +
    "\123\030\133\031\130\033\124\035\125\041\136\044\120" +
    "\045\117\046\116\054\126\055\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\u0454" +
    "\006\027\007\u0455\013\023\001\001\000\002\001\001\000" +
    "\016\003\u0453\005\007\006\027\007\026\010\020\013\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\u035d\012\u0360\013\040\015\u0361\016\u0367\020\u0362\022\u0363" +
    "\033\u0364\034\u035b\037\u0368\001\001\000\012\005\030\006" +
    "\027\010\032\013\023\001\001\000\002\001\001\000\010" +
    "\006\034\010\u0358\013\023\001\001\000\002\001\001\000" +
    "\010\005\033\006\027\013\023\001\001\000\006\006\034" +
    "\013\023\001\001\000\002\001\001\000\010\004\037\013" +
    "\040\014\041\001\001\000\004\013\u030b\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\043\013\040\001" +
    "\001\000\006\004\u0303\013\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\065\013\040\023\070\024" +
    "\076\026\053\030\071\031\064\033\055\035\056\041\077" +
    "\044\051\045\050\046\047\054\057\055\052\056\072\001" +
    "\001\000\010\036\u02df\040\u0181\053\u018b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\036\u02b3\040\u0181\053\u018b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\131\011\u02a7\013\040" +
    "\023\132\024\135\026\123\030\133\031\130\033\124\035" +
    "\125\041\136\044\120\045\117\046\116\054\126\055\122" +
    "\001\001\000\002\001\001\000\010\036\u026f\040\u0181\053" +
    "\u018b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\u0176\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\u0111\013\040\023\u0112\024\u0114" +
    "\026\u010a\030\u0113\031\u0110\033\u010c\035\u010d\041\u0115\044" +
    "\u0107\045\u0106\046\u0105\054\u010e\055\u0109\001\001\000\002" +
    "\001\001\000\004\040\u015e\001\001\000\004\013\u0157\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u014d" +
    "\001\001\000\002\001\001\000\012\004\037\013\040\014" +
    "\306\024\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\114\032\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\232\001\001" +
    "\000\002\001\001\000\004\027\166\001\001\000\042\004" +
    "\131\011\134\013\040\023\132\024\135\026\123\030\133" +
    "\031\130\033\124\035\125\041\136\044\120\045\117\046" +
    "\116\054\126\055\122\001\001\000\042\004\131\011\161" +
    "\013\040\023\132\024\135\026\123\030\133\031\130\033" +
    "\124\035\125\041\136\044\120\045\117\046\116\054\126" +
    "\055\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\141\013" +
    "\040\023\144\024\154\026\145\030\140\031\143\033\150" +
    "\035\155\041\147\044\152\045\151\046\146\054\142\055" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\131\011\157\013" +
    "\040\023\132\024\135\026\123\030\133\031\130\033\124" +
    "\035\125\041\136\044\120\045\117\046\116\054\126\055" +
    "\122\001\001\000\040\004\141\013\040\023\144\024\154" +
    "\026\145\030\140\031\143\033\150\035\155\041\147\044" +
    "\152\045\151\046\146\054\142\055\137\001\001\000\002" +
    "\001\001\000\040\004\141\013\040\023\144\024\154\026" +
    "\145\030\140\031\143\033\150\035\155\041\147\044\152" +
    "\045\151\046\146\054\142\055\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\205\001\001\000\002" +
    "\001\001\000\042\004\131\011\171\013\040\023\132\024" +
    "\135\026\123\030\133\031\130\033\124\035\125\041\136" +
    "\044\120\045\117\046\116\054\126\055\122\001\001\000" +
    "\042\004\131\011\176\013\040\023\132\024\135\026\123" +
    "\030\133\031\130\033\124\035\125\041\136\044\120\045" +
    "\117\046\116\054\126\055\122\001\001\000\002\001\001" +
    "\000\040\004\141\013\040\023\144\024\154\026\145\030" +
    "\140\031\143\033\150\035\155\041\147\044\152\045\151" +
    "\046\146\054\142\055\137\001\001\000\002\001\001\000" +
    "\042\004\131\011\174\013\040\023\132\024\135\026\123" +
    "\030\133\031\130\033\124\035\125\041\136\044\120\045" +
    "\117\046\116\054\126\055\122\001\001\000\040\004\141" +
    "\013\040\023\144\024\154\026\145\030\140\031\143\033" +
    "\150\035\155\041\147\044\152\045\151\046\146\054\142" +
    "\055\137\001\001\000\002\001\001\000\040\004\141\013" +
    "\040\023\144\024\154\026\145\030\140\031\143\033\150" +
    "\035\155\041\147\044\152\045\151\046\146\054\142\055" +
    "\137\001\001\000\002\001\001\000\042\004\131\011\201" +
    "\013\040\023\132\024\135\026\123\030\133\031\130\033" +
    "\124\035\125\041\136\044\120\045\117\046\116\054\126" +
    "\055\122\001\001\000\040\004\141\013\040\023\144\024" +
    "\154\026\145\030\140\031\143\033\150\035\155\041\147" +
    "\044\152\045\151\046\146\054\142\055\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\131\011\210\013\040\023\132\024\135\026\123\030" +
    "\133\031\130\033\124\035\125\041\136\044\120\045\117" +
    "\046\116\054\126\055\122\001\001\000\042\004\131\011" +
    "\223\013\040\023\132\024\135\026\123\030\133\031\130" +
    "\033\124\035\125\041\136\044\120\045\117\046\116\054" +
    "\126\055\122\001\001\000\042\004\131\011\214\013\040" +
    "\023\132\024\135\026\123\030\133\031\130\033\124\035" +
    "\125\041\136\044\120\045\117\046\116\054\126\055\122" +
    "\001\001\000\040\004\141\013\040\023\144\024\154\026" +
    "\145\030\140\031\143\033\150\035\155\041\147\044\152" +
    "\045\151\046\146\054\142\055\137\001\001\000\002\001" +
    "\001\000\042\004\131\011\221\013\040\023\132\024\135" +
    "\026\123\030\133\031\130\033\124\035\125\041\136\044" +
    "\120\045\117\046\116\054\126\055\122\001\001\000\042" +
    "\004\131\011\216\013\040\023\132\024\135\026\123\030" +
    "\133\031\130\033\124\035\125\041\136\044\120\045\117" +
    "\046\116\054\126\055\122\001\001\000\040\004\141\013" +
    "\040\023\144\024\154\026\145\030\140\031\143\033\150" +
    "\035\155\041\147\044\152\045\151\046\146\054\142\055" +
    "\137\001\001\000\002\001\001\000\040\004\141\013\040" +
    "\023\144\024\154\026\145\030\140\031\143\033\150\035" +
    "\155\041\147\044\152\045\151\046\146\054\142\055\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\141\013\040\023\144\024\154\026\145\030\140\031\143" +
    "\033\150\035\155\041\147\044\152\045\151\046\146\054" +
    "\142\055\137\001\001\000\002\001\001\000\040\004\141" +
    "\013\040\023\144\024\154\026\145\030\140\031\143\033" +
    "\150\035\155\041\147\044\152\045\151\046\146\054\142" +
    "\055\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\131\011\227\013\040\023\132\024\135\026\123" +
    "\030\133\031\130\033\124\035\125\041\136\044\120\045" +
    "\117\046\116\054\126\055\122\001\001\000\040\004\141" +
    "\013\040\023\144\024\154\026\145\030\140\031\143\033" +
    "\150\035\155\041\147\044\152\045\151\046\146\054\142" +
    "\055\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\131\011\235\013\040\023\132\024\135\026\123" +
    "\030\133\031\130\033\124\035\125\041\136\044\120\045" +
    "\117\046\116\054\126\055\122\001\001\000\042\004\131" +
    "\011\247\013\040\023\132\024\135\026\123\030\133\031" +
    "\130\033\124\035\125\041\136\044\120\045\117\046\116" +
    "\054\126\055\122\001\001\000\042\004\131\011\241\013" +
    "\040\023\132\024\135\026\123\030\133\031\130\033\124" +
    "\035\125\041\136\044\120\045\117\046\116\054\126\055" +
    "\122\001\001\000\040\004\141\013\040\023\144\024\154" +
    "\026\145\030\140\031\143\033\150\035\155\041\147\044" +
    "\152\045\151\046\146\054\142\055\137\001\001\000\002" +
    "\001\001\000\042\004\131\011\245\013\040\023\132\024" +
    "\135\026\123\030\133\031\130\033\124\035\125\041\136" +
    "\044\120\045\117\046\116\054\126\055\122\001\001\000" +
    "\042\004\131\011\243\013\040\023\132\024\135\026\123" +
    "\030\133\031\130\033\124\035\125\041\136\044\120\045" +
    "\117\046\116\054\126\055\122\001\001\000\040\004\141" +
    "\013\040\023\144\024\154\026\145\030\140\031\143\033" +
    "\150\035\155\041\147\044\152\045\151\046\146\054\142" +
    "\055\137\001\001\000\002\001\001\000\040\004\141\013" +
    "\040\023\144\024\154\026\145\030\140\031\143\033\150" +
    "\035\155\041\147\044\152\045\151\046\146\054\142\055" +
    "\137\001\001\000\002\001\001\000\040\004\141\013\040" +
    "\023\144\024\154\026\145\030\140\031\143\033\150\035" +
    "\155\041\147\044\152\045\151\046\146\054\142\055\137" +
    "\001\001\000\002\001\001\000\040\004\141\013\040\023" +
    "\144\024\154\026\145\030\140\031\143\033\150\035\155" +
    "\041\147\044\152\045\151\046\146\054\142\055\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\131" +
    "\011\253\013\040\023\132\024\135\026\123\030\133\031" +
    "\130\033\124\035\125\041\136\044\120\045\117\046\116" +
    "\054\126\055\122\001\001\000\040\004\141\013\040\023" +
    "\144\024\154\026\145\030\140\031\143\033\150\035\155" +
    "\041\147\044\152\045\151\046\146\054\142\055\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\114\032\271\001\001\000\004\027\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\131\011\275\013" +
    "\040\023\132\024\135\026\123\030\133\031\130\033\124" +
    "\035\125\041\136\044\120\045\117\046\116\054\126\055" +
    "\122\001\001\000\040\004\141\013\040\023\144\024\154" +
    "\026\145\030\140\031\143\033\150\035\155\041\147\044" +
    "\152\045\151\046\146\054\142\055\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\043\013\040\001\001\000" +
    "\002\001\001\000\006\027\114\032\311\001\001\000\004" +
    "\027\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\131\011\315\013\040\023\132\024\135\026\123" +
    "\030\133\031\130\033\124\035\125\041\136\044\120\045" +
    "\117\046\116\054\126\055\122\001\001\000\040\004\141" +
    "\013\040\023\144\024\154\026\145\030\140\031\143\033" +
    "\150\035\155\041\147\044\152\045\151\046\146\054\142" +
    "\055\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\114\032\321\001\001\000\004\027\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\131\011" +
    "\325\013\040\023\132\024\135\026\123\030\133\031\130" +
    "\033\124\035\125\041\136\044\120\045\117\046\116\054" +
    "\126\055\122\001\001\000\040\004\141\013\040\023\144" +
    "\024\154\026\145\030\140\031\143\033\150\035\155\041" +
    "\147\044\152\045\151\046\146\054\142\055\137\001\001" +
    "\000\002\001\001\000\006\027\114\032\330\001\001\000" +
    "\004\027\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\131\011\334\013\040\023\132\024\135\026" +
    "\123\030\133\031\130\033\124\035\125\041\136\044\120" +
    "\045\117\046\116\054\126\055\122\001\001\000\040\004" +
    "\141\013\040\023\144\024\154\026\145\030\140\031\143" +
    "\033\150\035\155\041\147\044\152\045\151\046\146\054" +
    "\142\055\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\114\032\340\001\001\000\004\027\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\131" +
    "\011\344\013\040\023\132\024\135\026\123\030\133\031" +
    "\130\033\124\035\125\041\136\044\120\045\117\046\116" +
    "\054\126\055\122\001\001\000\040\004\141\013\040\023" +
    "\144\024\154\026\145\030\140\031\143\033\150\035\155" +
    "\041\147\044\152\045\151\046\146\054\142\055\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\114" +
    "\032\350\001\001\000\004\027\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\131\011\354\013\040" +
    "\023\132\024\135\026\123\030\133\031\130\033\124\035" +
    "\125\041\136\044\120\045\117\046\116\054\126\055\122" +
    "\001\001\000\040\004\141\013\040\023\144\024\154\026" +
    "\145\030\140\031\143\033\150\035\155\041\147\044\152" +
    "\045\151\046\146\054\142\055\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\114\032\360\001\001" +
    "\000\004\027\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\131\011\364\013\040\023\132\024\135" +
    "\026\123\030\133\031\130\033\124\035\125\041\136\044" +
    "\120\045\117\046\116\054\126\055\122\001\001\000\040" +
    "\004\141\013\040\023\144\024\154\026\145\030\140\031" +
    "\143\033\150\035\155\041\147\044\152\045\151\046\146" +
    "\054\142\055\137\001\001\000\002\001\001\000\014\051" +
    "\u012c\055\u012f\062\u0130\063\u012e\064\u0131\001\001\000\006" +
    "\027\114\032\377\001\001\000\006\027\114\032\371\001" +
    "\001\000\004\027\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\131\011\375\013\040\023\132\024" +
    "\135\026\123\030\133\031\130\033\124\035\125\041\136" +
    "\044\120\045\117\046\116\054\126\055\122\001\001\000" +
    "\040\004\141\013\040\023\144\024\154\026\145\030\140" +
    "\031\143\033\150\035\155\041\147\044\152\045\151\046" +
    "\146\054\142\055\137\001\001\000\002\001\001\000\004" +
    "\027\166\001\001\000\046\004\065\013\040\023\070\024" +
    "\076\026\053\027\114\030\071\031\064\032\u0103\033\055" +
    "\035\056\041\077\044\051\045\050\046\047\054\057\055" +
    "\052\056\u0104\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\166\001\001\000\040\004\u0111\013\040\023" +
    "\u0112\024\u0114\026\u010a\030\u0113\031\u0110\033\u010c\035\u010d" +
    "\041\u0115\044\u0107\045\u0106\046\u0105\054\u010e\055\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\131\011\u0117\013\040\023" +
    "\132\024\135\026\123\030\133\031\130\033\124\035\125" +
    "\041\136\044\120\045\117\046\116\054\126\055\122\001" +
    "\001\000\040\004\141\013\040\023\144\024\154\026\145" +
    "\030\140\031\143\033\150\035\155\041\147\044\152\045" +
    "\151\046\146\054\142\055\137\001\001\000\002\001\001" +
    "\000\042\004\131\011\u0122\013\040\023\132\024\135\026" +
    "\123\030\133\031\130\033\124\035\125\041\136\044\120" +
    "\045\117\046\116\054\126\055\122\001\001\000\042\004" +
    "\131\011\u011d\013\040\023\132\024\135\026\123\030\133" +
    "\031\130\033\124\035\125\041\136\044\120\045\117\046" +
    "\116\054\126\055\122\001\001\000\002\001\001\000\042" +
    "\004\131\011\u0120\013\040\023\132\024\135\026\123\030" +
    "\133\031\130\033\124\035\125\041\136\044\120\045\117" +
    "\046\116\054\126\055\122\001\001\000\040\004\141\013" +
    "\040\023\144\024\154\026\145\030\140\031\143\033\150" +
    "\035\155\041\147\044\152\045\151\046\146\054\142\055" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\004\141\013\040\023\144\024\154\026\145\030\140\031" +
    "\143\033\150\035\155\041\147\044\152\045\151\046\146" +
    "\054\142\055\137\001\001\000\002\001\001\000\040\004" +
    "\141\013\040\023\144\024\154\026\145\030\140\031\143" +
    "\033\150\035\155\041\147\044\152\045\151\046\146\054" +
    "\142\055\137\001\001\000\002\001\001\000\042\004\131" +
    "\011\u0125\013\040\023\132\024\135\026\123\030\133\031" +
    "\130\033\124\035\125\041\136\044\120\045\117\046\116" +
    "\054\126\055\122\001\001\000\040\004\141\013\040\023" +
    "\144\024\154\026\145\030\140\031\143\033\150\035\155" +
    "\041\147\044\152\045\151\046\146\054\142\055\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\131\011\u012a\013\040\023\132\024\135\026" +
    "\123\030\133\031\130\033\124\035\125\041\136\044\120" +
    "\045\117\046\116\054\126\055\122\001\001\000\040\004" +
    "\141\013\040\023\144\024\154\026\145\030\140\031\143" +
    "\033\150\035\155\041\147\044\152\045\151\046\146\054" +
    "\142\055\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\051\u012c\062\u0140\063\u012e\064\u0131\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\051\u012c\064\u0136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\051\u012c\063\u013f\064\u0131\001" +
    "\001\000\010\051\u012c\063\u013a\064\u0131\001\001\000\002" +
    "\001\001\000\006\051\u012c\064\u013e\001\001\000\006\051" +
    "\u012c\064\u013d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\114\032\u0144\001\001\000\004" +
    "\027\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\004\131\011\u0148\013\040\023\132\024\135\026\123" +
    "\030\133\031\130\033\124\035\125\041\136\044\120\045" +
    "\117\046\116\054\126\055\122\001\001\000\040\004\141" +
    "\013\040\023\144\024\154\026\145\030\140\031\143\033" +
    "\150\035\155\041\147\044\152\045\151\046\146\054\142" +
    "\055\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u0152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\u0169\040\u0168\001\001\000\004\040\u0162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\u01c7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u017e\001\001\000\002\001\001\000\010" +
    "\036\u018f\040\u0181\053\u018b\001\001\000\010\036\u01c4\040" +
    "\u0181\053\u018b\001\001\000\006\040\u01c0\053\u01bf\001\001" +
    "\000\010\036\u01be\040\u0181\053\u018b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\u01bb" +
    "\001\001\000\002\001\001\000\010\036\u01ba\040\u0181\053" +
    "\u018b\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\u01b9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\u0193\001\001\000\004\040\u0197\001" +
    "\001\000\004\053\u0195\001\001\000\010\036\u0196\040\u0181" +
    "\053\u018b\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\057\u019b\060\u0199\061\u019a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\u01a7\057" +
    "\u01a3\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u01ad\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u01b0\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u01b3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\131\011\u01b7\013\040" +
    "\023\132\024\135\026\123\030\133\031\130\033\124\035" +
    "\125\041\136\044\120\045\117\046\116\054\126\055\122" +
    "\001\001\000\040\004\141\013\040\023\144\024\154\026" +
    "\145\030\140\031\143\033\150\035\155\041\147\044\152" +
    "\045\151\046\146\054\142\055\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u01bd" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\040\u01c2\053\u01c1\001\001\000\002\001\001" +
    "\000\004\040\u01c3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\036\u0213" +
    "\040\u0181\053\u018b\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u01ca\001\001\000\002\001\001\000\010" +
    "\036\u01cc\040\u0181\053\u018b\001\001\000\002\001\001\000" +
    "\010\057\u019b\060\u01ce\061\u019a\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\131\011\u01d1\013\040\023" +
    "\132\024\135\026\123\030\133\031\130\033\124\035\125" +
    "\041\136\044\120\045\117\046\116\054\126\055\122\001" +
    "\001\000\040\004\141\013\040\023\144\024\154\026\145" +
    "\030\140\031\143\033\150\035\155\041\147\044\152\045" +
    "\151\046\146\054\142\055\137\001\001\000\002\001\001" +
    "\000\004\040\u0209\001\001\000\004\040\u01d6\001\001\000" +
    "\004\040\u01e0\001\001\000\002\001\001\000\010\036\u01d8" +
    "\040\u0181\053\u018b\001\001\000\002\001\001\000\010\057" +
    "\u019b\060\u01da\061\u019a\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\131\011\u01dd\013\040\023\132\024" +
    "\135\026\123\030\133\031\130\033\124\035\125\041\136" +
    "\044\120\045\117\046\116\054\126\055\122\001\001\000" +
    "\040\004\141\013\040\023\144\024\154\026\145\030\140" +
    "\031\143\033\150\035\155\041\147\044\152\045\151\046" +
    "\146\054\142\055\137\001\001\000\002\001\001\000\010" +
    "\036\u0202\040\u0181\053\u018b\001\001\000\010\036\u01e2\040" +
    "\u0181\053\u018b\001\001\000\010\036\u01ea\040\u0181\053\u018b" +
    "\001\001\000\002\001\001\000\010\057\u019b\060\u01e4\061" +
    "\u019a\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\131\011\u01e7\013\040\023\132\024\135\026\123\030" +
    "\133\031\130\033\124\035\125\041\136\044\120\045\117" +
    "\046\116\054\126\055\122\001\001\000\040\004\141\013" +
    "\040\023\144\024\154\026\145\030\140\031\143\033\150" +
    "\035\155\041\147\044\152\045\151\046\146\054\142\055" +
    "\137\001\001\000\002\001\001\000\010\057\u019b\060\u01fd" +
    "\061\u019a\001\001\000\002\001\001\000\010\057\u019b\060" +
    "\u01ec\061\u019a\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\131\011\u01ef\013\040\023\132\024\135\026" +
    "\123\030\133\031\130\033\124\035\125\041\136\044\120" +
    "\045\117\046\116\054\126\055\122\001\001\000\040\004" +
    "\141\013\040\023\144\024\154\026\145\030\140\031\143" +
    "\033\150\035\155\041\147\044\152\045\151\046\146\054" +
    "\142\055\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\131\011\u01f7\013\040\023\132\024\135\026" +
    "\123\030\133\031\130\033\124\035\125\041\136\044\120" +
    "\045\117\046\116\054\126\055\122\001\001\000\042\004" +
    "\131\011\u01f4\013\040\023\132\024\135\026\123\030\133" +
    "\031\130\033\124\035\125\041\136\044\120\045\117\046" +
    "\116\054\126\055\122\001\001\000\040\004\141\013\040" +
    "\023\144\024\154\026\145\030\140\031\143\033\150\035" +
    "\155\041\147\044\152\045\151\046\146\054\142\055\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\141\013\040\023\144\024\154\026\145\030\140\031\143" +
    "\033\150\035\155\041\147\044\152\045\151\046\146\054" +
    "\142\055\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\131\011\u01fb\013\040\023\132\024\135\026" +
    "\123\030\133\031\130\033\124\035\125\041\136\044\120" +
    "\045\117\046\116\054\126\055\122\001\001\000\040\004" +
    "\141\013\040\023\144\024\154\026\145\030\140\031\143" +
    "\033\150\035\155\041\147\044\152\045\151\046\146\054" +
    "\142\055\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\131\011\u0200\013\040\023" +
    "\132\024\135\026\123\030\133\031\130\033\124\035\125" +
    "\041\136\044\120\045\117\046\116\054\126\055\122\001" +
    "\001\000\040\004\141\013\040\023\144\024\154\026\145" +
    "\030\140\031\143\033\150\035\155\041\147\044\152\045" +
    "\151\046\146\054\142\055\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\057\u019b\060\u0204\061\u019a\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\131" +
    "\011\u0207\013\040\023\132\024\135\026\123\030\133\031" +
    "\130\033\124\035\125\041\136\044\120\045\117\046\116" +
    "\054\126\055\122\001\001\000\040\004\141\013\040\023" +
    "\144\024\154\026\145\030\140\031\143\033\150\035\155" +
    "\041\147\044\152\045\151\046\146\054\142\055\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\036\u020b" +
    "\040\u0181\053\u018b\001\001\000\002\001\001\000\010\057" +
    "\u019b\060\u020d\061\u019a\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\131\011\u0210\013\040\023\132\024" +
    "\135\026\123\030\133\031\130\033\124\035\125\041\136" +
    "\044\120\045\117\046\116\054\126\055\122\001\001\000" +
    "\040\004\141\013\040\023\144\024\154\026\145\030\140" +
    "\031\143\033\150\035\155\041\147\044\152\045\151\046" +
    "\146\054\142\055\137\001\001\000\002\001\001\000\010" +
    "\057\u019b\060\u0226\061\u019a\001\001\000\002\001\001\000" +
    "\010\057\u019b\060\u0215\061\u019a\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\131\011\u0218\013\040\023" +
    "\132\024\135\026\123\030\133\031\130\033\124\035\125" +
    "\041\136\044\120\045\117\046\116\054\126\055\122\001" +
    "\001\000\040\004\141\013\040\023\144\024\154\026\145" +
    "\030\140\031\143\033\150\035\155\041\147\044\152\045" +
    "\151\046\146\054\142\055\137\001\001\000\002\001\001" +
    "\000\042\004\131\011\u0223\013\040\023\132\024\135\026" +
    "\123\030\133\031\130\033\124\035\125\041\136\044\120" +
    "\045\117\046\116\054\126\055\122\001\001\000\002\001" +
    "\001\000\042\004\131\011\u021d\013\040\023\132\024\135" +
    "\026\123\030\133\031\130\033\124\035\125\041\136\044" +
    "\120\045\117\046\116\054\126\055\122\001\001\000\040" +
    "\004\141\013\040\023\144\024\154\026\145\030\140\031" +
    "\143\033\150\035\155\041\147\044\152\045\151\046\146" +
    "\054\142\055\137\001\001\000\002\001\001\000\042\004" +
    "\131\011\u0220\013\040\023\132\024\135\026\123\030\133" +
    "\031\130\033\124\035\125\041\136\044\120\045\117\046" +
    "\116\054\126\055\122\001\001\000\040\004\141\013\040" +
    "\023\144\024\154\026\145\030\140\031\143\033\150\035" +
    "\155\041\147\044\152\045\151\046\146\054\142\055\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\004" +
    "\141\013\040\023\144\024\154\026\145\030\140\031\143" +
    "\033\150\035\155\041\147\044\152\045\151\046\146\054" +
    "\142\055\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\131\011" +
    "\u0229\013\040\023\132\024\135\026\123\030\133\031\130" +
    "\033\124\035\125\041\136\044\120\045\117\046\116\054" +
    "\126\055\122\001\001\000\040\004\141\013\040\023\144" +
    "\024\154\026\145\030\140\031\143\033\150\035\155\041" +
    "\147\044\152\045\151\046\146\054\142\055\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u022f\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u0232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u025a\001\001" +
    "\000\004\040\u023d\001\001\000\002\001\001\000\004\040" +
    "\u0241\001\001\000\002\001\001\000\004\040\u024f\001\001" +
    "\000\004\040\u0245\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u0249\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u0255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\u025d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\036\u0272\040\u0181\053" +
    "\u018b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\131\011\u02af\013\040\023\132\024" +
    "\135\026\123\030\133\031\130\033\124\035\125\041\136" +
    "\044\120\045\117\046\116\054\126\055\122\001\001\000" +
    "\040\004\141\013\040\023\144\024\154\026\145\030\140" +
    "\031\143\033\150\035\155\041\147\044\152\045\151\046" +
    "\146\054\142\055\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\036\u02ab\040\u0181\053\u018b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\004\141\013\040\023\144\024\154\026" +
    "\145\030\140\031\143\033\150\035\155\041\147\044\152" +
    "\045\151\046\146\054\142\055\137\001\001\000\002\001" +
    "\001\000\010\036\u02b3\040\u0181\053\u018b\001\001\000\010" +
    "\036\u02b9\040\u0181\053\u018b\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\004\131\011\u02b6\013\040\023\132" +
    "\024\135\026\123\030\133\031\130\033\124\035\125\041" +
    "\136\044\120\045\117\046\116\054\126\055\122\001\001" +
    "\000\040\004\141\013\040\023\144\024\154\026\145\030" +
    "\140\031\143\033\150\035\155\041\147\044\152\045\151" +
    "\046\146\054\142\055\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\131\011\u02bf" +
    "\013\040\023\132\024\135\026\123\030\133\031\130\033" +
    "\124\035\125\041\136\044\120\045\117\046\116\054\126" +
    "\055\122\001\001\000\042\004\131\011\u02bc\013\040\023" +
    "\132\024\135\026\123\030\133\031\130\033\124\035\125" +
    "\041\136\044\120\045\117\046\116\054\126\055\122\001" +
    "\001\000\040\004\141\013\040\023\144\024\154\026\145" +
    "\030\140\031\143\033\150\035\155\041\147\044\152\045" +
    "\151\046\146\054\142\055\137\001\001\000\002\001\001" +
    "\000\042\004\131\011\u02c2\013\040\023\132\024\135\026" +
    "\123\030\133\031\130\033\124\035\125\041\136\044\120" +
    "\045\117\046\116\054\126\055\122\001\001\000\040\004" +
    "\141\013\040\023\144\024\154\026\145\030\140\031\143" +
    "\033\150\035\155\041\147\044\152\045\151\046\146\054" +
    "\142\055\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\004\141\013\040\023\144\024\154\026\145\030" +
    "\140\031\143\033\150\035\155\041\147\044\152\045\151" +
    "\046\146\054\142\055\137\001\001\000\002\001\001\000" +
    "\042\004\131\011\u02c5\013\040\023\132\024\135\026\123" +
    "\030\133\031\130\033\124\035\125\041\136\044\120\045" +
    "\117\046\116\054\126\055\122\001\001\000\040\004\141" +
    "\013\040\023\144\024\154\026\145\030\140\031\143\033" +
    "\150\035\155\041\147\044\152\045\151\046\146\054\142" +
    "\055\137\001\001\000\002\001\001\000\010\036\u02d3\040" +
    "\u0181\053\u018b\001\001\000\010\036\u02ca\040\u0181\053\u018b" +
    "\001\001\000\010\036\u02ce\040\u0181\053\u018b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\036\u02d8\040\u0181\053\u018b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\036\u02dc\040" +
    "\u0181\053\u018b\001\001\000\002\001\001\000\042\004\131" +
    "\011\u02bf\013\040\023\132\024\135\026\123\030\133\031" +
    "\130\033\124\035\125\041\136\044\120\045\117\046\116" +
    "\054\126\055\122\001\001\000\010\036\u02e8\040\u0181\053" +
    "\u018b\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\131\011\u02e2\013\040\023\132\024\135\026\123\030" +
    "\133\031\130\033\124\035\125\041\136\044\120\045\117" +
    "\046\116\054\126\055\122\001\001\000\040\004\141\013" +
    "\040\023\144\024\154\026\145\030\140\031\143\033\150" +
    "\035\155\041\147\044\152\045\151\046\146\054\142\055" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\131\011\u02e6\013\040\023\132\024\135\026\123\030" +
    "\133\031\130\033\124\035\125\041\136\044\120\045\117" +
    "\046\116\054\126\055\122\001\001\000\040\004\141\013" +
    "\040\023\144\024\154\026\145\030\140\031\143\033\150" +
    "\035\155\041\147\044\152\045\151\046\146\054\142\055" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\004\131\011\u02f2\013\040\023\132\024\135\026\123\030" +
    "\133\031\130\033\124\035\125\041\136\044\120\045\117" +
    "\046\116\054\126\055\122\001\001\000\042\004\131\011" +
    "\u02eb\013\040\023\132\024\135\026\123\030\133\031\130" +
    "\033\124\035\125\041\136\044\120\045\117\046\116\054" +
    "\126\055\122\001\001\000\040\004\141\013\040\023\144" +
    "\024\154\026\145\030\140\031\143\033\150\035\155\041" +
    "\147\044\152\045\151\046\146\054\142\055\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\131\011" +
    "\u02ef\013\040\023\132\024\135\026\123\030\133\031\130" +
    "\033\124\035\125\041\136\044\120\045\117\046\116\054" +
    "\126\055\122\001\001\000\040\004\141\013\040\023\144" +
    "\024\154\026\145\030\140\031\143\033\150\035\155\041" +
    "\147\044\152\045\151\046\146\054\142\055\137\001\001" +
    "\000\002\001\001\000\042\004\131\011\u02f8\013\040\023" +
    "\132\024\135\026\123\030\133\031\130\033\124\035\125" +
    "\041\136\044\120\045\117\046\116\054\126\055\122\001" +
    "\001\000\040\004\141\013\040\023\144\024\154\026\145" +
    "\030\140\031\143\033\150\035\155\041\147\044\152\045" +
    "\151\046\146\054\142\055\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\131\011\u02f6\013\040\023" +
    "\132\024\135\026\123\030\133\031\130\033\124\035\125" +
    "\041\136\044\120\045\117\046\116\054\126\055\122\001" +
    "\001\000\040\004\141\013\040\023\144\024\154\026\145" +
    "\030\140\031\143\033\150\035\155\041\147\044\152\045" +
    "\151\046\146\054\142\055\137\001\001\000\002\001\001" +
    "\000\040\004\141\013\040\023\144\024\154\026\145\030" +
    "\140\031\143\033\150\035\155\041\147\044\152\045\151" +
    "\046\146\054\142\055\137\001\001\000\002\001\001\000" +
    "\042\004\131\011\u02ff\013\040\023\132\024\135\026\123" +
    "\030\133\031\130\033\124\035\125\041\136\044\120\045" +
    "\117\046\116\054\126\055\122\001\001\000\042\004\131" +
    "\011\u02fc\013\040\023\132\024\135\026\123\030\133\031" +
    "\130\033\124\035\125\041\136\044\120\045\117\046\116" +
    "\054\126\055\122\001\001\000\040\004\141\013\040\023" +
    "\144\024\154\026\145\030\140\031\143\033\150\035\155" +
    "\041\147\044\152\045\151\046\146\054\142\055\137\001" +
    "\001\000\002\001\001\000\042\004\131\011\u0301\013\040" +
    "\023\132\024\135\026\123\030\133\031\130\033\124\035" +
    "\125\041\136\044\120\045\117\046\116\054\126\055\122" +
    "\001\001\000\040\004\141\013\040\023\144\024\154\026" +
    "\145\030\140\031\143\033\150\035\155\041\147\044\152" +
    "\045\151\046\146\054\142\055\137\001\001\000\002\001" +
    "\001\000\040\004\141\013\040\023\144\024\154\026\145" +
    "\030\140\031\143\033\150\035\155\041\147\044\152\045" +
    "\151\046\146\054\142\055\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u0307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u032c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u031f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\037\013\040\014\u0330\001\001\000\006\004" +
    "\043\013\040\001\001\000\002\001\001\000\042\004\065" +
    "\013\040\023\070\024\076\026\053\030\071\031\064\033" +
    "\055\035\056\041\077\044\051\045\050\046\047\054\057" +
    "\055\052\056\u0333\001\001\000\040\004\u0111\013\040\023" +
    "\u0112\024\u0114\026\u010a\030\u0113\031\u0110\033\u010c\035\u010d" +
    "\041\u0115\044\u0107\045\u0106\046\u0105\054\u010e\055\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\037" +
    "\013\040\014\u0337\001\001\000\006\004\043\013\040\001" +
    "\001\000\002\001\001\000\042\004\065\013\040\023\070" +
    "\024\076\026\053\030\071\031\064\033\055\035\056\041" +
    "\077\044\051\045\050\046\047\054\057\055\052\056\u033a" +
    "\001\001\000\040\004\u0111\013\040\023\u0112\024\u0114\026" +
    "\u010a\030\u0113\031\u0110\033\u010c\035\u010d\041\u0115\044\u0107" +
    "\045\u0106\046\u0105\054\u010e\055\u0109\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u033f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u0345\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\u034e\001\001\000\004\017" +
    "\u0352\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u0353\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\u0359\006\027\013" +
    "\023\001\001\000\006\006\034\013\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\u035d\012\u0431\013" +
    "\040\015\u0361\016\u0367\020\u0362\022\u0363\033\u0364\034\u035b" +
    "\037\u0368\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\u03eb\013\040\015\u03ec\016\u03f0" +
    "\020\u03ed\022\u03ee\033\u03ef\034\u03e9\037\u03f1\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u03e0\001\001\000\004\040\u0383\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\u0394\001\001\000\002" +
    "\001\001\000\004\040\u0385\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u0389\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u038d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u0395\001\001" +
    "\000\004\040\u03c0\001\001\000\004\040\u0398\001\001\000" +
    "\002\001\001\000\004\040\u039c\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u03a7\001\001\000\004\040" +
    "\u039f\001\001\000\002\001\001\000\004\040\u03a2\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\u03ab\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\u03b1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\u03b7\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u03ba\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\u03cb\001\001\000\004\040\u03c2\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u03c5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u03ce\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u03d4\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u03d7\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\u03da\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u03e4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u041a\001" +
    "\001\000\002\001\001\000\004\021\u0413\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\u041e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\u0422\040\u0421\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u042e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\u03eb" +
    "\013\040\015\u03ec\016\u03f0\020\u03ed\022\u03ee\033\u03ef\034" +
    "\u03e9\037\u03f1\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u0445\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u0447\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\037\013\040\014\u044e\001\001\000\006\004" +
    "\043\013\040\001\001\000\002\001\001\000\042\004\065" +
    "\013\040\023\070\024\076\026\053\030\071\031\064\033" +
    "\055\035\056\041\077\044\051\045\050\046\047\054\057" +
    "\055\052\056\u0451\001\001\000\040\004\u0111\013\040\023" +
    "\u0112\024\u0114\026\u010a\030\u0113\031\u0110\033\u010c\035\u010d" +
    "\041\u0115\044\u0107\045\u0106\046\u0105\054\u010e\055\u0109\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\034" +
    "\013\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\141\013\040\023\144\024\154" +
    "\026\145\030\140\031\143\033\150\035\155\041\147\044" +
    "\152\045\151\046\146\054\142\055\137\001\001\000\042" +
    "\004\131\011\u045a\013\040\023\132\024\135\026\123\030" +
    "\133\031\130\033\124\035\125\041\136\044\120\045\117" +
    "\046\116\054\126\055\122\001\001\000\040\004\141\013" +
    "\040\023\144\024\154\026\145\030\140\031\143\033\150" +
    "\035\155\041\147\044\152\045\151\046\146\054\142\055" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\037\013\040\014" +
    "\u048e\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\037\013\040\014" +
    "\u0466\001\001\000\002\001\001\000\006\004\043\013\040" +
    "\001\001\000\002\001\001\000\042\004\065\013\040\023" +
    "\070\024\076\026\053\030\071\031\064\033\055\035\056" +
    "\041\077\044\051\045\050\046\047\054\057\055\052\056" +
    "\u0469\001\001\000\040\004\u0111\013\040\023\u0112\024\u0114" +
    "\026\u010a\030\u0113\031\u0110\033\u010c\035\u010d\041\u0115\044" +
    "\u0107\045\u0106\046\u0105\054\u010e\055\u0109\001\001\000\002" +
    "\001\001\000\042\004\065\013\040\023\070\024\076\026" +
    "\053\030\071\031\064\033\055\035\056\041\077\044\051" +
    "\045\050\046\047\054\057\055\052\056\u046c\001\001\000" +
    "\040\004\u0111\013\040\023\u0112\024\u0114\026\u010a\030\u0113" +
    "\031\u0110\033\u010c\035\u010d\041\u0115\044\u0107\045\u0106\046" +
    "\u0105\054\u010e\055\u0109\001\001\000\002\001\001\000\010" +
    "\004\037\013\040\014\u046f\001\001\000\006\004\043\013" +
    "\040\001\001\000\002\001\001\000\042\004\065\013\040" +
    "\023\070\024\076\026\053\030\071\031\064\033\055\035" +
    "\056\041\077\044\051\045\050\046\047\054\057\055\052" +
    "\056\u0472\001\001\000\040\004\u0111\013\040\023\u0112\024" +
    "\u0114\026\u010a\030\u0113\031\u0110\033\u010c\035\u010d\041\u0115" +
    "\044\u0107\045\u0106\046\u0105\054\u010e\055\u0109\001\001\000" +
    "\002\001\001\000\010\004\037\013\040\014\u0489\001\001" +
    "\000\010\004\037\013\040\014\u0477\001\001\000\010\004" +
    "\037\013\040\014\u047f\001\001\000\006\004\043\013\040" +
    "\001\001\000\042\004\065\013\040\023\070\024\076\026" +
    "\053\030\071\031\064\033\055\035\056\041\077\044\051" +
    "\045\050\046\047\054\057\055\052\056\u047d\001\001\000" +
    "\002\001\001\000\042\004\065\013\040\023\070\024\076" +
    "\026\053\030\071\031\064\033\055\035\056\041\077\044" +
    "\051\045\050\046\047\054\057\055\052\056\u047b\001\001" +
    "\000\040\004\u0111\013\040\023\u0112\024\u0114\026\u010a\030" +
    "\u0113\031\u0110\033\u010c\035\u010d\041\u0115\044\u0107\045\u0106" +
    "\046\u0105\054\u010e\055\u0109\001\001\000\002\001\001\000" +
    "\040\004\u0111\013\040\023\u0112\024\u0114\026\u010a\030\u0113" +
    "\031\u0110\033\u010c\035\u010d\041\u0115\044\u0107\045\u0106\046" +
    "\u0105\054\u010e\055\u0109\001\001\000\002\001\001\000\006" +
    "\004\043\013\040\001\001\000\042\004\065\013\040\023" +
    "\070\024\076\026\053\030\071\031\064\033\055\035\056" +
    "\041\077\044\051\045\050\046\047\054\057\055\052\056" +
    "\u0487\001\001\000\042\004\065\013\040\023\070\024\076" +
    "\026\053\030\071\031\064\033\055\035\056\041\077\044" +
    "\051\045\050\046\047\054\057\055\052\056\u0483\001\001" +
    "\000\042\004\065\013\040\023\070\024\076\026\053\030" +
    "\071\031\064\033\055\035\056\041\077\044\051\045\050" +
    "\046\047\054\057\055\052\056\u0485\001\001\000\040\004" +
    "\u0111\013\040\023\u0112\024\u0114\026\u010a\030\u0113\031\u0110" +
    "\033\u010c\035\u010d\041\u0115\044\u0107\045\u0106\046\u0105\054" +
    "\u010e\055\u0109\001\001\000\002\001\001\000\040\004\u0111" +
    "\013\040\023\u0112\024\u0114\026\u010a\030\u0113\031\u0110\033" +
    "\u010c\035\u010d\041\u0115\044\u0107\045\u0106\046\u0105\054\u010e" +
    "\055\u0109\001\001\000\002\001\001\000\040\004\u0111\013" +
    "\040\023\u0112\024\u0114\026\u010a\030\u0113\031\u0110\033\u010c" +
    "\035\u010d\041\u0115\044\u0107\045\u0106\046\u0105\054\u010e\055" +
    "\u0109\001\001\000\002\001\001\000\006\004\043\013\040" +
    "\001\001\000\002\001\001\000\042\004\065\013\040\023" +
    "\070\024\076\026\053\030\071\031\064\033\055\035\056" +
    "\041\077\044\051\045\050\046\047\054\057\055\052\056" +
    "\u048c\001\001\000\040\004\u0111\013\040\023\u0112\024\u0114" +
    "\026\u010a\030\u0113\031\u0110\033\u010c\035\u010d\041\u0115\044" +
    "\u0107\045\u0106\046\u0105\054\u010e\055\u0109\001\001\000\002" +
    "\001\001\000\006\004\043\013\040\001\001\000\002\001" +
    "\001\000\042\004\065\013\040\023\070\024\076\026\053" +
    "\030\071\031\064\033\055\035\056\041\077\044\051\045" +
    "\050\046\047\054\057\055\052\056\u0491\001\001\000\040" +
    "\004\u0111\013\040\023\u0112\024\u0114\026\u010a\030\u0113\031" +
    "\u0110\033\u010c\035\u010d\041\u0115\044\u0107\045\u0106\046\u0105" +
    "\054\u010e\055\u0109\001\001\000\002\001\001\000\016\003" +
    "\u0495\005\007\006\027\007\026\010\020\013\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\u0498\006" +
    "\027\010\u0499\013\023\001\001\000\002\001\001\000\010" +
    "\006\034\010\u049b\013\023\001\001\000\010\005\u049a\006" +
    "\027\013\023\001\001\000\006\006\034\013\023\001\001" +
    "\000\010\005\u049c\006\027\013\023\001\001\000\006\006" +
    "\034\013\023\001\001\000\002\001\001\000\016\003\u049f" +
    "\005\007\006\027\007\026\010\020\013\023\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    public void syntax_error(Symbol s){
       pnlSalida.textPane.setText(pnlSalida.textPane.getText()+"Error sintáctico en la línea #: "+ s.value+"\n");
       System.out.println("Error R de sintaxis: "+ s.value +" en la Linea "+(s.right+1) );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //pnlSalida.textPane.setText(pnlSalida.textPane.getText()+"Error NR de sintaxis: "+ s.value +" en la Linea " +  (s.left+1)+"\n");
        System.out.println("Error NR de sintaxis: "+ s.value +" en la Linea " + (s.left+1));
    }

    public ArrayList getvar_identificador() { return action_obj.var_identificador; }
    public ArrayList getvar_tipo_dato() { return action_obj.var_tipo_dato; }
    public ArrayList getvar_valor() { return action_obj.var_valor; }
    public ArrayList getvar_err_linea() { return action_obj.err_linea; }
    public ArrayList getvar_err_msj() { return action_obj.err_msj; }
    public ArrayList getvar_err_gramatica() { return action_obj.err_gramatica; }
    public ArrayList getvar_idSemantico() { return action_obj.var_idSem; }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {

//Codigo de acciones vamos a simular atributos heredados con variables globales
    String heredado="";
    String aux="";
    Stack<Display> display = new Stack<>();
    Display tmp;

    // para el semantico
    public ArrayList var_idSem = new ArrayList();
    // para la tabla de variables
    public ArrayList var_identificador = new ArrayList();
    public ArrayList var_tipo_dato = new ArrayList();
    public ArrayList var_valor = new ArrayList();
    // para los errores
    public ArrayList err_linea = new ArrayList();
    public ArrayList err_lexema = new ArrayList();
    public ArrayList err_msj = new ArrayList();
    public ArrayList err_gramatica = new ArrayList();

    public void errores_gramatica (int error){ 
        /*Pedro Id: 3
          Brad Id:  7
          Jacobo:   4    
        */
        switch (error)
        {
        case 71:
            err_gramatica.add(" res_pin par_abre Numero coma Identificador par_cierra <p color=\"#FF0042\">sig_punto_coma</p>");
            break;
        //GRAMATICAS FUNCTION
        case 41:
            err_gramatica.add("res_name Identificador <span color=\"#FF0042\">sig_punto_coma</span><br>ESTRUCTURA_BASICA");
            break;
        case 42:
            err_gramatica.add("res_name <span color=\"#FF0042\">Identificador</span> sig_punto_coma<br>ESTRUCTURA_BASICA");
            break;
        case 43:
            err_gramatica.add("<span color=\"#FF0042\">res_name</span> Identificador sig_punto_coma<br>ESTRUCTURA_BASICA");
            break;
        case 44:
            err_gramatica.add("res_name <span color=\"#FF0042\">Identificador sig_punto_coma</span><br>ESTRUCTURA_BASICA");
            break;
        case 45:
            err_gramatica.add("res_function <span color=\"#FF0042\">TIPO_DATO</span> Identificador par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 46:
            err_gramatica.add("res_function TIPO_DATO <span color=\"#FF0042\">Identificador</span> par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 47:
            err_gramatica.add("res_function <span color=\"#FF0042\">TIPO_DATO Identificador</span> par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 48:
            err_gramatica.add("res_function TIPO_DATO Identificador <span color=\"#FF0042\">par_abre</span> PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 49:
            err_gramatica.add("res_function TIPO_DATO Identificador par_abre PARAMETRO <span color=\"#FF0042\">par_cierra</span> llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 401:
            err_gramatica.add("res_function TIPO_DATO Identificador <span color=\"#FF0042\">par_abre</span> PARAMETRO <span color=\"#FF0042\">par_cierra</span> llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 402:
            err_gramatica.add("<span color=\"#FF0042\">res_function</span> TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 403:
            err_gramatica.add("<span color=\"#FF0042\">res_function TIPO_DATO</span> Identificador par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 404:
            err_gramatica.add("res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra <span color=\"#FF0042\">llave_abre</span> <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        //GRAMATICAS STARTUP
        case 405:
            err_gramatica.add("res_start <span color=\"#FF0042\">sig_punto_coma</span><br>SENTENCIA_STARTUP<br>res_end <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 406:
            err_gramatica.add("res_start sig_punto_coma<br>SENTENCIA_STARTUP<br>res_end <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 407:
            err_gramatica.add("<span color=\"#FF0042\">res_start</span> sig_punto_coma<br>SENTENCIA_STARTUP<br>res_end sig_punto_coma");
            break;
        //GRAMATICAS DISPLAY
        case 408:
            err_gramatica.add("res_display par_abre DISPLAY_PARAMS par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 409:
            err_gramatica.add("res_display par_abre <span color=\"#FF0042\">DISPLAY_PARAMS</span> par_cierra sig_punto_coma");
            break;
        case 410:
            err_gramatica.add("res_display <span color=\"#FF0042\">par_abre</span> DISPLAY_PARAMS par_cierra sig_punto_coma");
            break;
        case 411:
            err_gramatica.add("res_display par_abre DISPLAY_PARAMS <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        //GRAMATICAS TYPE_IO
        case 412:
            err_gramatica.add("res_type par_abre Identificador coma <span color=\"#FF0042\">TYPE_IO</span> par_cierra sig_punto_coma");
            break;
        //GRAMATICAS MAX_VOLT
        case 413:
            err_gramatica.add("res_max_volt par_abre Identificador par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 414:
            err_gramatica.add("res_max_volt par_abre Numero par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 415:
            err_gramatica.add("res_max_volt <span color=\"#FF0042\">par_abre</span> Identificador par_cierra sig_punto_coma");
            break;
        case 416:
            err_gramatica.add("res_max_volt par_abre Identificador <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 417:
            err_gramatica.add("res_max_volt <span color=\"#FF0042\">par_abre</span> Numero par_cierra sig_punto_coma");
            break;
        case 418:
            err_gramatica.add("res_max_volt par_abre Numero <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 419:
            err_gramatica.add("res_max_volt par_abre <span color=\"#FF0042\">Numero</span> par_cierra sig_punto_coma");
            break;
        case 420:
            err_gramatica.add("res_max_volt <span color=\"#FF0042\">par_abre Numero par_cierra sig_punto_coma</span>");
            break;
        //GRAMATICAS OPERADOR CONDICIONAL
        case 421:
            err_gramatica.add("CONDICION ::=<br>VALOR_NUMERICO <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> VALOR_NUMERICO | <br> log_not Identificador <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> CONDICION");
            break;
        //GRAMATICAS IF
        case 422:
            err_gramatica.add(" IF ::=<br>res_if <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 423:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 424:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION par_cierra <span color=\"#FF0042\">llave_abre</span><br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 425:
            err_gramatica.add(" IF ::=<br>res_if <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra res_else llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 426:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra res_else llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 427:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION par_cierra <span color=\"#FF0042\">llave_abre</span><br>SENTENCIA_STARTUP<br>llave_cierra res_else llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 428:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION par_cierra llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra res_else <span color=\"#FF0042\">llave_abre</span><br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 429:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION par_cierra llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra <span color=\"#FF0042\">res_else</span> llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        //GRAMATICAS CASO
        case 430:
            err_gramatica.add("SWITCH_ENTRADAS ::=<br>rel_menor <span color=\"#FF0042\">CASO</span>rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        //GRAMATICAS OPERACION_CONTRACCION
        case 31:
            err_gramatica.add("OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO <span color=\"#FF0042\">sig_punto_coma<span color=\"#FF0042\">");
            break;
        case 32:
            err_gramatica.add("OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> sig_punto_coma");
            break;
        case 33:
            err_gramatica.add("OPERACION_CONTRACCION ::= cIdentificador OPERADOR_ARITMETICO <span color=\"#FF0042\">asi_asignacion<span color=\"#FF0042\"> VALOR_NUMERICO sig_punto_coma");
            break;
        case 34:
            err_gramatica.add("OPERACION_CONTRACCION ::= <span color=\"#FF0042\">Identificador <span color=\"#FF0042\">OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO sig_punto_coma");
            break;
        case 35:
            err_gramatica.add("OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO sig_punto_coma");
            break;
        case 36:
            err_gramatica.add("INCREMENTO ::= ari_suma ari_suma | ari_resta ari_resta");
            break;
        // GRAMATICAS TIPO_DATO_FOR
        case 37:
            err_gramatica.add("TIPO_DATO_FOR ::= tip_int | tip_float | tip_double | tip_tinyint | <span color=\"#FF0042\">tip_boolean<span color=\"#FF0042\"> ");
            break;
        case 38:
            err_gramatica.add("TIPO_DATO_FOR ::= tip_int | tip_float | tip_double | tip_tinyint | <span color=\"#FF0042\">tip_char<span color=\"#FF0042\"> ");
            break;
        // GRAMATICAS FOR
        case 39:
            err_gramatica.add("FOR ::= FOR ::= res_for <span color=\"#FF0042\">par_abre<span color=\"#FF0042\"> TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 310:
            err_gramatica.add("FOR ::= res_for par_abre <span color=\"#FF0042\">TIPO_DATO_FOR<span color=\"#FF0042\"> Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 311:
            err_gramatica.add("FOR ::= res_for par_abre TIPO_DATO_FOR <span color=\"#FF0042\">Identificador<span color=\"#FF0042\"> asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 312:
            err_gramatica.add("FOR ::= res_for par_abre TIPO_DATO_FOR Identificador <span color=\"#FF0042\">asi_asignacion<span color=\"#FF0042\"> VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 313:
            err_gramatica.add("FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 314:
            err_gramatica.add("FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO <span color=\"#FF0042\">sig_punto_coma<span color=\"#FF0042\"> CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 315:
            err_gramatica.add("FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma <span color=\"#FF0042\">CONDICION<span color=\"#FF0042\"> sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 316:
            err_gramatica.add("FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma <span color=\"#FF0042\">METODO_INCREMENTO<span color=\"#FF0042\"> par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 317:
            err_gramatica.add("FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"><br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 318:
            err_gramatica.add("FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "<span color=\"#FF0042\">llave_abre<span color=\"#FF0042\"><br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 319:
            err_gramatica.add("FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp <span color=\"#FF0042\">SENTENCIA_STARTUP<span color=\"#FF0042\"><br>"+ 
                "llave_cierra"); 
            break;
        case 320:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma <span color=\"#FF0042\">CONDICION<span color=\"#FF0042\"> sig_punto_coma METODO_INCREMENTO par_cierra<br>"+
            "llave_abre<br>"+ 
            "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+
            "llave_cierra"); 
            break;
        case 321:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma <span color=\"#FF0042\">METODO_INCREMENTO<span color=\"#FF0042\"> par_cierra<br>"+
            "llave_abre<br>"+ 
            "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+
            "llave_cierra"); 
            break;
        case 322:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"><br>"+
            "llave_abre<br>"+ 
            "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+
            "llave_cierra"); 
            break;
        case 323:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+
            "<span color=\"#FF0042\">llave_abre<span color=\"#FF0042\"><br>"+ 
            "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+
            "llave_cierra"); 
            break; 
        case 324:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+
            "llave_abre<br>"+ 
            "&nbsp&nbsp&nbsp&nbsp <span color=\"#FF0042\">SENTENCIA_STARTUP<span color=\"#FF0042\"><br>"+
            "llave_cierra"); 
            break;   
        //GRAMATICA SLEEP    
        case 325:
            err_gramatica.add("SLEEP ::= res_sleep par_abre VALOR_NUMERICO par_cierra <span color=\"#FF0042\">sig_punto_coma<span color=\"#FF0042\">"); 
            break; 
        case 326:
            err_gramatica.add("SLEEP ::= res_sleep par_abre VALOR_NUMERICO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"> sig_punto_coma"); 
            break; 
        case 327:
            err_gramatica.add("SLEEP ::= res_sleep par_abre <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> par_cierra sig_punto_coma"); 
            break; 
        case 328:
            err_gramatica.add("SLEEP ::= res_sleep <span color=\"#FF0042\">par_abre<span color=\"#FF0042\"> VALOR_NUMERICO par_cierra sig_punto_coma"); 
            break; 
        case 329:
            err_gramatica.add("SLEEP ::= res_sleep <span color=\"#FF0042\">par_abre<span color=\"#FF0042\"> VALOR_NUMERICO par_cierra sig_punto_coma"); 
            break; 
        case 330:
            err_gramatica.add("SLEEP ::= res_sleep <span color=\"#FF0042\">par_abre<span color=\"#FF0042\"> VALOR_NUMERICO par_cierra sig_punto_coma"); 
            break;     
        case 331:
            err_gramatica.add("SLEEP ::= res_sleep par_abre <span color=\"#FF0042\">(VALOR_NUMERICO | EXPRESION)<span color=\"#FF0042\"> par_cierra sig_punto_coma"); 
            break; 
        case 332:
            err_gramatica.add("SLEEP ::= res_sleep par_abre VALOR_NUMERICO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"> sig_punto_coma"); 
            break; 
        case 333:
            err_gramatica.add("SLEEP ::= res_sleep par_abre <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> par_cierra sig_punto_coma"); 
            break;     
        case 334:
            err_gramatica.add("SLEEP ::= res_sleep par_abre <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> par_cierra sig_punto_coma"); 
            break; 
        case 335:
            err_gramatica.add("SLEEP ::= res_sleep par_abre VALOR_NUMERICO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"> sig_punto_coma"); 
            break; 
        }
           
    }





  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // OPERACION_CONTRACCION ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una acción u operación");
        //-err_linea.add(Ç);
        errores_gramatica(35);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // OPERACION_CONTRACCION ::= OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador antes del operador aritmetico");
        //-err_linea.add(Ç);
        errores_gramatica(34);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un signo de asignación");
        //-err_linea.add(Ç);
        errores_gramatica(33);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor numérico");
        //-err_linea.add(Ç);
        errores_gramatica(32);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
        //-err_linea.add(Ç);
        errores_gramatica(31);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // OPERACION_CONTRACCION ::= Identificador INCREMENTO sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // OPERADOR_ARITMETICO ::= ari_division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // OPERADOR_ARITMETICO ::= ari_multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // OPERADOR_ARITMETICO ::= ari_resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // OPERADOR_ARITMETICO ::= ari_suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // INCREMENTO ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Error en la declaración del operador de incremento");
        //-err_linea.add(Ç);
        errores_gramatica(36);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // INCREMENTO ::= ari_resta ari_resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // INCREMENTO ::= ari_suma ari_suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // TIPO_DATO_FOR ::= tip_char 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un tipo de dato numérico");
        //-err_linea.add(Ç);
        errores_gramatica(38);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FOR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // TIPO_DATO_FOR ::= tip_boolean 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un tipo de dato numérico");
        //-err_linea.add(Ç);
        errores_gramatica(37);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FOR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // TIPO_DATO_FOR ::= tip_tinyint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FOR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // TIPO_DATO_FOR ::= tip_double 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FOR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // TIPO_DATO_FOR ::= tip_float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FOR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // TIPO_DATO_FOR ::= tip_int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FOR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // METODO_INCREMENTO ::= OPERACION_CONTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO_INCREMENTO",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // METODO_INCREMENTO ::= Identificador INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO_INCREMENTO",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre llave_abre llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba minimo una instrucción dentro de las llaves del for");
        //-err_linea.add(Ç);
        errores_gramatica(324);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una llave de apertura despues del paréntesis de cierre");
        //-err_linea.add(Ç);
        errores_gramatica(323);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre antes de la primera llave del for");
        //-err_linea.add(Ç);
        errores_gramatica(322);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un operador de incremento dentro de los parametros del for");
        //-err_linea.add(Ç);
        errores_gramatica(321);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // FOR ::= res_for par_abre sig_punto_coma sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una condición dentro de los parametros del for");
        //-err_linea.add(Ç);
        errores_gramatica(320);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre llave_abre llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba minimo una instrucción dentro de las llaves del for");
        //-err_linea.add(Ç);
        errores_gramatica(319);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una llave de apertura despues del paréntesis de cierre");
        //-err_linea.add(Ç);
        errores_gramatica(318);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre antes de la primera llave del for");
        //-err_linea.add(Ç);
        errores_gramatica(317);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un operador de incremento dentro de los parametros del for");
        //-err_linea.add(Ç);
        errores_gramatica(316);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una condición dentro de los parametros del for");
        //-err_linea.add(Ç);
        errores_gramatica(315);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma antes de la condición");
        //-err_linea.add(Ç);
        errores_gramatica(314);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor en el apartado de declaración de variables");
        //-err_linea.add(Ç);
        errores_gramatica(313);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // FOR ::= res_for par_abre TIPO_DATO_FOR Identificador VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el operador de asignación en el apartado de declaración de variables");
        //-err_linea.add(Ç);
        errores_gramatica(312);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // FOR ::= res_for par_abre TIPO_DATO_FOR asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador después del tipo de dato");
        //-err_linea.add(Ç);
        errores_gramatica(311);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // FOR ::= res_for par_abre Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el tipo de dato correspondiente al identificador");
        //-err_linea.add(Ç);
        errores_gramatica(310);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // FOR ::= res_for TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis después de la palabra reservada for");
        //-err_linea.add(Ç);
        errores_gramatica(39);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // SLEEP ::= res_sleep par_abre VALOR_NUMERICO par_abre sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre antes del punto y coma");
        //-err_linea.add(Ç);
        errores_gramatica(335);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // SLEEP ::= res_sleep par_cierra VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura después de la palabra reservada sleep");
        //-err_linea.add(Ç);
        errores_gramatica(334);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // SLEEP ::= res_sleep par_cierra VALOR_NUMERICO par_abre sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura después de la palabra reservada sleep");
        //-err_linea.add(Ç);
        errores_gramatica(333);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // SLEEP ::= res_sleep par_abre VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre después del parámetro");
        //-err_linea.add(Ç);
        errores_gramatica(332);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // SLEEP ::= res_sleep par_abre par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un parámetro");
        //-err_linea.add(Ç);
        errores_gramatica(331);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // SLEEP ::= res_sleep sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura despues de la palabra reservada sleep");
        //-err_linea.add(Ç);
        errores_gramatica(330);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // SLEEP ::= res_sleep par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura despues de la palabra reservada sleep");
        //-err_linea.add(Ç);
        errores_gramatica(329);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // SLEEP ::= res_sleep VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura despues de la palabra reservada sleep");
        //-err_linea.add(Ç);
        errores_gramatica(328);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // SLEEP ::= res_sleep par_abre par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor numérico o identificador como parámetro");
        //-err_linea.add(Ç);
        errores_gramatica(327);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // SLEEP ::= res_sleep par_abre VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre antes del punto y coma");
        //-err_linea.add(Ç);
        errores_gramatica(326);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // SLEEP ::= res_sleep par_abre VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
        //-err_linea.add(Ç);
        errores_gramatica(325);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // SLEEP ::= res_sleep par_abre EXPRESION par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // SLEEP ::= res_sleep par_abre VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // OUT ::= res_out coma cadena_caracter par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura después de la palabra out"); 
        //-err_linea.add(Ç);
        
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // OUT ::= res_out par_abre coma cadena_caracter par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la sentencia display como primer parámetro"); 
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // OUT ::= res_out par_abre res_display cadena_caracter par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una coma"); 
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // OUT ::= res_out par_abre res_display coma par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un parametro entes del paréntesis"); 
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // OUT ::= res_out par_abre res_display coma cadena_caracter sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre antes del punto y coma"); 
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // OUT ::= res_out par_abre res_display coma cadena_caracter par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma"); 
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // OUT ::= res_out Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura después del out"); 
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // OUT ::= res_out par_abre coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un Identificador después del paréntesis de apertura");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // OUT ::= res_out par_abre Identificador VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una coma después del Identificador");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // OUT ::= res_out par_abre Identificador coma coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban dos parametros numéricos");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una coma entre los dos valores numéricos");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO coma par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un parámetro antes del paréntesis de cierre");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // OUT ::= res_out par_abre par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una instrucción completa");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // OUT ::= res_out Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis después del out");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // OUT ::= res_out par_abre coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador después del paréntesis de apertura");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // OUT ::= res_out par_abre Identificador VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una coma despues del identificador");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // OUT ::= res_out par_abre Identificador coma par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un parámetro numérico antes del paréntesis de cierre");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
        //-err_linea.add(Ç);
        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // OUT ::= res_out par_abre res_display coma cadena_caracter par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // IN ::= res_in sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // IN ::= res_in VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // IN ::= res_in par_abre par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un parámetro único");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // IN ::= res_in par_abre VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // IN ::= res_in par_abre VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // IN ::= res_in par_abre VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // OPERADOR ::= ari_multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // OPERADOR ::= ari_suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // OPERADOR ::= ari_resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // OPERADOR ::= ari_division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // OPERADOR ::= OPERADOR_CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // OPERACION_PROC ::= VALOR OPERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_PROC",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // FACTOR ::= ari_resta FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // FACTOR ::= par_abre OPE par_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // FACTOR ::= VALOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 //Obtener variable usadas
        if(id.toString().matches("([(a-z)(A-Z)](\\w)*)")){
            var_idSem.add(id);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // TERM ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // TERM ::= TERM ari_division FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // TERM ::= TERM ari_multiplicacion FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // OPE ::= TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // OPE ::= OPE ari_resta TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // OPE ::= OPE ari_suma TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // EXPRESION ::= Identificador asi_asignacion IN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 //Obtener variables usadas
        var_idSem.add(id);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // EXPRESION ::= Identificador asi_asignacion OPE sig_punto_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 //Obtener variables usadas
        var_idSem.add(id);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // DOWHILE ::= res_do SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una llave de apertura despues de la palabra do");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // DOWHILE ::= res_do llave_abre llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba como minimo una instrucción dentro de las llaves del do while");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP res_while par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una llave de cierre antes del while");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP llave_cierra par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada while");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de apertura");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while par_abre par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un condición dentro del while");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un paréntesis de cierre");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // WHILE ::= res_while par_abre par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba condición antes del bloque de código del while");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // WHILE ::= res_while par_abre CONDICION par_cierra SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura antes del bloque de código del while");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // WHILE ::= res_while par_abre CONDICION llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de la condición");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // WHILE ::= res_while CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura antes de la condición");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // WHILE ::= res_while par_abre CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // CASO ::= Numero coma Identificador 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // CASO ::= cadena_caracter coma cadena_caracter 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // CASO ::= Numero ari_suma Numero 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // CASO ::= Numero ari_suma cadena_caracter 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // CASO ::= cadena_caracter ari_suma cadena_caracter 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // CASO ::= Numero coma Numero 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // CASO ::= Numero Numero 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo número, cadena o valor booleano");
        //-err_linea.add(Ç);
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // CASO ::= res_false 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // CASO ::= res_true 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // CASO ::= cadena_caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // CASO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS CASO SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba que el case a evaluar estuviera entre <> seguido de :");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS rel_menor CASO rel_mayor llave_abre SENTENCIA_STARTUP llave_cierra res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban dos puntos al final del case a evaluar y exit al final del bloque de instrucciones del case");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS rel_menor Identificador rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un número, una cadena o un valor boleando como case a evaluar, no se admiten valores dinámicos");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS rel_menor CASO SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # |Se esperaba > seguida de : al final de case a evaluar");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS rel_menor CASO rel_mayor SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba : antes del bloque de instrucciones del case");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS rel_menor CASO sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba > al final de case a evaluar");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba < al inicio del case a evaluar");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS CASO sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba < al inicio del case a evaluar y > al final del mismo");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // SWITCH_ENTRADAS ::= CASO SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba que el case a evaluar estuviera entre <> seguido de :");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // SWITCH_ENTRADAS ::= rel_menor CASO rel_mayor llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban dos puntos al final del case a evaluar y exit al final del bloque de instrucciones del case");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // SWITCH_ENTRADAS ::= rel_menor Identificador rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un número, una cadena o un valor boleando como case a evaluar, no se admiten valores dinámicos");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // SWITCH_ENTRADAS ::= rel_menor CASO SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # |Se esperaba > seguida de : al final de case a evaluar");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // SWITCH_ENTRADAS ::= rel_menor CASO rel_mayor SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba : antes del bloque de instrucciones del case");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // SWITCH_ENTRADAS ::= rel_menor CASO sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba > al final de case a evaluar");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // SWITCH_ENTRADAS ::= CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba < al inicio del case a evaluar");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // SWITCH_ENTRADAS ::= CASO sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba < al inicio del case a evaluar y > al final del mismo");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS rel_menor CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // SWITCH_ENTRADAS ::= rel_menor CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SWITCH_ENTRADAS sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba palabra reservada default");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SWITCH_ENTRADAS res_default SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba : después de la palabra reservada default");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba al menos una sentencia dentro del default-case");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SENTENCIA_FUNCION res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban entradas validas dentro de la estructura switch");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban entradas dentro de la estructura switch");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // SWITCH ::= res_switch par_abre Identificador par_cierra SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura antes del bloque de entradas de la estructura switch");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // SWITCH ::= res_switch par_abre PARAMETRO par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // SWITCH ::= res_switch par_abre EXPRESION par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // SWITCH ::= res_switch par_abre res_false par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // SWITCH ::= res_switch par_abre res_true par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // SWITCH ::= res_switch par_abre cadena_caracter par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // SWITCH ::= res_switch par_abre Numero par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // SWITCH ::= res_switch par_abre par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // SWITCH ::= res_switch Identificador llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paréntesis encerrando identificador");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // SWITCH ::= res_switch par_abre Identificador llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de la condición");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // SWITCH ::= res_switch Identificador par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada switch");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban entradas validas dentro de la estructura switch");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban entradas dentro de la estructura switch");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // SWITCH ::= res_switch par_abre Identificador par_cierra SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura antes del bloque de entradas de la estructura switch");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // SWITCH ::= res_switch par_abre PARAMETRO par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // SWITCH ::= res_switch par_abre EXPRESION par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // SWITCH ::= res_switch par_abre res_false par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // SWITCH ::= res_switch par_abre res_true par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // SWITCH ::= res_switch par_abre cadena_caracter par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // SWITCH ::= res_switch par_abre Numero par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // SWITCH ::= res_switch par_abre par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador a evaluar encerrado entre paréntesis");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // SWITCH ::= res_switch Identificador llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paréntesis encerrando identificador");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // SWITCH ::= res_switch par_abre Identificador llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de la condición");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // SWITCH ::= res_switch Identificador par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada switch");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // IF ::= res_if par_abre CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba else antes del bloque de código de else");
        //-err_linea.add(Ç);
        errores_gramatica(429);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // IF ::= res_if par_abre CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra res_else SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura antes del bloque de código de else");
        //-err_linea.add(Ç);
        errores_gramatica(428);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // IF ::= res_if par_abre CONDICION par_cierra SENTENCIA_STARTUP llave_cierra res_else llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura antes del bloque de código de if");
        //-err_linea.add(Ç);
        errores_gramatica(427);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // IF ::= res_if par_abre CONDICION llave_abre SENTENCIA_STARTUP llave_cierra res_else llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de la condición");
        //-err_linea.add(Ç);
        errores_gramatica(426);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // IF ::= res_if CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra res_else llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura antes de la condición");
        //-err_linea.add(Ç);
        errores_gramatica(425);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // IF ::= res_if par_abre CONDICION par_cierra SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura antes del bloque de código de if");
        //-err_linea.add(Ç);
        errores_gramatica(424);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // IF ::= res_if par_abre CONDICION llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de la condición");
        //-err_linea.add(Ç);
        errores_gramatica(423);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // IF ::= res_if CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura antes de la condición");
        //-err_linea.add(Ç);
        errores_gramatica(422);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // IF ::= res_if par_abre CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra res_else llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // IF ::= res_if par_abre CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // PARAMETRO ::= PARAMETRO DECLARACION 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban parámetros separados por coma");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // PARAMETRO ::= PARAMETRO coma DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // PARAMETRO ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // VALOR_NUMERICO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_NUMERICO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // VALOR_NUMERICO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_NUMERICO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // VALOR ::= cadena_caracter 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // VALOR ::= Identificador 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // VALOR ::= Numero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // TIPO_DATO ::= tip_char 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // TIPO_DATO ::= tip_double 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // TIPO_DATO ::= tip_float 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // TIPO_DATO ::= tip_boolean 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // TIPO_DATO ::= tip_int 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // TIPO_DATO ::= tip_tinyint 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma cadena_caracter coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // MODE ::= res_model par_abre VALOR_NUMERICO coma cadena_caracter coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // MODE ::= res_model par_abre cadena_caracter coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // MODE ::= res_model par_abre VALOR_NUMERICO coma cadena_caracter coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // MODE ::= res_model par_abre cadena_caracter coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // MODE ::= res_model par_abre VALOR_NUMERICO coma cadena_caracter par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // MODE ::= res_model par_abre cadena_caracter coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban valores numéricos como parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // MODE ::= res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paréntesis encerrando los parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // MODE ::= res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura antes de parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // MODE ::= res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paréntesis encerrando los parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // MODE ::= res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura antes de parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // MODE ::= res_model VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paréntesis encerrando los parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // MODE ::= res_model VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura antes de parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // MODE ::= res_model par_abre VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // MODE ::= res_model par_abre VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // MODE ::= res_model par_abre VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // MODE ::= res_model par_abre VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // MODE ::= res_model par_abre VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // MODE ::= res_model par_abre VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma entre parámetros");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método mode");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método mode");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método mode");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // OPERADOR_CONDICIONAL ::= asi_asignacion 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un operador condicional");
        //-err_li nea.add(Ç);
        errores_gramatica(421);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // OPERADOR_CONDICIONAL ::= coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un operador condicional");
        //-err_li nea.add(Ç);
        errores_gramatica(421);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // OPERADOR_CONDICIONAL ::= rel_menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // OPERADOR_CONDICIONAL ::= rel_menor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // OPERADOR_CONDICIONAL ::= rel_mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // OPERADOR_CONDICIONAL ::= rel_mayor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // OPERADOR_CONDICIONAL ::= rel_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // OPERADOR_CONDICIONAL ::= rel_diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // OPERADOR_CONDICIONAL ::= log_or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // OPERADOR_CONDICIONAL ::= log_and 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // OPERADOR_CONDICIONAL ::= log_xor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // CONDICION ::= cadena_caracter OPERADOR_CONDICIONAL VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una condición válida, no se admiten cadenas");
        //-err_li nea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // CONDICION ::= cadena_caracter OPERADOR_CONDICIONAL cadena_caracter 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una condición válida, no se admiten cadenas");
        //-err_li nea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // CONDICION ::= cadena_caracter 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una condición válida, no se admiten cadenas");
        //-err_li nea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // CONDICION ::= VALOR_NUMERICO OPERADOR_CONDICIONAL OPERADOR_CONDICIONAL VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo operador condicional");
        //-err_li nea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // CONDICION ::= OPERADOR_CONDICIONAL VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor antes del operador condicional");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // CONDICION ::= OPERADOR_CONDICIONAL 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor antes y después del operador condicional");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // CONDICION ::= log_not OPERADOR_CONDICIONAL VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador después de símbolo de negación lógica");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // CONDICION ::= VALOR_NUMERICO VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una condición, imposible comparar valores");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // CONDICION ::= res_true CONDICION 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba a cada condición separada por paréntesis y con un operardor condicional entre ambas");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // CONDICION ::= res_false CONDICION 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba a cada condición separada por paréntesis y con un operardor condicional entre ambas");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // CONDICION ::= VALOR_NUMERICO OPERADOR_CONDICIONAL 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor después del operador condicional");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // CONDICION ::= res_true 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // CONDICION ::= res_false 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // CONDICION ::= VALOR_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // CONDICION ::= log_not Identificador OPERADOR_CONDICIONAL CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // CONDICION ::= log_not Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // CONDICION ::= par_abre CONDICION par_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // CONDICION ::= VALOR_NUMERICO OPERADOR_CONDICIONAL VALOR_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // WAIT ::= res_wait par_abre CONDICION sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de la condición del método wait");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WAIT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // WAIT ::= res_wait CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada wait");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WAIT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // WAIT ::= res_wait par_abre CONDICION par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método sleep");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WAIT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // WAIT ::= res_wait par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WAIT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // MAX_VOLT ::= res_max_volt asi_asignacion par_abre VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor numérico encerrado entre paréntesis, no se admite asignación");
        //-err_linea.add(Ç);
        errores_gramatica(420);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // MAX_VOLT ::= res_max_volt asi_asignacion VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor numérico encerrado entre paréntesis como parámetro único");
        //-err_linea.add(Ç);
        errores_gramatica(420);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // MAX_VOLT ::= res_max_volt par_abre cadena_caracter par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor numérico como parámetro único del método max_volt");
        //-err_linea.add(Ç);
        errores_gramatica(419);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // MAX_VOLT ::= res_max_volt par_abre Numero sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después del parámetro del método max_volt");
        //-err_linea.add(Ç);
        errores_gramatica(418);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // MAX_VOLT ::= res_max_volt Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada max_volt");
        //-err_linea.add(Ç);
        errores_gramatica(417);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // MAX_VOLT ::= res_max_volt par_abre Identificador sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después del parámetro del método max_volt");
        //-err_linea.add(Ç);
        errores_gramatica(416);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // MAX_VOLT ::= res_max_volt Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada max_volt");
        //-err_linea.add(Ç);
        errores_gramatica(415);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // MAX_VOLT ::= res_max_volt par_abre Numero par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método max_volt");
        //-err_linea.add(Ç);
        errores_gramatica(414);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // MAX_VOLT ::= res_max_volt par_abre Identificador par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método max_volt");
        //-err_linea.add(Ç);
        errores_gramatica(413);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // MAX_VOLT ::= res_max_volt par_abre Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // MAX_VOLT ::= res_max_volt par_abre Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // VOLT ::= res_volt par_abre Identificador coma Numero coma Numero sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros del método volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // VOLT ::= res_volt Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // VOLT ::= res_volt par_abre Identificador coma Numero sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros del método volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // VOLT ::= res_volt Identificador coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // VOLT ::= res_volt par_abre Identificador Numero Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba , entre los parámetros del método volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // VOLT ::= res_volt par_abre Identificador Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba , entre los parámetros del método volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // VOLT ::= res_volt par_abre Identificador coma Numero Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba , entre los parámetros del método volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // VOLT ::= res_volt par_abre Identificador Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba , entre los parámetros del método volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // VOLT ::= res_volt par_abre Numero coma Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador como primer parámetro del método volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // VOLT ::= res_volt par_abre Numero coma Identificador coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador como primer parámetro del método volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // VOLT ::= res_volt par_abre Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador como primer parámetro del método volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // VOLT ::= res_volt par_abre Identificador coma Numero coma Numero par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // VOLT ::= res_volt par_abre Identificador coma Numero par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // VOLT ::= res_volt par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // VOLT ::= res_volt par_abre Identificador coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // SCALE ::= res_scale par_abre Identificador coma Numero coma Numero sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros del método scale");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // SCALE ::= res_scale Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada scale");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // SCALE ::= res_scale par_abre Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador del pin como primer parámetro del método scale");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // SCALE ::= res_scale par_abre Numero coma Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador del pin como primer parámetro del método scale");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // SCALE ::= res_scale par_abre Identificador coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban dos parámetros numéricos después del identificador del pin");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // SCALE ::= res_scale par_abre Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador del pin como primer parámetro del método scale");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // SCALE ::= res_scale par_abre Identificador coma Numero coma Numero par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método scale");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // SCALE ::= res_scale par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TYPE_IO ::= res_output res_input 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo parámetro input/output");
        //-err_linea.add(Ç);
        errores_gramatica(412);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_IO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TYPE_IO ::= res_input res_output 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un solo parámetro input/output");
        //-err_linea.add(Ç);
        errores_gramatica(412);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_IO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TYPE_IO ::= res_output 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_IO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TYPE_IO ::= res_input 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_IO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TYPE ::= res_type par_abre Identificador coma TYPE_IO coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban sólo dos parámetros dentro del método type");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TYPE ::= res_type par_abre Numero coma TYPE_IO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador como primer parámetro del método type");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TYPE ::= res_type par_abre par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador y INPUT o OUTPUT como parámetros del método type");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TYPE ::= res_type par_abre Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba INPUT o OUTPUT como segundo parámetro del método type");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TYPE ::= res_type par_abre TYPE_IO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador como primer parámetro del método type");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TYPE ::= res_type par_abre Identificador TYPE_IO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba coma separando los parámetros del método type");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TYPE ::= res_type Identificador coma TYPE_IO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paréntesis encerrando los parámetros del método type");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TYPE ::= res_type par_abre Identificador coma TYPE_IO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros del método type");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TYPE ::= res_type Identificador coma TYPE_IO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después la palabra reservada type");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TYPE ::= res_type par_abre Identificador coma TYPE_IO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método type");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TYPE ::= res_type par_abre Identificador coma TYPE_IO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DISPLAY_PARAMS ::= Numero coma coma Numero 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor entero después de cada coma");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DISPLAY_PARAMS ::= Numero coma coma coma coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor entero después de cada coma");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DISPLAY_PARAMS ::= Numero coma coma coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor entero después de cada coma");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DISPLAY_PARAMS ::= Numero coma coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor entero después de cada coma");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DISPLAY_PARAMS ::= Numero DISPLAY_PARAMS 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba una coma entre cada parámetro");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DISPLAY_PARAMS ::= Numero coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un valor entero después de la coma");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DISPLAY_PARAMS ::= Numero coma DISPLAY_PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DISPLAY_PARAMS ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DISPLAY ::= res_display par_abre DISPLAY_PARAMS sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros del método display");
        //-err_linea.add(Ç);
        errores_gramatica(411);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DISPLAY ::= res_display DISPLAY_PARAMS par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada display");
        //-err_linea.add(Ç);
        errores_gramatica(410);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DISPLAY ::= res_display par_abre par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba número(s) de pin para display como parámetros");
        //-err_linea.add(Ç);
        errores_gramatica(409);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DISPLAY ::= res_display par_abre DISPLAY_PARAMS par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método display");
        //-err_linea.add(Ç);
        errores_gramatica(408);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DISPLAY ::= res_display par_abre DISPLAY_PARAMS par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PIN ::= res_pin Numero par_abre coma Identificador sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros del método pin");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PIN ::= res_pin Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después de la palabra reservada pin");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PIN ::= res_pin par_abre Identificador coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba número de pin como primer parámetro del método pin");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PIN ::= res_pin par_abre Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba identificador de pin después del número de pin");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PIN ::= res_pin par_abre Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba número de pin antes de identificador");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PIN ::= res_pin par_abre Numero coma Identificador par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final del método pin");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // PIN ::= res_pin par_abre Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DECLARACION ::= res_def res_volt par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DECLARACION ::= res_def res_volt par_abre Identificador coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método volt");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DECLARACION ::= res_def res_scale par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método scale");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECLARACION ::= res_def res_type par_abre Identificador coma TYPE_IO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método type");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECLARACION ::= res_def res_function res_void Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis para la creación de funciones");
        //-err_linea.add(Ç); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DECLARACION ::= res_def res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis para la creación de funciones");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DECLARACION ::= res_def res_display par_abre DISPLAY_PARAMS par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método display");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DECLARACION ::= res_def res_pin par_abre Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DECLARACION ::= res_def res_pin Identificador asi_asignacion VALOR sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DECLARACION ::= res_def res_pin Identificador sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DECLARACION ::= TIPO_DATO Identificador asi_asignacion VALOR sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada def al inicio de la declaración");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECLARACION ::= res_def TIPO_DATO Identificador asi_asignacion VALOR 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final de la declaración");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECLARACION ::= TIPO_DATO Identificador sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada def al inicio de la declaración");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARACION ::= res_def TIPO_DATO Identificador 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; al final de la declaración");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECLARACION ::= res_def TIPO_DATO Identificador asi_asignacion VALOR sig_punto_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //vamos a validar cuando aparecen estas expresiones
        System.out.println("tipo: "+ dato + " identificador: "+ id + " valor "+val);
        var_identificador.add(id);
        var_tipo_dato.add(dato);
        var_valor.add(val);        
        System.out.println(var_identificador.size());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECLARACION ::= res_def TIPO_DATO Identificador sig_punto_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //vamos a validar cuando aparecen estas expresiones
        System.out.println("tipo: "+ dato + " identificador: "+ id + " valor null ");
        var_identificador.add(id);
        var_tipo_dato.add(dato);
        var_valor.add(null);
        System.out.println(var_identificador.size());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION OPERADORES_CONTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_FUNCION ::= OPERADORES_CONTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA_FUNCION ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA_FUNCION ::= SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA_FUNCION ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION IN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_FUNCION ::= IN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_FUNCION ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_FUNCION ::= DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_FUNCION ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_FUNCION ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_FUNCION ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_FUNCION ::= res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_FUNCION ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION WAIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_FUNCION ::= WAIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_FUNCION ::= VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP OPERADORES_CONTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_STARTUP ::= OPERADORES_CONTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_STARTUP ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_STARTUP ::= SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_STARTUP ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP IN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_STARTUP ::= IN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_STARTUP ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_STARTUP ::= DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_STARTUP ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_STARTUP ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_STARTUP ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_STARTUP ::= res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_STARTUP ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP WAIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_STARTUP ::= WAIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_STARTUP ::= VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_STARTUP ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG MODE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_CONFIG ::= MODE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG MAX_VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_CONFIG ::= MAX_VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_CONFIG ::= VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG SCALE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_CONFIG ::= SCALE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_CONFIG ::= TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG DISPLAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_CONFIG ::= DISPLAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG PIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_CONFIG ::= PIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_CONFIG ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // STARTUP ::= res_start SENTENCIA_STARTUP res_end sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba punto y coma después de la palabra reservada start");
        //-err_linea.add(Ç);
        errores_gramatica(407);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STARTUP",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // STARTUP ::= res_start sig_punto_coma SENTENCIA_STARTUP res_end 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba punto y coma después de la palabra reservada end");
        //-err_linea.add(Ç);
        errores_gramatica(406);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STARTUP",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // STARTUP ::= res_start SENTENCIA_STARTUP res_end 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba punto y coma después de las palabras reservadas start y end");
        //-err_linea.add(Ç);
        errores_gramatica(405);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STARTUP",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // STARTUP ::= res_start sig_punto_coma SENTENCIA_STARTUP res_end sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STARTUP",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONFIG ::= error llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONFIG",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONFIG ::= error sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONFIG",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CONFIG ::= res_config SENTENCIA_CONFIG llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura al inicio del bloque config");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONFIG",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONFIG ::= res_config llave_abre SENTENCIA_CONFIG llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONFIG",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RETURN ::= res_return TIPO_DATO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; después del tipo de dato");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RETURN ::= res_return Identificador 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba ; después de identificador");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RETURN ::= res_return sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RETURN ::= res_return Identificador sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCION ::= res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba llave de apertura después de los parámetros de la función");
        //-err_linea.add(Ç);
        errores_gramatica(404);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCION ::= Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada function y el tipo de dato de retorno antes del identificador de la función");
        //-err_linea.add(Ç);
        errores_gramatica(403);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCION ::= TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada function antes del tipo de dato de retorno");
        //-err_linea.add(Ç);
        errores_gramatica(402);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCION ::= res_function TIPO_DATO Identificador PARAMETRO llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaban paretesis de apertura y cierre en la especificación de parámetros de la función");
        //-err_linea.add(Ç);
        errores_gramatica(401);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCION ::= res_function TIPO_DATO Identificador par_abre PARAMETRO llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de cierre después de los parámetros de la función");
        //-err_linea.add(Ç);
        errores_gramatica(49);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= res_function TIPO_DATO Identificador PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba paréntesis de apertura después del identificador de la función");
        //-err_linea.add(Ç);
        errores_gramatica(48);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= res_function par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un tipo de dato retorno e identificador para la función");
        //-err_linea.add(Ç);
        errores_gramatica(47);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= res_function TIPO_DATO par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador para la función después del tipo de dato a retorno");
        //-err_linea.add(Ç);
        errores_gramatica(46);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCION ::= res_function Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la especificación del tipo de dato de retorno después de function");
        //-err_linea.add(Ç);
        errores_gramatica(45);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCION ::= res_function res_void Identificador par_abre par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCION ::= res_function res_void Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCION ::= res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ESTRUCTURA_BASICA ::= STARTUP FUNCIONES 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el bloque CONFIG antes del bloque START-END");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTRUCTURA_BASICA ::= FUNCIONES STARTUP 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el bloque CONFIG antes del bloque START-END");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ESTRUCTURA_BASICA ::= CONFIG FUNCIONES 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el bloque START-END después del bloque CONFIG");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el bloque START-END después del bloque CONFIG");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ESTRUCTURA_BASICA ::= FUNCIONES 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea # | Se esperaban los bloques CONFIG y START-END");
       //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESTRUCTURA_BASICA ::= STARTUP 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el bloque CONFIG antes del bloque START-END");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESTRUCTURA_BASICA ::= CONFIG 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba el bloque START-END después del bloque CONFIG");
        //-err_linea.add(Ç);
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESTRUCTURA_BASICA ::= STARTUP CONFIG 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba que bloque CONFIG se situara antes del bloque START-END");
        //-err_linea.add(Ç);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTRUCTURA_BASICA ::= CONFIG STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG FUNCIONES STARTUP FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG FUNCIONES STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG STARTUP FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURA_BASICA ::= CONFIG FUNCIONES STARTUP FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA_BASICA ::= CONFIG FUNCIONES STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRUCTURA_BASICA ::= CONFIG STARTUP FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= res_name ESTRUCTURA_BASICA 
            {
              Object RESULT =null;
		
            err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador despues de la palabra reservada name");
            //-err_linea.add(Ç);
            errores_gramatica(44);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Identificador sig_punto_coma ESTRUCTURA_BASICA 
            {
              Object RESULT =null;
		
            err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada name antes del identificador");
            //-err_linea.add(Ç);
            errores_gramatica(43);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= res_name sig_punto_coma ESTRUCTURA_BASICA 
            {
              Object RESULT =null;
		
            err_msj.add("Error Sintáctico en la línea # | Se esperaba un identificador antes del punto y coma");
            //-err_linea.add(Ç);
            errores_gramatica(42);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= res_name Identificador ESTRUCTURA_BASICA 
            {
              Object RESULT =null;
		
            err_msj.add("Error Sintáctico en la línea # | Se esperaba un punto y coma");
            //-err_linea.add(Ç);
            errores_gramatica(41);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= res_name Identificador sig_punto_coma ESTRUCTURA_BASICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

