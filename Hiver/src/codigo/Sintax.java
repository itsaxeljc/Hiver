
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 26 16:38:05 CDT 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 26 16:38:05 CDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\236\000\002\002\004\000\002\002\006\000\002\002" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\007\000\002\003\004\000\002\005\004\000\002" +
    "\005\003\000\002\006\013\000\002\006\013\000\002\052" +
    "\005\000\002\052\005\000\002\052\004\000\002\007\006" +
    "\000\002\007\004\000\002\007\004\000\002\010\007\000" +
    "\002\010\004\000\002\012\003\000\002\012\004\000\002" +
    "\012\003\000\002\012\004\000\002\012\003\000\002\012" +
    "\004\000\002\012\003\000\002\012\004\000\002\012\003" +
    "\000\002\012\004\000\002\012\003\000\002\012\004\000" +
    "\002\012\003\000\002\012\004\000\002\012\003\000\002" +
    "\012\004\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\011\004\000\002\011\003\000\002\011\004" +
    "\000\002\011\003\000\002\011\004\000\002\011\003\000" +
    "\002\011\004\000\002\011\003\000\002\011\004\000\002" +
    "\011\003\000\002\011\004\000\002\011\003\000\002\011" +
    "\004\000\002\011\003\000\002\011\004\000\002\011\003" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\011\004\000\002\011\003\000\002" +
    "\011\004\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\011\004\000\002\004\006\000\002\004\010" +
    "\000\002\004\004\000\002\015\011\000\002\016\007\000" +
    "\002\017\003\000\002\017\005\000\002\020\011\000\002" +
    "\020\007\000\002\021\003\000\002\021\003\000\002\022" +
    "\013\000\002\033\011\000\002\033\013\000\002\034\007" +
    "\000\002\034\007\000\002\035\007\000\002\036\005\000" +
    "\002\036\005\000\002\036\004\000\002\036\006\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\037\011\000\002" +
    "\037\013\000\002\037\015\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\040\003\000\002\040\003\000\002" +
    "\014\005\000\002\014\007\000\002\026\011\000\002\026" +
    "\015\000\002\031\011\000\002\031\012\000\002\032\007" +
    "\000\002\032\010\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\030\011\000\002" +
    "\023\013\000\002\024\006\000\002\024\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\004\000\002\025\003" +
    "\000\002\046\004\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\047\003\000\002\047\003\000\002" +
    "\053\007\000\002\044\011\000\002\044\013\000\002\044" +
    "\011\000\002\045\007\000\002\043\020\000\002\043\017" +
    "\000\002\042\006\000\002\042\006\000\002\042\002\000" +
    "\002\041\007\000\002\041\007\000\002\041\006\000\002" +
    "\041\006\000\002\041\007\000\002\041\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0178\000\006\003\004\044\006\001\002\000\004\064" +
    "\u017a\001\002\000\004\002\u0179\001\002\000\004\102\007" +
    "\001\002\000\004\064\010\001\002\000\010\003\012\013" +
    "\017\033\016\001\002\000\010\003\225\013\017\025\226" +
    "\001\002\000\006\064\u0172\070\u0173\001\002\000\014\002" +
    "\ufff5\003\ufff5\013\ufff5\025\ufff5\033\ufff5\001\002\000\004" +
    "\002\000\001\002\000\010\003\012\013\017\033\016\001" +
    "\002\000\004\067\220\001\002\000\020\014\026\074\022" +
    "\075\025\076\023\077\020\100\021\101\027\001\002\000" +
    "\006\064\uff94\102\uff94\001\002\000\006\064\uff93\102\uff93" +
    "\001\002\000\006\064\uff98\102\uff98\001\002\000\006\064" +
    "\uff95\102\uff95\001\002\000\004\102\211\001\002\000\006" +
    "\064\uff97\102\uff97\001\002\000\004\102\030\001\002\000" +
    "\006\064\uff96\102\uff96\001\002\000\004\065\031\001\002" +
    "\000\004\022\033\001\002\000\006\066\036\104\037\001" +
    "\002\000\016\074\022\075\025\076\023\077\020\100\021" +
    "\101\027\001\002\000\004\102\035\001\002\000\006\066" +
    "\uff8d\104\uff8d\001\002\000\004\067\043\001\002\000\004" +
    "\022\040\001\002\000\016\074\022\075\025\076\023\077" +
    "\020\100\021\101\027\001\002\000\004\102\042\001\002" +
    "\000\006\066\uff8c\104\uff8c\001\002\000\024\003\062\022" +
    "\045\030\050\031\061\034\051\035\065\036\053\040\060" +
    "\045\044\001\002\000\004\065\202\001\002\000\016\074" +
    "\022\075\025\076\023\077\020\100\021\101\027\001\002" +
    "\000\026\003\uffde\022\uffde\030\uffde\031\uffde\034\uffde\035" +
    "\uffde\036\uffde\040\uffde\045\uffde\070\uffde\001\002\000\026" +
    "\003\uffea\022\uffea\030\uffea\031\uffea\034\uffea\035\uffea\036" +
    "\uffea\040\uffea\045\uffea\070\uffea\001\002\000\004\065\157" +
    "\001\002\000\004\065\147\001\002\000\026\003\062\022" +
    "\045\030\050\031\061\034\051\035\065\036\053\040\060" +
    "\045\044\070\137\001\002\000\004\065\124\001\002\000" +
    "\026\003\uffe8\022\uffe8\030\uffe8\031\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\040\uffe8\045\uffe8\070\uffe8\001\002\000\026\003" +
    "\uffe4\022\uffe4\030\uffe4\031\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\040\uffe4\045\uffe4\070\uffe4\001\002\000\026\003\uffe2\022" +
    "\uffe2\030\uffe2\031\uffe2\034\uffe2\035\uffe2\036\uffe2\040\uffe2" +
    "\045\uffe2\070\uffe2\001\002\000\026\003\uffe0\022\uffe0\030" +
    "\uffe0\031\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\045\uffe0" +
    "\070\uffe0\001\002\000\004\065\104\001\002\000\004\065" +
    "\075\001\002\000\004\064\074\001\002\000\026\003\uffe6" +
    "\022\uffe6\030\uffe6\031\uffe6\034\uffe6\035\uffe6\036\uffe6\040" +
    "\uffe6\045\uffe6\070\uffe6\001\002\000\026\003\uffdc\022\uffdc" +
    "\030\uffdc\031\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc\045" +
    "\uffdc\070\uffdc\001\002\000\004\065\066\001\002\000\004" +
    "\103\067\001\002\000\004\104\070\001\002\000\004\102" +
    "\071\001\002\000\004\066\072\001\002\000\004\064\073" +
    "\001\002\000\026\003\uffb9\022\uffb9\030\uffb9\031\uffb9\034" +
    "\uffb9\035\uffb9\036\uffb9\040\uffb9\045\uffb9\070\uffb9\001\002" +
    "\000\064\003\uffba\004\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\020\uffba\021\uffba\022\uffba\026\uffba\030\uffba" +
    "\031\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\045\uffba\057\uffba\070\uffba\102\uffba" +
    "\001\002\000\004\103\076\001\002\000\006\066\uffb7\104" +
    "\102\001\002\000\004\066\100\001\002\000\004\064\101" +
    "\001\002\000\026\003\uffb8\022\uffb8\030\uffb8\031\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\040\uffb8\045\uffb8\070\uffb8\001\002" +
    "\000\004\103\076\001\002\000\004\066\uffb6\001\002\000" +
    "\006\102\107\103\105\001\002\000\010\064\uff8f\066\uff8f" +
    "\104\uff8f\001\002\000\004\104\110\001\002\000\010\064" +
    "\uff8e\066\uff8e\104\uff8e\001\002\000\006\102\107\103\105" +
    "\001\002\000\006\066\112\104\113\001\002\000\004\064" +
    "\123\001\002\000\006\102\107\103\105\001\002\000\006" +
    "\066\115\104\116\001\002\000\004\064\122\001\002\000" +
    "\006\102\107\103\105\001\002\000\004\066\120\001\002" +
    "\000\004\064\121\001\002\000\026\003\uff99\022\uff99\030" +
    "\uff99\031\uff99\034\uff99\035\uff99\036\uff99\040\uff99\045\uff99" +
    "\070\uff99\001\002\000\026\003\uff9a\022\uff9a\030\uff9a\031" +
    "\uff9a\034\uff9a\035\uff9a\036\uff9a\040\uff9a\045\uff9a\070\uff9a" +
    "\001\002\000\026\003\uff9b\022\uff9b\030\uff9b\031\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\040\uff9b\045\uff9b\070\uff9b\001\002" +
    "\000\004\102\125\001\002\000\004\104\126\001\002\000" +
    "\004\103\127\001\002\000\006\066\130\104\131\001\002" +
    "\000\004\064\135\001\002\000\004\103\132\001\002\000" +
    "\004\066\133\001\002\000\004\064\134\001\002\000\064" +
    "\003\uffaf\004\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\026\uffaf\030\uffaf\031\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\045\uffaf\057\uffaf\070\uffaf\102\uffaf\001\002" +
    "\000\064\003\uffb0\004\uffb0\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\020\uffb0\021\uffb0\022\uffb0\026\uffb0\030\uffb0" +
    "\031\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\045\uffb0\057\uffb0\070\uffb0\102\uffb0" +
    "\001\002\000\026\003\uffdd\022\uffdd\030\uffdd\031\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\040\uffdd\045\uffdd\070\uffdd\001\002" +
    "\000\014\002\ufff3\003\ufff3\013\ufff3\025\ufff3\033\ufff3\001" +
    "\002\000\026\003\uffe9\022\uffe9\030\uffe9\031\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\040\uffe9\045\uffe9\070\uffe9\001\002\000" +
    "\026\003\uffe7\022\uffe7\030\uffe7\031\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\040\uffe7\045\uffe7\070\uffe7\001\002\000\026\003" +
    "\uffe3\022\uffe3\030\uffe3\031\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\040\uffe3\045\uffe3\070\uffe3\001\002\000\026\003\uffe1\022" +
    "\uffe1\030\uffe1\031\uffe1\034\uffe1\035\uffe1\036\uffe1\040\uffe1" +
    "\045\uffe1\070\uffe1\001\002\000\026\003\uffdf\022\uffdf\030" +
    "\uffdf\031\uffdf\034\uffdf\035\uffdf\036\uffdf\040\uffdf\045\uffdf" +
    "\070\uffdf\001\002\000\026\003\uffe5\022\uffe5\030\uffe5\031" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\040\uffe5\045\uffe5\070\uffe5" +
    "\001\002\000\026\003\uffdb\022\uffdb\030\uffdb\031\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\040\uffdb\045\uffdb\070\uffdb\001\002" +
    "\000\004\102\150\001\002\000\004\104\151\001\002\000" +
    "\004\103\152\001\002\000\004\104\153\001\002\000\004" +
    "\103\154\001\002\000\004\066\155\001\002\000\004\064" +
    "\156\001\002\000\026\003\uffb1\022\uffb1\030\uffb1\031\uffb1" +
    "\034\uffb1\035\uffb1\036\uffb1\040\uffb1\045\uffb1\070\uffb1\001" +
    "\002\000\004\102\160\001\002\000\006\066\161\104\162" +
    "\001\002\000\004\064\170\001\002\000\006\016\163\017" +
    "\165\001\002\000\004\066\uffb3\001\002\000\004\066\166" +
    "\001\002\000\004\066\uffb2\001\002\000\004\064\167\001" +
    "\002\000\026\003\uffb5\022\uffb5\030\uffb5\031\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\040\uffb5\045\uffb5\070\uffb5\001\002\000" +
    "\026\003\uffb4\022\uffb4\030\uffb4\031\uffb4\034\uffb4\035\uffb4" +
    "\036\uffb4\040\uffb4\045\uffb4\070\uffb4\001\002\000\004\102" +
    "\172\001\002\000\006\046\173\064\174\001\002\000\010" +
    "\102\200\103\175\105\176\001\002\000\064\003\uffbc\004" +
    "\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\026\uffbc\030\uffbc\031\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\045\uffbc\057\uffbc\070\uffbc\102\uffbc\001\002\000\046\032" +
    "\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92" +
    "\055\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064" +
    "\uff92\066\uff92\102\uff92\103\uff92\105\uff92\001\002\000\046" +
    "\032\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054" +
    "\uff90\055\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90" +
    "\064\uff90\066\uff90\102\uff90\103\uff90\105\uff90\001\002\000" +
    "\004\064\201\001\002\000\046\032\uff91\047\uff91\050\uff91" +
    "\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\057\uff91\060" +
    "\uff91\061\uff91\062\uff91\063\uff91\064\uff91\066\uff91\102\uff91" +
    "\103\uff91\105\uff91\001\002\000\064\003\uffbb\004\uffbb\006" +
    "\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\020\uffbb\021\uffbb" +
    "\022\uffbb\026\uffbb\030\uffbb\031\uffbb\034\uffbb\035\uffbb\036" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\045\uffbb" +
    "\057\uffbb\070\uffbb\102\uffbb\001\002\000\006\102\204\103" +
    "\203\001\002\000\004\066\207\001\002\000\004\066\205" +
    "\001\002\000\004\064\206\001\002\000\026\003\uffae\022" +
    "\uffae\030\uffae\031\uffae\034\uffae\035\uffae\036\uffae\040\uffae" +
    "\045\uffae\070\uffae\001\002\000\004\064\210\001\002\000" +
    "\026\003\uffad\022\uffad\030\uffad\031\uffad\034\uffad\035\uffad" +
    "\036\uffad\040\uffad\045\uffad\070\uffad\001\002\000\004\065" +
    "\212\001\002\000\004\022\033\001\002\000\006\066\214" +
    "\104\037\001\002\000\004\067\215\001\002\000\024\003" +
    "\062\022\045\030\050\031\061\034\051\035\065\036\053" +
    "\040\060\045\044\001\002\000\026\003\062\022\045\030" +
    "\050\031\061\034\051\035\065\036\053\040\060\045\044" +
    "\070\217\001\002\000\014\002\ufff4\003\ufff4\013\ufff4\025" +
    "\ufff4\033\ufff4\001\002\000\024\003\062\022\045\030\050" +
    "\031\061\034\051\035\065\036\053\040\060\045\044\001" +
    "\002\000\026\003\062\022\045\030\050\031\061\034\051" +
    "\035\065\036\053\040\060\045\044\070\222\001\002\000" +
    "\010\003\uffef\013\uffef\025\uffef\001\002\000\010\003\225" +
    "\013\017\025\226\001\002\000\014\002\ufff6\003\ufff6\013" +
    "\ufff6\025\ufff6\033\ufff6\001\002\000\004\064\u0171\001\002" +
    "\000\004\064\234\001\002\000\006\002\ufffe\013\017\001" +
    "\002\000\010\003\225\013\017\025\226\001\002\000\006" +
    "\002\ufff9\013\017\001\002\000\006\002\ufff8\013\017\001" +
    "\002\000\006\002\ufffa\013\017\001\002\000\040\003\062" +
    "\004\254\006\235\007\257\010\250\011\264\012\260\020" +
    "\251\021\246\022\045\036\053\037\261\041\247\042\263" +
    "\102\243\001\002\000\004\065\u016b\001\002\000\050\003" +
    "\uffcc\004\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\026\uffcc\036\uffcc\037\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\057\uffcc\070\uffcc\102\uffcc\001\002" +
    "\000\050\003\uffc6\004\uffc6\006\uffc6\007\uffc6\010\uffc6\011" +
    "\uffc6\012\uffc6\020\uffc6\021\uffc6\022\uffc6\026\uffc6\036\uffc6" +
    "\037\uffc6\041\uffc6\042\uffc6\043\uffc6\057\uffc6\070\uffc6\102" +
    "\uffc6\001\002\000\050\003\uffda\004\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\020\uffda\021\uffda\022\uffda\026" +
    "\uffda\036\uffda\037\uffda\041\uffda\042\uffda\043\uffda\057\uffda" +
    "\070\uffda\102\uffda\001\002\000\050\003\uffd4\004\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\026\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\057\uffd4\070\uffd4\102\uffd4\001\002\000\050\003\uffce" +
    "\004\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\020" +
    "\uffce\021\uffce\022\uffce\026\uffce\036\uffce\037\uffce\041\uffce" +
    "\042\uffce\043\uffce\057\uffce\070\uffce\102\uffce\001\002\000" +
    "\014\046\u0145\047\u0146\050\u0147\051\u0149\052\u0148\001\002" +
    "\000\050\003\uffca\004\uffca\006\uffca\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\020\uffca\021\uffca\022\uffca\026\uffca\036\uffca" +
    "\037\uffca\041\uffca\042\uffca\043\uffca\057\uffca\070\uffca\102" +
    "\uffca\001\002\000\050\003\uffd0\004\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\020\uffd0\021\uffd0\022\uffd0\026" +
    "\uffd0\036\uffd0\037\uffd0\041\uffd0\042\uffd0\043\uffd0\057\uffd0" +
    "\070\uffd0\102\uffd0\001\002\000\004\065\u0136\001\002\000" +
    "\004\065\u0132\001\002\000\004\065\u0113\001\002\000\004" +
    "\065\u010f\001\002\000\050\003\uffc2\004\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\026\uffc2\036\uffc2\037\uffc2\041\uffc2\042\uffc2\043\uffc2\057" +
    "\uffc2\070\uffc2\102\uffc2\001\002\000\042\003\062\004\254" +
    "\006\235\007\257\010\250\011\325\012\260\020\251\021" +
    "\246\022\045\026\u010d\036\053\037\261\041\247\042\263" +
    "\102\243\001\002\000\004\065\u0103\001\002\000\050\003" +
    "\uffbe\004\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\026\uffbe\036\uffbe\037\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\057\uffbe\070\uffbe\102\uffbe\001\002" +
    "\000\050\003\uffd8\004\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\020\uffd8\021\uffd8\022\uffd8\026\uffd8\036\uffd8" +
    "\037\uffd8\041\uffd8\042\uffd8\043\uffd8\057\uffd8\070\uffd8\102" +
    "\uffd8\001\002\000\004\067\373\001\002\000\022\064\367" +
    "\074\022\075\025\076\023\077\020\100\021\101\027\102" +
    "\370\001\002\000\004\065\335\001\002\000\050\003\uffc4" +
    "\004\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\026\uffc4\036\uffc4\037\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\057\uffc4\070\uffc4\102\uffc4\001\002\000" +
    "\004\065\270\001\002\000\050\003\uffd2\004\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\026\uffd2\036\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\057\uffd2\070\uffd2\102\uffd2\001\002\000\050\003\uffc0\004" +
    "\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\026\uffc0\036\uffc0\037\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\057\uffc0\070\uffc0\102\uffc0\001\002\000\050" +
    "\003\uffc8\004\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\026\uffc8\036\uffc8\037\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\057\uffc8\070\uffc8\102\uffc8\001" +
    "\002\000\050\003\uffd6\004\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\020\uffd6\021\uffd6\022\uffd6\026\uffd6\036" +
    "\uffd6\037\uffd6\041\uffd6\042\uffd6\043\uffd6\057\uffd6\070\uffd6" +
    "\102\uffd6\001\002\000\004\102\271\001\002\000\004\066" +
    "\272\001\002\000\004\067\273\001\002\000\004\057\274" +
    "\001\002\000\012\023\305\024\303\103\302\105\304\001" +
    "\002\000\010\043\300\057\277\070\276\001\002\000\050" +
    "\003\uff89\004\uff89\006\uff89\007\uff89\010\uff89\011\uff89\012" +
    "\uff89\020\uff89\021\uff89\022\uff89\026\uff89\036\uff89\037\uff89" +
    "\041\uff89\042\uff89\043\uff89\057\uff89\070\uff89\102\uff89\001" +
    "\002\000\012\023\305\024\303\103\302\105\304\001\002" +
    "\000\004\070\301\001\002\000\050\003\uff88\004\uff88\006" +
    "\uff88\007\uff88\010\uff88\011\uff88\012\uff88\020\uff88\021\uff88" +
    "\022\uff88\026\uff88\036\uff88\037\uff88\041\uff88\042\uff88\043" +
    "\uff88\057\uff88\070\uff88\102\uff88\001\002\000\004\060\uff85" +
    "\001\002\000\004\060\uff82\001\002\000\004\060\uff84\001" +
    "\002\000\004\060\uff83\001\002\000\004\060\307\001\002" +
    "\000\004\073\310\001\002\000\040\003\062\004\254\006" +
    "\235\007\257\010\250\011\264\012\260\020\251\021\246" +
    "\022\045\036\053\037\261\041\247\042\263\102\243\001" +
    "\002\000\046\003\062\004\254\006\235\007\257\010\250" +
    "\011\325\012\260\020\251\021\246\022\045\036\053\037" +
    "\261\041\247\042\263\043\uff86\057\uff86\070\uff86\102\243" +
    "\001\002\000\050\003\uffcb\004\uffcb\006\uffcb\007\uffcb\010" +
    "\uffcb\011\uffcb\012\uffcb\020\uffcb\021\uffcb\022\uffcb\026\uffcb" +
    "\036\uffcb\037\uffcb\041\uffcb\042\uffcb\043\uffcb\057\uffcb\070" +
    "\uffcb\102\uffcb\001\002\000\050\003\uffc5\004\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\026\uffc5\036\uffc5\037\uffc5\041\uffc5\042\uffc5\043\uffc5" +
    "\057\uffc5\070\uffc5\102\uffc5\001\002\000\050\003\uffd9\004" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\026\uffd9\036\uffd9\037\uffd9\041\uffd9\042" +
    "\uffd9\043\uffd9\057\uffd9\070\uffd9\102\uffd9\001\002\000\050" +
    "\003\uffd3\004\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\026\uffd3\036\uffd3\037\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\057\uffd3\070\uffd3\102\uffd3\001" +
    "\002\000\050\003\uffcd\004\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\020\uffcd\021\uffcd\022\uffcd\026\uffcd\036" +
    "\uffcd\037\uffcd\041\uffcd\042\uffcd\043\uffcd\057\uffcd\070\uffcd" +
    "\102\uffcd\001\002\000\050\003\uffc9\004\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\026\uffc9\036\uffc9\037\uffc9\041\uffc9\042\uffc9\043\uffc9\057" +
    "\uffc9\070\uffc9\102\uffc9\001\002\000\050\003\uffcf\004\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\026\uffcf\036\uffcf\037\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\057\uffcf\070\uffcf\102\uffcf\001\002\000\050\003" +
    "\uffc1\004\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\020\uffc1\021\uffc1\022\uffc1\026\uffc1\036\uffc1\037\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\057\uffc1\070\uffc1\102\uffc1\001\002" +
    "\000\050\003\uffd7\004\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\020\uffd7\021\uffd7\022\uffd7\026\uffd7\036\uffd7" +
    "\037\uffd7\041\uffd7\042\uffd7\043\uffd7\057\uffd7\070\uffd7\102" +
    "\uffd7\001\002\000\050\003\uffbd\004\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\020\uffbd\021\uffbd\022\uffbd\026" +
    "\uffbd\036\uffbd\037\uffbd\041\uffbd\042\uffbd\043\uffbd\057\uffbd" +
    "\070\uffbd\102\uffbd\001\002\000\050\003\uffc3\004\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\026\uffc3\036\uffc3\037\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\057\uffc3\070\uffc3\102\uffc3\001\002\000\050\003\uffd1" +
    "\004\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\026\uffd1\036\uffd1\037\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\057\uffd1\070\uffd1\102\uffd1\001\002\000" +
    "\050\003\uffbf\004\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf" +
    "\012\uffbf\020\uffbf\021\uffbf\022\uffbf\026\uffbf\036\uffbf\037" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\057\uffbf\070\uffbf\102\uffbf" +
    "\001\002\000\050\003\uffc7\004\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\020\uffc7\021\uffc7\022\uffc7\026\uffc7" +
    "\036\uffc7\037\uffc7\041\uffc7\042\uffc7\043\uffc7\057\uffc7\070" +
    "\uffc7\102\uffc7\001\002\000\050\003\uffd5\004\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\011\uffd5\012\uffd5\020\uffd5\021\uffd5\022" +
    "\uffd5\026\uffd5\036\uffd5\037\uffd5\041\uffd5\042\uffd5\043\uffd5" +
    "\057\uffd5\070\uffd5\102\uffd5\001\002\000\004\060\332\001" +
    "\002\000\004\073\333\001\002\000\040\003\062\004\254" +
    "\006\235\007\257\010\250\011\264\012\260\020\251\021" +
    "\246\022\045\036\053\037\261\041\247\042\263\102\243" +
    "\001\002\000\046\003\062\004\254\006\235\007\257\010" +
    "\250\011\325\012\260\020\251\021\246\022\045\036\053" +
    "\037\261\041\247\042\263\043\uff87\057\uff87\070\uff87\102" +
    "\243\001\002\000\020\023\342\024\341\056\340\065\337" +
    "\102\200\103\175\105\176\001\002\000\030\032\357\053" +
    "\352\054\355\055\354\057\350\060\356\061\360\062\347" +
    "\063\351\064\uffa7\066\uffa7\001\002\000\020\023\342\024" +
    "\341\056\340\065\337\102\200\103\175\105\176\001\002" +
    "\000\004\102\346\001\002\000\006\064\uffa6\066\uffa6\001" +
    "\002\000\006\064\uffa5\066\uffa5\001\002\000\004\066\344" +
    "\001\002\000\004\064\345\001\002\000\050\003\uffac\004" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\020\uffac" +
    "\021\uffac\022\uffac\026\uffac\036\uffac\037\uffac\041\uffac\042" +
    "\uffac\043\uffac\057\uffac\070\uffac\102\uffac\001\002\000\030" +
    "\032\357\053\352\054\355\055\354\057\350\060\356\061" +
    "\360\062\347\063\351\064\uffa9\066\uffa9\001\002\000\024" +
    "\023\uff9f\024\uff9f\056\uff9f\064\uff9f\065\uff9f\066\uff9f\102" +
    "\uff9f\103\uff9f\105\uff9f\001\002\000\024\023\uff9c\024\uff9c" +
    "\056\uff9c\064\uff9c\065\uff9c\066\uff9c\102\uff9c\103\uff9c\105" +
    "\uff9c\001\002\000\024\023\uffa1\024\uffa1\056\uffa1\064\uffa1" +
    "\065\uffa1\066\uffa1\102\uffa1\103\uffa1\105\uffa1\001\002\000" +
    "\024\023\uffa3\024\uffa3\056\uffa3\064\uffa3\065\uffa3\066\uffa3" +
    "\102\uffa3\103\uffa3\105\uffa3\001\002\000\020\023\342\024" +
    "\341\056\340\065\337\102\200\103\175\105\176\001\002" +
    "\000\024\023\uffa4\024\uffa4\056\uffa4\064\uffa4\065\uffa4\066" +
    "\uffa4\102\uffa4\103\uffa4\105\uffa4\001\002\000\024\023\uffa2" +
    "\024\uffa2\056\uffa2\064\uffa2\065\uffa2\066\uffa2\102\uffa2\103" +
    "\uffa2\105\uffa2\001\002\000\024\023\uff9e\024\uff9e\056\uff9e" +
    "\064\uff9e\065\uff9e\066\uff9e\102\uff9e\103\uff9e\105\uff9e\001" +
    "\002\000\024\023\uffa0\024\uffa0\056\uffa0\064\uffa0\065\uffa0" +
    "\066\uffa0\102\uffa0\103\uffa0\105\uffa0\001\002\000\024\023" +
    "\uff9d\024\uff9d\056\uff9d\064\uff9d\065\uff9d\066\uff9d\102\uff9d" +
    "\103\uff9d\105\uff9d\001\002\000\006\064\uffa8\066\uffa8\001" +
    "\002\000\004\066\363\001\002\000\006\064\uffaa\066\uffaa" +
    "\001\002\000\010\102\200\103\175\105\176\001\002\000" +
    "\006\064\uffab\066\uffab\001\002\000\004\064\372\001\002" +
    "\000\050\003\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\020\ufff0\021\ufff0\022\ufff0\026\ufff0\036\ufff0" +
    "\037\ufff0\041\ufff0\042\ufff0\043\ufff0\057\ufff0\070\ufff0\102" +
    "\ufff0\001\002\000\004\064\371\001\002\000\050\003\ufff1" +
    "\004\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\026\ufff1\036\ufff1\037\ufff1\041\ufff1" +
    "\042\ufff1\043\ufff1\057\ufff1\070\ufff1\102\ufff1\001\002\000" +
    "\050\003\ufff2\004\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\020\ufff2\021\ufff2\022\ufff2\026\ufff2\036\ufff2\037" +
    "\ufff2\041\ufff2\042\ufff2\043\ufff2\057\ufff2\070\ufff2\102\ufff2" +
    "\001\002\000\040\003\062\004\254\006\235\007\257\010" +
    "\250\011\264\012\260\020\251\021\246\022\045\036\053" +
    "\037\261\041\247\042\263\102\243\001\002\000\042\003" +
    "\062\004\254\006\235\007\257\010\250\011\325\012\260" +
    "\020\251\021\246\022\045\036\053\037\261\041\247\042" +
    "\263\070\375\102\243\001\002\000\004\006\376\001\002" +
    "\000\004\065\377\001\002\000\020\023\342\024\341\056" +
    "\340\065\337\102\200\103\175\105\176\001\002\000\004" +
    "\066\u0101\001\002\000\004\064\u0102\001\002\000\050\003" +
    "\uff80\004\uff80\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80" +
    "\020\uff80\021\uff80\022\uff80\026\uff80\036\uff80\037\uff80\041" +
    "\uff80\042\uff80\043\uff80\057\uff80\070\uff80\102\uff80\001\002" +
    "\000\020\023\342\024\341\056\340\065\337\102\200\103" +
    "\175\105\176\001\002\000\004\066\u0105\001\002\000\004" +
    "\067\u0106\001\002\000\040\003\062\004\254\006\235\007" +
    "\257\010\250\011\264\012\260\020\251\021\246\022\045" +
    "\036\053\037\261\041\247\042\263\102\243\001\002\000" +
    "\042\003\062\004\254\006\235\007\257\010\250\011\325" +
    "\012\260\020\251\021\246\022\045\036\053\037\261\041" +
    "\247\042\263\070\u0108\102\243\001\002\000\052\003\uff8b" +
    "\004\uff8b\005\u0109\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012" +
    "\uff8b\020\uff8b\021\uff8b\022\uff8b\026\uff8b\036\uff8b\037\uff8b" +
    "\041\uff8b\042\uff8b\043\uff8b\057\uff8b\070\uff8b\102\uff8b\001" +
    "\002\000\004\067\u010a\001\002\000\040\003\062\004\254" +
    "\006\235\007\257\010\250\011\264\012\260\020\251\021" +
    "\246\022\045\036\053\037\261\041\247\042\263\102\243" +
    "\001\002\000\042\003\062\004\254\006\235\007\257\010" +
    "\250\011\325\012\260\020\251\021\246\022\045\036\053" +
    "\037\261\041\247\042\263\070\u010c\102\243\001\002\000" +
    "\050\003\uff8a\004\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a" +
    "\012\uff8a\020\uff8a\021\uff8a\022\uff8a\026\uff8a\036\uff8a\037" +
    "\uff8a\041\uff8a\042\uff8a\043\uff8a\057\uff8a\070\uff8a\102\uff8a" +
    "\001\002\000\004\064\u010e\001\002\000\006\002\uffec\013" +
    "\uffec\001\002\000\006\102\107\103\105\001\002\000\004" +
    "\066\u0111\001\002\000\004\064\u0112\001\002\000\050\003" +
    "\uff73\004\uff73\006\uff73\007\uff73\010\uff73\011\uff73\012\uff73" +
    "\020\uff73\021\uff73\022\uff73\026\uff73\036\uff73\037\uff73\041" +
    "\uff73\042\uff73\043\uff73\057\uff73\070\uff73\102\uff73\001\002" +
    "\000\006\075\u0115\102\u0114\001\002\000\004\046\u0128\001" +
    "\002\000\004\102\u0116\001\002\000\004\046\u0117\001\002" +
    "\000\006\102\107\103\105\001\002\000\004\064\u0119\001" +
    "\002\000\020\023\342\024\341\056\340\065\337\102\200" +
    "\103\175\105\176\001\002\000\004\064\u011b\001\002\000" +
    "\006\066\uff6a\102\u011d\001\002\000\004\066\u0124\001\002" +
    "\000\006\047\u011e\050\u011f\001\002\000\004\046\u0122\001" +
    "\002\000\004\046\u0120\001\002\000\006\102\107\103\105" +
    "\001\002\000\004\066\uff6b\001\002\000\006\102\107\103" +
    "\105\001\002\000\004\066\uff6c\001\002\000\004\067\u0125" +
    "\001\002\000\040\003\062\004\254\006\235\007\257\010" +
    "\250\011\264\012\260\020\251\021\246\022\045\036\053" +
    "\037\261\041\247\042\263\102\243\001\002\000\042\003" +
    "\062\004\254\006\235\007\257\010\250\011\325\012\260" +
    "\020\251\021\246\022\045\036\053\037\261\041\247\042" +
    "\263\070\u0127\102\243\001\002\000\050\003\uff6e\004\uff6e" +
    "\006\uff6e\007\uff6e\010\uff6e\011\uff6e\012\uff6e\020\uff6e\021" +
    "\uff6e\022\uff6e\026\uff6e\036\uff6e\037\uff6e\041\uff6e\042\uff6e" +
    "\043\uff6e\057\uff6e\070\uff6e\102\uff6e\001\002\000\006\102" +
    "\107\103\105\001\002\000\004\064\u012a\001\002\000\020" +
    "\023\342\024\341\056\340\065\337\102\200\103\175\105" +
    "\176\001\002\000\004\064\u012c\001\002\000\006\066\uff6a" +
    "\102\u011d\001\002\000\004\066\u012e\001\002\000\004\067" +
    "\u012f\001\002\000\040\003\062\004\254\006\235\007\257" +
    "\010\250\011\264\012\260\020\251\021\246\022\045\036" +
    "\053\037\261\041\247\042\263\102\243\001\002\000\042" +
    "\003\062\004\254\006\235\007\257\010\250\011\325\012" +
    "\260\020\251\021\246\022\045\036\053\037\261\041\247" +
    "\042\263\070\u0131\102\243\001\002\000\050\003\uff6d\004" +
    "\uff6d\006\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d\020\uff6d" +
    "\021\uff6d\022\uff6d\026\uff6d\036\uff6d\037\uff6d\041\uff6d\042" +
    "\uff6d\043\uff6d\057\uff6d\070\uff6d\102\uff6d\001\002\000\006" +
    "\102\107\103\105\001\002\000\004\066\u0134\001\002\000" +
    "\004\064\u0135\001\002\000\050\003\uff6f\004\uff6f\006\uff6f" +
    "\007\uff6f\010\uff6f\011\uff6f\012\uff6f\020\uff6f\021\uff6f\022" +
    "\uff6f\026\uff6f\036\uff6f\037\uff6f\041\uff6f\042\uff6f\043\uff6f" +
    "\057\uff6f\070\uff6f\102\uff6f\001\002\000\006\031\u0137\102" +
    "\u0138\001\002\000\004\104\u0141\001\002\000\004\104\u0139" +
    "\001\002\000\006\102\107\103\105\001\002\000\006\066" +
    "\u013b\104\u013c\001\002\000\004\064\u0140\001\002\000\006" +
    "\102\107\103\105\001\002\000\004\066\u013e\001\002\000" +
    "\004\064\u013f\001\002\000\050\003\uff71\004\uff71\006\uff71" +
    "\007\uff71\010\uff71\011\uff71\012\uff71\020\uff71\021\uff71\022" +
    "\uff71\026\uff71\036\uff71\037\uff71\041\uff71\042\uff71\043\uff71" +
    "\057\uff71\070\uff71\102\uff71\001\002\000\050\003\uff72\004" +
    "\uff72\006\uff72\007\uff72\010\uff72\011\uff72\012\uff72\020\uff72" +
    "\021\uff72\022\uff72\026\uff72\036\uff72\037\uff72\041\uff72\042" +
    "\uff72\043\uff72\057\uff72\070\uff72\102\uff72\001\002\000\004" +
    "\105\u0142\001\002\000\004\066\u0143\001\002\000\004\064" +
    "\u0144\001\002\000\050\003\uff70\004\uff70\006\uff70\007\uff70" +
    "\010\uff70\011\uff70\012\uff70\020\uff70\021\uff70\022\uff70\026" +
    "\uff70\036\uff70\037\uff70\041\uff70\042\uff70\043\uff70\057\uff70" +
    "\070\uff70\102\uff70\001\002\000\014\020\251\065\u015a\102" +
    "\200\103\175\105\176\001\002\000\006\046\u0155\047\u0156" +
    "\001\002\000\006\046\u0150\050\u0151\001\002\000\004\046" +
    "\u014d\001\002\000\004\046\u014a\001\002\000\006\102\107" +
    "\103\105\001\002\000\004\064\u014c\001\002\000\050\003" +
    "\uff64\004\uff64\006\uff64\007\uff64\010\uff64\011\uff64\012\uff64" +
    "\020\uff64\021\uff64\022\uff64\026\uff64\036\uff64\037\uff64\041" +
    "\uff64\042\uff64\043\uff64\057\uff64\070\uff64\102\uff64\001\002" +
    "\000\006\102\107\103\105\001\002\000\004\064\u014f\001" +
    "\002\000\050\003\uff65\004\uff65\006\uff65\007\uff65\010\uff65" +
    "\011\uff65\012\uff65\020\uff65\021\uff65\022\uff65\026\uff65\036" +
    "\uff65\037\uff65\041\uff65\042\uff65\043\uff65\057\uff65\070\uff65" +
    "\102\uff65\001\002\000\006\102\107\103\105\001\002\000" +
    "\004\064\u0152\001\002\000\050\003\uff67\004\uff67\006\uff67" +
    "\007\uff67\010\uff67\011\uff67\012\uff67\020\uff67\021\uff67\022" +
    "\uff67\026\uff67\036\uff67\037\uff67\041\uff67\042\uff67\043\uff67" +
    "\057\uff67\070\uff67\102\uff67\001\002\000\004\064\u0154\001" +
    "\002\000\050\003\uff68\004\uff68\006\uff68\007\uff68\010\uff68" +
    "\011\uff68\012\uff68\020\uff68\021\uff68\022\uff68\026\uff68\036" +
    "\uff68\037\uff68\041\uff68\042\uff68\043\uff68\057\uff68\070\uff68" +
    "\102\uff68\001\002\000\006\102\107\103\105\001\002\000" +
    "\004\064\u0157\001\002\000\050\003\uff66\004\uff66\006\uff66" +
    "\007\uff66\010\uff66\011\uff66\012\uff66\020\uff66\021\uff66\022" +
    "\uff66\026\uff66\036\uff66\037\uff66\041\uff66\042\uff66\043\uff66" +
    "\057\uff66\070\uff66\102\uff66\001\002\000\004\064\u0159\001" +
    "\002\000\050\003\uff69\004\uff69\006\uff69\007\uff69\010\uff69" +
    "\011\uff69\012\uff69\020\uff69\021\uff69\022\uff69\026\uff69\036" +
    "\uff69\037\uff69\041\uff69\042\uff69\043\uff69\057\uff69\070\uff69" +
    "\102\uff69\001\002\000\012\065\u015a\102\200\103\175\105" +
    "\176\001\002\000\050\003\uff7e\004\uff7e\006\uff7e\007\uff7e" +
    "\010\uff7e\011\uff7e\012\uff7e\020\uff7e\021\uff7e\022\uff7e\026" +
    "\uff7e\036\uff7e\037\uff7e\041\uff7e\042\uff7e\043\uff7e\057\uff7e" +
    "\070\uff7e\102\uff7e\001\002\000\046\032\357\047\u0165\050" +
    "\u0164\051\u0163\052\u0166\053\352\054\355\055\354\057\350" +
    "\060\356\061\360\062\347\063\351\064\uff7a\066\uff7a\102" +
    "\uff7a\103\uff7a\105\uff7a\001\002\000\012\064\u015f\102\200" +
    "\103\175\105\176\001\002\000\014\064\uff7b\066\uff7b\102" +
    "\uff7b\103\uff7b\105\uff7b\001\002\000\050\003\uff7f\004\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012\uff7f\020\uff7f\021" +
    "\uff7f\022\uff7f\026\uff7f\036\uff7f\037\uff7f\041\uff7f\042\uff7f" +
    "\043\uff7f\057\uff7f\070\uff7f\102\uff7f\001\002\000\034\032" +
    "\357\047\u0165\050\u0164\051\u0163\052\u0166\053\352\054\355" +
    "\055\354\057\350\060\356\061\360\062\347\063\351\001" +
    "\002\000\014\064\uff79\066\uff79\102\uff79\103\uff79\105\uff79" +
    "\001\002\000\014\064\uff78\066\uff78\102\uff78\103\uff78\105" +
    "\uff78\001\002\000\014\064\uff74\066\uff74\102\uff74\103\uff74" +
    "\105\uff74\001\002\000\014\064\uff76\066\uff76\102\uff76\103" +
    "\uff76\105\uff76\001\002\000\014\064\uff75\066\uff75\102\uff75" +
    "\103\uff75\105\uff75\001\002\000\014\064\uff77\066\uff77\102" +
    "\uff77\103\uff77\105\uff77\001\002\000\010\102\200\103\175" +
    "\105\176\001\002\000\014\064\uff7d\066\uff7d\102\uff7d\103" +
    "\uff7d\105\uff7d\001\002\000\012\066\u016a\102\200\103\175" +
    "\105\176\001\002\000\014\064\uff7c\066\uff7c\102\uff7c\103" +
    "\uff7c\105\uff7c\001\002\000\020\023\342\024\341\056\340" +
    "\065\337\102\200\103\175\105\176\001\002\000\004\066" +
    "\u016d\001\002\000\004\067\u016e\001\002\000\040\003\062" +
    "\004\254\006\235\007\257\010\250\011\264\012\260\020" +
    "\251\021\246\022\045\036\053\037\261\041\247\042\263" +
    "\102\243\001\002\000\042\003\062\004\254\006\235\007" +
    "\257\010\250\011\325\012\260\020\251\021\246\022\045" +
    "\036\053\037\261\041\247\042\263\070\u0170\102\243\001" +
    "\002\000\050\003\uff81\004\uff81\006\uff81\007\uff81\010\uff81" +
    "\011\uff81\012\uff81\020\uff81\021\uff81\022\uff81\026\uff81\036" +
    "\uff81\037\uff81\041\uff81\042\uff81\043\uff81\057\uff81\070\uff81" +
    "\102\uff81\001\002\000\006\002\uffeb\013\uffeb\001\002\000" +
    "\010\003\uffee\013\uffee\025\uffee\001\002\000\010\003\uffed" +
    "\013\uffed\025\uffed\001\002\000\006\002\ufff7\013\017\001" +
    "\002\000\010\003\225\013\017\025\226\001\002\000\006" +
    "\002\ufffc\013\017\001\002\000\006\002\ufffb\013\017\001" +
    "\002\000\006\002\ufffd\013\017\001\002\000\004\002\001" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0178\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\013\005\014\006\012\007\010\001\001\000\010\005" +
    "\u0174\006\012\010\u0173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\223\007\222\001" +
    "\001\000\002\001\001\000\004\013\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\031\001" +
    "\001\000\002\001\001\000\004\013\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\046\012\051\015\053\016\062\020" +
    "\054\022\055\033\056\034\045\037\063\001\001\000\002" +
    "\001\001\000\004\013\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\004\137\015\140\016\144\020\141\022\142\033\143\034" +
    "\135\037\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\102\001" +
    "\001\000\002\001\001\000\004\040\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\046\012\215\015\053\016\062\020\054\022\055" +
    "\033\056\034\045\037\063\001\001\000\022\004\137\015" +
    "\140\016\144\020\141\022\142\033\143\034\135\037\145" +
    "\001\001\000\002\001\001\000\024\004\046\012\220\015" +
    "\053\016\062\020\054\022\055\033\056\034\045\037\063" +
    "\001\001\000\022\004\137\015\140\016\144\020\141\022" +
    "\142\033\143\034\135\037\145\001\001\000\002\001\001" +
    "\000\010\005\227\006\012\010\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\232" +
    "\006\012\001\001\000\006\006\223\010\230\001\001\000" +
    "\006\005\231\006\012\001\001\000\004\006\223\001\001" +
    "\000\004\006\223\001\001\000\040\004\237\011\252\023" +
    "\243\024\265\026\244\030\235\031\241\033\255\035\266" +
    "\041\254\043\264\044\261\045\251\052\240\053\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\313\023\316\024\326" +
    "\026\317\030\311\031\315\033\321\035\327\041\322\043" +
    "\325\044\323\045\320\052\314\053\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\365\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\274\001" +
    "\001\000\004\027\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\237\011\310\023\243\024\265\026\244" +
    "\030\235\031\241\033\255\035\266\041\254\043\264\044" +
    "\261\045\251\052\240\053\236\001\001\000\036\004\313" +
    "\023\316\024\326\026\317\030\311\031\315\033\321\035" +
    "\327\041\322\043\325\044\323\045\320\052\314\053\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\237\011\333\023\243" +
    "\024\265\026\244\030\235\031\241\033\255\035\266\041" +
    "\254\043\264\044\261\045\251\052\240\053\236\001\001" +
    "\000\036\004\313\023\316\024\326\026\317\030\311\031" +
    "\315\033\321\035\327\041\322\043\325\044\323\045\320" +
    "\052\314\053\312\001\001\000\006\036\342\050\335\001" +
    "\001\000\004\051\363\001\001\000\006\036\361\050\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\352\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\036\360" +
    "\050\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\364\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\237\011\373\023\243\024\265\026\244" +
    "\030\235\031\241\033\255\035\266\041\254\043\264\044" +
    "\261\045\251\052\240\053\236\001\001\000\036\004\313" +
    "\023\316\024\326\026\317\030\311\031\315\033\321\035" +
    "\327\041\322\043\325\044\323\045\320\052\314\053\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\377\050\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\036\u0103\050\335\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\004\237\011\u0106" +
    "\023\243\024\265\026\244\030\235\031\241\033\255\035" +
    "\266\041\254\043\264\044\261\045\251\052\240\053\236" +
    "\001\001\000\036\004\313\023\316\024\326\026\317\030" +
    "\311\031\315\033\321\035\327\041\322\043\325\044\323" +
    "\045\320\052\314\053\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\237\011\u010a\023\243\024\265" +
    "\026\244\030\235\031\241\033\255\035\266\041\254\043" +
    "\264\044\261\045\251\052\240\053\236\001\001\000\036" +
    "\004\313\023\316\024\326\026\317\030\311\031\315\033" +
    "\321\035\327\041\322\043\325\044\323\045\320\052\314" +
    "\053\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\u0117\001\001\000\002\001\001\000\006\036\u0119\050" +
    "\335\001\001\000\002\001\001\000\004\042\u011b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u0120\001\001\000\002\001\001" +
    "\000\004\040\u0122\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\237\011\u0125\023\243\024\265\026\244" +
    "\030\235\031\241\033\255\035\266\041\254\043\264\044" +
    "\261\045\251\052\240\053\236\001\001\000\036\004\313" +
    "\023\316\024\326\026\317\030\311\031\315\033\321\035" +
    "\327\041\322\043\325\044\323\045\320\052\314\053\312" +
    "\001\001\000\002\001\001\000\004\040\u0128\001\001\000" +
    "\002\001\001\000\006\036\u012a\050\335\001\001\000\002" +
    "\001\001\000\004\042\u012c\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\237\011\u012f\023\243\024\265" +
    "\026\244\030\235\031\241\033\255\035\266\041\254\043" +
    "\264\044\261\045\251\052\240\053\236\001\001\000\036" +
    "\004\313\023\316\024\326\026\317\030\311\031\315\033" +
    "\321\035\327\041\322\043\325\044\323\045\320\052\314" +
    "\053\312\001\001\000\002\001\001\000\004\040\u0132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u0139\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u013c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\u015c\050\u015b\053\u015a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u014a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u014d\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u0152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\u0157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\u0168\050\u015b\001" +
    "\001\000\002\001\001\000\006\047\u0166\051\u0161\001\001" +
    "\000\006\046\u015d\050\u015f\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\u0160\051\u0161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\u0167" +
    "\001\001\000\002\001\001\000\006\046\u015d\050\u015f\001" +
    "\001\000\002\001\001\000\006\036\u016b\050\335\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\237\011" +
    "\u016e\023\243\024\265\026\244\030\235\031\241\033\255" +
    "\035\266\041\254\043\264\044\261\045\251\052\240\053" +
    "\236\001\001\000\036\004\313\023\316\024\326\026\317" +
    "\030\311\031\315\033\321\035\327\041\322\043\325\044" +
    "\323\045\320\052\314\053\312\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u0177\006\012\001\001\000\006\006\223\010\u0175" +
    "\001\001\000\006\005\u0176\006\012\001\001\000\004\006" +
    "\223\001\001\000\004\006\223\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    public void syntax_error(Symbol s){
       pnlSalida.textPane.setText(pnlSalida.textPane.getText()+"Error sintáctico en la línea "+(s.right+1)+": "+ s.value+"\n");
       System.out.println("Error R de sintaxis: "+ s.value +" en la Linea "+(s.right+1) );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //pnlSalida.textPane.setText(pnlSalida.textPane.getText()+"Error NR de sintaxis: "+ s.value +" en la Linea " +  (s.left+1)+"\n");
        System.out.println("Error NR de sintaxis: "+ s.value +" en la Linea " + (s.left+1));
    }

    public ArrayList getvar_identificador() { return action_obj.var_identificador; }
    public ArrayList getvar_tipo_dato() { return action_obj.var_tipo_dato; }
    public ArrayList getvar_valor() { return action_obj.var_valor; }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {

//Codigo de acciones vamos a simular atributos heredados con variables globales
    String heredado="";
    String aux="";
    Stack<Display> display = new Stack<>();
    Display tmp;

    // para la tabla de variables
    public ArrayList var_identificador = new ArrayList();
    public ArrayList var_tipo_dato = new ArrayList();
    public ArrayList var_valor = new ArrayList();
    // para los errores
    public ArrayList err_linea = new ArrayList();
    public ArrayList err_lexema = new ArrayList();


    

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OPERADORES_CONTRACCION ::= Identificador ari_multiplicacion asi_asignacion VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_CONTRACCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OPERADORES_CONTRACCION ::= Identificador ari_division asi_asignacion VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_CONTRACCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OPERADORES_CONTRACCION ::= Identificador ari_suma ari_suma sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_CONTRACCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OPERADORES_CONTRACCION ::= Identificador ari_resta ari_resta sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_CONTRACCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OPERADORES_CONTRACCION ::= Identificador ari_resta asi_asignacion VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_CONTRACCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OPERADORES_CONTRACCION ::= Identificador ari_suma asi_asignacion VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_CONTRACCION",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INCREMENTO_FOR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // INCREMENTO_FOR ::= Identificador ari_resta asi_asignacion VALOR_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INCREMENTO_FOR ::= Identificador ari_suma asi_asignacion VALOR_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO_FOR",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // FOR ::= res_for par_abre Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma INCREMENTO_FOR par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // FOR ::= res_for par_abre tip_int Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma INCREMENTO_FOR par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SLEEP ::= res_sleep par_abre VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // OUT ::= res_out par_abre res_display coma cadena_caracter par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // IN ::= res_in par_abre VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OPERADOR ::= ari_multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OPERADOR ::= ari_suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OPERADOR ::= ari_resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OPERADOR ::= ari_division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OPERADOR ::= OPERADOR_CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERACION_PROC ::= VALOR OPERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_PROC",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACION ::= VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACION ::= OPERACION OPERACION_PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACION ::= par_abre OPERACION par_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACION ::= VALOR OPERADOR VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION ::= Identificador asi_asignacion IN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION ::= Identificador asi_asignacion OPERACION sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // WHILE ::= res_while par_abre CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CASO ::= res_false 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CASO ::= res_true 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CASO ::= cadena_caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CASO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS rel_menor CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SWITCH_ENTRADAS ::= rel_menor CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SWITCH_ENTRADAS res_default llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IF ::= res_if par_abre CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra res_else llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IF ::= res_if par_abre CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PARAMETRO ::= PARAMETRO coma res_def TIPO_DATO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PARAMETRO ::= res_def TIPO_DATO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALOR_NUMERICO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_NUMERICO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALOR_NUMERICO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_NUMERICO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VALOR ::= cadena_caracter 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VALOR ::= Identificador 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VALOR ::= Numero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIPO_DATO ::= tip_char 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIPO_DATO ::= tip_double 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIPO_DATO ::= tip_float 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPO_DATO ::= tip_boolean 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPO_DATO ::= tip_int 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPO_DATO ::= tip_tinyint 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPERADOR_CONDICIONAL ::= rel_menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPERADOR_CONDICIONAL ::= rel_menor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPERADOR_CONDICIONAL ::= rel_mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OPERADOR_CONDICIONAL ::= rel_mayor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OPERADOR_CONDICIONAL ::= rel_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OPERADOR_CONDICIONAL ::= rel_diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OPERADOR_CONDICIONAL ::= log_or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OPERADOR_CONDICIONAL ::= log_and 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OPERADOR_CONDICIONAL ::= log_xor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONDICION ::= res_true 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDICION ::= res_false 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDICION ::= VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONDICION ::= log_not Identificador OPERADOR_CONDICIONAL CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICION ::= log_not Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICION ::= par_abre CONDICION par_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICION ::= VALOR OPERADOR_CONDICIONAL VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // WAIT ::= res_wait par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WAIT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MAX_VOLT ::= res_max_volt par_abre Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MAX_VOLT ::= res_max_volt par_abre Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VOLT ::= res_volt par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VOLT ::= res_volt par_abre Identificador coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SCALE ::= res_scale par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TYPE_IO ::= res_output 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_IO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TYPE_IO ::= res_input 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_IO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TYPE ::= res_type par_abre Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TYPE ::= res_type par_abre Identificador coma TYPE_IO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DISPLAY_PARAMS ::= Numero coma DISPLAY_PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DISPLAY_PARAMS ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DISPLAY ::= res_display par_abre DISPLAY_PARAMS par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PIN ::= res_pin par_abre Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARACION ::= error sig_punto_coma 
            {
              Object RESULT =null;
		 //vamos a validar cuando aparecen estas expresiones
                    System.err.println("ERROR Sintactico, Falto un punto y coma");
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARACION ::= res_def TIPO_DATO Identificador asi_asignacion VALOR sig_punto_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //vamos a validar cuando aparecen estas expresiones
                    System.out.println("tipo: "+ dato + " identificador: "+ id + " valor "+val);
                     var_identificador.add(id);
                     var_tipo_dato.add(dato);
                     var_valor.add(val);        
                     System.out.println(var_identificador.size());
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION ::= res_def TIPO_DATO Identificador sig_punto_coma 
            {
              Object RESULT =null;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //vamos a validar cuando aparecen estas expresiones
                    System.out.println("tipo: "+ dato + " identificador: "+ id + " valor null ");
                     var_identificador.add(id);
                     var_tipo_dato.add(dato);
                     var_valor.add(null);
                     System.out.println(var_identificador.size());
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP OPERADORES_CONTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_STARTUP ::= OPERADORES_CONTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_STARTUP ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_STARTUP ::= SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_STARTUP ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP IN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_STARTUP ::= IN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_STARTUP ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_STARTUP ::= DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_STARTUP ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_STARTUP ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_STARTUP ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_STARTUP ::= res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_STARTUP ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP WAIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_STARTUP ::= WAIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_STARTUP ::= VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_STARTUP ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG MODE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_CONFIG ::= MODE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG MAX_VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA_CONFIG ::= MAX_VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_CONFIG ::= VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG SCALE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_CONFIG ::= SCALE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_CONFIG ::= TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG DISPLAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_CONFIG ::= DISPLAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG PIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_CONFIG ::= PIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_CONFIG ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // STARTUP ::= error sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STARTUP",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STARTUP ::= res_start sig_punto_coma SENTENCIA_STARTUP res_end sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STARTUP",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONFIG ::= error llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONFIG",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONFIG ::= error sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONFIG",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CONFIG ::= res_config llave_abre SENTENCIA_CONFIG llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONFIG",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RETURN ::= res_return sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RETURN ::= res_return Identificador sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RETURN ::= res_return TIPO_DATO sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= res_function res_void Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_CONFIG llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_CONFIG llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURA_BASICA ::= CONFIG STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG FUNCIONES STARTUP FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG FUNCIONES STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG STARTUP FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ESTRUCTURA_BASICA ::= CONFIG FUNCIONES STARTUP FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURA_BASICA ::= CONFIG FUNCIONES STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESTRUCTURA_BASICA ::= CONFIG STARTUP FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= res_name Identificador sig_punto_coma ESTRUCTURA_BASICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

