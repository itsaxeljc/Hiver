/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Dalia
 */
public class FRMEjemplo extends javax.swing.JFrame {

    /**
     * Creates new form FRMEjemplo
     */
    public FRMEjemplo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtEntrada = new javax.swing.JTextField();
        btnAnalizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtEntrada.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        txtEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEntradaActionPerformed(evt);
            }
        });

        btnAnalizar.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnAnalizar.setText("analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane1.setViewportView(txtResultado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEntradaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEntradaActionPerformed

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        File archivo = new File("archivo.txt");
        PrintWriter escribir;
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(txtEntrada.getText());
            escribir.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FRMEjemplo.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            Reader lector = new BufferedReader(new FileReader("archivo.txt"));
            Lexer lexer= new Lexer(lector);
            String resultado = "";
            while (true) {
                Tokens tokens = lexer.yylex();
                if (tokens == null) {
                    resultado += "FIN";
                    txtResultado.setText(resultado);
                    return;
                }
                switch (tokens) {
                    case res_if:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case coma:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case Identificador: 
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case Numero:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case   res_else:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_while:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  res_do:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_for:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_exit:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  res_return:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_function:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_void:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break; 
                    case  res_null:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case   res_input:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  res_output:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_in:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  res_out:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  res_def:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_true:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  res_false:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  res_start:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_end:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  res_array:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_type:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_display:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_config:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_scale:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  res_pin:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  res_volt:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_wait:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_model:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_sleep:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_switch:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_default:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_name:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case res_max_volt:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case asi_asignacion:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case rel_igual:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case ari_suma:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case ari_resta:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case ari_multiplicacion:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case ari_division:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case log_and:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case log_or:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case log_xor:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case log_not:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case rel_menor:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case rel_mayor:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case rel_menor_igual:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  rel_mayor_igual:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case rel_diferente:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  sig_punto_coma:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case par_abre:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case par_cierra:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case llave_abre:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case llave_cierra:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case cor_abre:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case cor_cierra:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case sim_dos_puntos:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case tip_tinyint:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case tip_int:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case tip_float:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  tip_double:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  tip_char:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    case  tip_boolean:
                        resultado += lexer.lexema + "  : Es un " + tokens + "\n";
                        break;
                    default:
                        resultado += "Token: " + tokens + "\n";
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FRMEjemplo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FRMEjemplo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAnalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FRMEjemplo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FRMEjemplo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FRMEjemplo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FRMEjemplo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FRMEjemplo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtEntrada;
    private javax.swing.JTextArea txtResultado;
    // End of variables declaration//GEN-END:variables
}
