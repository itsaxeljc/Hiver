
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 12 21:15:27 MDT 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 12 21:15:27 MDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01fa\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\004" +
    "\000\002\002\004\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\006\000\002\003\006\000\002" +
    "\003\006\000\002\003\007\000\002\003\004\000\002\003" +
    "\004\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\005\004\000\002\005\003\000\002" +
    "\006\013\000\002\006\013\000\002\006\012\000\002\006" +
    "\012\000\002\006\012\000\002\006\011\000\002\006\012" +
    "\000\002\006\012\000\002\006\011\000\002\006\012\000" +
    "\002\006\011\000\002\006\012\000\002\066\007\000\002" +
    "\067\003\000\002\067\005\000\002\054\005\000\002\054" +
    "\004\000\002\054\004\000\002\054\004\000\002\054\004" +
    "\000\002\007\006\000\002\007\005\000\002\007\004\000" +
    "\002\007\004\000\002\010\007\000\002\010\005\000\002" +
    "\010\006\000\002\010\006\000\002\012\003\000\002\012" +
    "\004\000\002\012\003\000\002\012\004\000\002\012\003" +
    "\000\002\012\004\000\002\012\003\000\002\012\004\000" +
    "\002\012\003\000\002\012\004\000\002\012\003\000\002" +
    "\012\004\000\002\012\003\000\002\012\004\000\002\012" +
    "\003\000\002\012\004\000\002\012\004\000\002\011\003" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\011\004\000\002\011\003\000\002" +
    "\011\004\000\002\011\003\000\002\011\004\000\002\011" +
    "\003\000\002\011\004\000\002\011\003\000\002\011\004" +
    "\000\002\011\003\000\002\011\004\000\002\011\003\000" +
    "\002\011\004\000\002\011\003\000\002\011\004\000\002" +
    "\011\003\000\002\011\004\000\002\011\003\000\002\011" +
    "\004\000\002\011\003\000\002\011\004\000\002\011\003" +
    "\000\002\011\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\003\000\002\011\004\000\002\056\003\000\002" +
    "\056\004\000\002\056\003\000\002\056\004\000\002\056" +
    "\003\000\002\056\004\000\002\056\003\000\002\056\004" +
    "\000\002\056\003\000\002\056\004\000\002\056\003\000" +
    "\002\056\004\000\002\056\003\000\002\056\004\000\002" +
    "\056\003\000\002\056\004\000\002\056\003\000\002\056" +
    "\004\000\002\056\003\000\002\056\004\000\002\056\003" +
    "\000\002\056\004\000\002\056\003\000\002\056\004\000" +
    "\002\056\003\000\002\056\004\000\002\056\003\000\002" +
    "\056\004\000\002\056\003\000\002\056\004\000\002\004" +
    "\006\000\002\004\010\000\002\004\010\000\002\004\005" +
    "\000\002\004\005\000\002\004\007\000\002\004\007\000" +
    "\002\004\006\000\002\004\010\000\002\004\012\000\002" +
    "\004\010\000\002\004\014\000\002\004\014\000\002\004" +
    "\012\000\002\004\014\000\002\004\012\000\002\004\014" +
    "\000\002\015\011\000\002\015\010\000\002\015\007\000" +
    "\002\015\007\000\002\015\011\000\002\015\010\000\002" +
    "\015\010\000\002\016\007\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\016\006\000\002\017\003" +
    "\000\002\017\005\000\002\017\004\000\002\017\004\000" +
    "\002\017\005\000\002\017\006\000\002\017\007\000\002" +
    "\017\006\000\002\017\004\000\002\020\011\000\002\020" +
    "\010\000\002\020\010\000\002\020\010\000\002\020\007" +
    "\000\002\020\010\000\002\020\007\000\002\020\011\000" +
    "\002\020\006\000\002\020\011\000\002\020\013\000\002" +
    "\021\003\000\002\021\003\000\002\021\004\000\002\021" +
    "\004\000\002\021\004\000\002\022\013\000\002\022\012" +
    "\000\002\022\011\000\002\022\011\000\002\022\013\000" +
    "\002\022\011\000\002\022\012\000\002\022\012\000\002" +
    "\033\011\000\002\033\013\000\002\033\010\000\002\033" +
    "\012\000\002\033\011\000\002\033\013\000\002\033\013" +
    "\000\002\033\010\000\002\033\012\000\002\033\012\000" +
    "\002\033\011\000\002\033\010\000\002\033\010\000\002" +
    "\033\012\000\002\033\012\000\002\033\007\000\002\033" +
    "\007\000\002\034\007\000\002\034\007\000\002\034\006" +
    "\000\002\034\006\000\002\034\006\000\002\034\006\000" +
    "\002\034\006\000\002\034\006\000\002\034\007\000\002" +
    "\034\006\000\002\034\010\000\002\035\007\000\002\035" +
    "\006\000\002\035\006\000\002\035\006\000\002\036\005" +
    "\000\002\036\005\000\002\036\004\000\002\036\006\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\005\000\002\036\003\000\002\036\004" +
    "\000\002\036\006\000\002\036\003\000\002\036\005\000" +
    "\002\036\005\000\002\036\004\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\037\011\000\002\037\013\000\002\037\015\000\002" +
    "\037\010\000\002\037\012\000\002\037\014\000\002\037" +
    "\010\000\002\037\012\000\002\037\011\000\002\037\012" +
    "\000\002\037\014\000\002\037\013\000\002\037\012\000" +
    "\002\037\014\000\002\037\013\000\002\037\010\000\002" +
    "\037\010\000\002\037\007\000\002\037\012\000\002\037" +
    "\012\000\002\037\011\000\002\037\014\000\002\037\014" +
    "\000\002\037\013\000\002\037\011\000\002\037\011\000" +
    "\002\037\013\000\002\037\013\000\002\037\015\000\002" +
    "\037\015\000\002\037\015\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\051\004\000\002\040\003\000\002" +
    "\040\003\000\002\014\003\000\002\014\005\000\002\014" +
    "\004\000\002\014\004\000\002\065\005\000\002\065\007" +
    "\000\002\065\004\000\002\065\006\000\002\065\005\000" +
    "\002\065\007\000\002\065\011\000\002\065\007\000\002" +
    "\065\014\000\002\065\014\000\002\065\011\000\002\065" +
    "\013\000\002\065\011\000\002\065\013\000\002\026\011" +
    "\000\002\026\015\000\002\026\010\000\002\026\010\000" +
    "\002\026\010\000\002\026\014\000\002\026\014\000\002" +
    "\026\014\000\002\026\014\000\002\026\014\000\002\031" +
    "\011\000\002\031\014\000\002\031\010\000\002\031\010" +
    "\000\002\031\007\000\002\031\010\000\002\031\011\000" +
    "\002\031\011\000\002\031\011\000\002\031\011\000\002" +
    "\031\011\000\002\031\011\000\002\031\010\000\002\031" +
    "\010\000\002\031\011\000\002\031\013\000\002\031\013" +
    "\000\002\031\012\000\002\031\013\000\002\031\014\000" +
    "\002\031\014\000\002\031\014\000\002\031\014\000\002" +
    "\031\014\000\002\031\014\000\002\031\013\000\002\031" +
    "\013\000\002\031\014\000\002\031\013\000\002\031\013" +
    "\000\002\031\013\000\002\032\010\000\002\032\011\000" +
    "\002\032\006\000\002\032\007\000\002\032\007\000\002" +
    "\032\007\000\002\032\006\000\002\032\010\000\002\032" +
    "\010\000\002\032\005\000\002\032\007\000\002\032\010" +
    "\000\002\032\010\000\002\032\010\000\002\032\007\000" +
    "\002\032\011\000\002\032\012\000\002\032\006\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\004\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\030\011\000\002\030\010\000\002" +
    "\030\010\000\002\030\010\000\002\030\010\000\002\023" +
    "\013\000\002\023\012\000\002\023\012\000\002\023\012" +
    "\000\002\023\012\000\002\023\012\000\002\023\012\000" +
    "\002\023\012\000\002\023\012\000\002\024\006\000\002" +
    "\024\005\000\002\024\006\000\002\062\005\000\002\062" +
    "\005\000\002\062\003\000\002\063\005\000\002\063\005" +
    "\000\002\063\003\000\002\064\003\000\002\064\005\000" +
    "\002\064\004\000\002\047\004\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\004\000\002\055\007\000\002\055\006" +
    "\000\002\055\006\000\002\055\006\000\002\055\006\000" +
    "\002\055\004\000\002\045\011\000\002\045\013\000\002" +
    "\045\011\000\002\045\010\000\002\045\010\000\002\045" +
    "\010\000\002\045\010\000\002\045\010\000\002\045\010" +
    "\000\002\045\006\000\002\045\012\000\002\045\012\000" +
    "\002\045\012\000\002\045\012\000\002\045\012\000\002" +
    "\045\012\000\002\045\012\000\002\045\012\000\002\045" +
    "\010\000\002\045\010\000\002\045\010\000\002\045\010" +
    "\000\002\045\010\000\002\045\007\000\002\046\007\000" +
    "\002\046\007\000\002\046\006\000\002\046\006\000\002" +
    "\046\006\000\002\046\006\000\002\046\005\000\002\046" +
    "\004\000\002\046\005\000\002\046\005\000\002\046\007" +
    "\000\002\046\007\000\002\046\007\000\002\044\021\000" +
    "\002\044\014\000\002\044\020\000\002\044\017\000\002" +
    "\044\020\000\002\044\020\000\002\044\020\000\002\044" +
    "\020\000\002\044\017\000\002\044\020\000\002\044\020" +
    "\000\002\044\020\000\002\044\020\000\002\044\013\000" +
    "\002\044\013\000\002\044\013\000\002\044\013\000\002" +
    "\044\013\000\002\044\017\000\002\060\004\000\002\060" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\004\000\002\043\004\000\002\043\004\000\002" +
    "\043\004\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\004\000\002\061\007" +
    "\000\002\061\005\000\002\061\006\000\002\061\006\000" +
    "\002\061\006\000\002\061\006\000\002\061\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0510\000\010\003\004\044\007\102\005\001\002\000" +
    "\004\064\u0512\001\002\000\004\064\u0510\001\002\000\004" +
    "\002\u050f\001\002\000\032\003\020\013\015\025\016\033" +
    "\027\064\024\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\013\001\002\000\064\003\ufedf\004\ufedf\006" +
    "\ufedf\007\ufedf\010\ufedf\011\ufedf\012\ufedf\020\ufedf\021\ufedf" +
    "\022\ufedf\026\ufedf\036\ufedf\037\ufedf\041\ufedf\042\ufedf\043" +
    "\ufedf\065\ufedf\070\ufedf\074\ufedf\075\ufedf\076\ufedf\077\ufedf" +
    "\100\ufedf\101\ufedf\102\ufedf\001\002\000\032\002\uffef\003" +
    "\020\013\015\025\016\033\027\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\033\001\002\000\064\003" +
    "\ufee2\004\ufee2\006\ufee2\007\ufee2\010\ufee2\011\ufee2\012\ufee2" +
    "\020\ufee2\021\ufee2\022\ufee2\026\ufee2\036\ufee2\037\ufee2\041" +
    "\ufee2\042\ufee2\043\ufee2\065\ufee2\070\ufee2\074\ufee2\075\ufee2" +
    "\076\ufee2\077\ufee2\100\ufee2\101\ufee2\102\ufee2\001\002\000" +
    "\034\003\020\013\015\025\016\033\027\064\u0505\065\037" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\033\001\002\000\064\003\ufedd\004\ufedd\006\ufedd\007\ufedd" +
    "\010\ufedd\011\ufedd\012\ufedd\020\ufedd\021\ufedd\022\ufedd\026" +
    "\ufedd\036\ufedd\037\ufedd\041\ufedd\042\ufedd\043\ufedd\065\ufedd" +
    "\070\ufedd\074\ufedd\075\ufedd\076\ufedd\077\ufedd\100\ufedd\101" +
    "\ufedd\102\ufedd\001\002\000\024\014\u04d4\065\u04d1\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\102\u04d3\001" +
    "\002\000\056\003\064\004\051\006\060\007\066\010\075" +
    "\011\136\012\103\020\106\021\074\022\055\036\070\037" +
    "\071\041\102\042\107\064\u04cb\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\064\003" +
    "\ufee1\004\ufee1\006\ufee1\007\ufee1\010\ufee1\011\ufee1\012\ufee1" +
    "\020\ufee1\021\ufee1\022\ufee1\026\ufee1\036\ufee1\037\ufee1\041" +
    "\ufee1\042\ufee1\043\ufee1\065\ufee1\070\ufee1\074\ufee1\075\ufee1" +
    "\076\ufee1\077\ufee1\100\ufee1\101\ufee1\102\ufee1\001\002\000" +
    "\006\064\u04c8\070\u04c9\001\002\000\064\003\ufede\004\ufede" +
    "\006\ufede\007\ufede\010\ufede\011\ufede\012\ufede\020\ufede\021" +
    "\ufede\022\ufede\026\ufede\036\ufede\037\ufede\041\ufede\042\ufede" +
    "\043\ufede\065\ufede\070\ufede\074\ufede\075\ufede\076\ufede\077" +
    "\ufede\100\ufede\101\ufede\102\ufede\001\002\000\030\002\ufff0" +
    "\003\020\013\015\033\027\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\102\033\001\002\000\064\003\ufee0" +
    "\004\ufee0\006\ufee0\007\ufee0\010\ufee0\011\ufee0\012\ufee0\020" +
    "\ufee0\021\ufee0\022\ufee0\026\ufee0\036\ufee0\037\ufee0\041\ufee0" +
    "\042\ufee0\043\ufee0\065\ufee0\070\ufee0\074\ufee0\075\ufee0\076" +
    "\ufee0\077\ufee0\100\ufee0\101\ufee0\102\ufee0\001\002\000\030" +
    "\003\020\013\015\025\016\033\027\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\033\001\002\000\004" +
    "\102\u04be\001\002\000\004\002\ufffc\001\002\000\042\003" +
    "\u03d7\022\055\030\u03ce\031\u03d5\034\u03cf\035\u03da\036\070" +
    "\040\u03d6\045\u03ca\067\u03cc\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\001\002\000\026\002\ufff1\013\015" +
    "\025\016\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\033\001\002\000\032\002\uffe9\003\uffe9\013\uffe9" +
    "\025\uffe9\033\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100" +
    "\uffe9\101\uffe9\102\uffe9\001\002\000\026\002\uffed\013\015" +
    "\025\016\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\033\001\002\000\004\065\037\001\002\000\024" +
    "\002\ufff3\013\015\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\033\001\002\000\024\002\ufff9\013\015" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\033\001\002\000\032\002\uffea\003\uffea\013\uffea\025\uffea" +
    "\033\uffea\074\uffea\075\uffea\076\uffea\077\uffea\100\uffea\101" +
    "\uffea\102\uffea\001\002\000\022\003\043\022\040\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\001\002\000" +
    "\032\013\u0392\030\u0394\031\u0390\034\u0393\035\u038f\036\u0395" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\001" +
    "\002\000\004\102\u038c\001\002\000\026\022\ufed6\066\ufed6" +
    "\067\ufed6\074\ufed6\075\ufed6\076\ufed6\077\ufed6\100\ufed6\101" +
    "\ufed6\104\ufed6\001\002\000\004\064\u038b\001\002\000\024" +
    "\022\040\066\047\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\104\045\001\002\000\020\022\040\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\001\002\000" +
    "\026\022\ufed4\066\ufed4\067\ufed4\074\ufed4\075\ufed4\076\ufed4" +
    "\077\ufed4\100\ufed4\101\ufed4\104\ufed4\001\002\000\004\067" +
    "\050\001\002\000\054\003\064\004\051\006\060\007\066" +
    "\010\075\011\065\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\101\001\002\000\050\003" +
    "\u01a1\023\u0199\024\u01a0\032\u01a9\046\u01a4\053\u01a2\054\u01a8" +
    "\055\u019f\056\u01aa\057\u01a5\060\u019c\061\u019b\062\u01a6\063" +
    "\u019e\065\u0365\102\u0162\103\u015e\104\u019a\105\u019d\001\002" +
    "\000\060\003\uff83\004\uff83\006\uff83\007\uff83\010\uff83\011" +
    "\uff83\012\uff83\020\uff83\021\uff83\022\uff83\036\uff83\037\uff83" +
    "\041\uff83\042\uff83\043\uff83\070\uff83\074\uff83\075\uff83\076" +
    "\uff83\077\uff83\100\uff83\101\uff83\102\uff83\001\002\000\060" +
    "\003\uff85\004\uff85\006\uff85\007\uff85\010\uff85\011\uff85\012" +
    "\uff85\020\uff85\021\uff85\022\uff85\036\uff85\037\uff85\041\uff85" +
    "\042\uff85\043\uff85\070\uff85\074\uff85\075\uff85\076\uff85\077" +
    "\uff85\100\uff85\101\uff85\102\uff85\001\002\000\060\003\uff81" +
    "\004\uff81\006\uff81\007\uff81\010\uff81\011\uff81\012\uff81\020" +
    "\uff81\021\uff81\022\uff81\036\uff81\037\uff81\041\uff81\042\uff81" +
    "\043\uff81\070\uff81\074\uff81\075\uff81\076\uff81\077\uff81\100" +
    "\uff81\101\uff81\102\uff81\001\002\000\032\013\u0312\030\u0314" +
    "\031\u0310\034\u0313\035\u030f\036\u0315\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\001\002\000\060\003\uff87" +
    "\004\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87\020" +
    "\uff87\021\uff87\022\uff87\036\uff87\037\uff87\041\uff87\042\uff87" +
    "\043\uff87\070\uff87\074\uff87\075\uff87\076\uff87\077\uff87\100" +
    "\uff87\101\uff87\102\uff87\001\002\000\060\003\uff91\004\uff91" +
    "\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\020\uff91\021" +
    "\uff91\022\uff91\036\uff91\037\uff91\041\uff91\042\uff91\043\uff91" +
    "\070\uff91\074\uff91\075\uff91\076\uff91\077\uff91\100\uff91\101" +
    "\uff91\102\uff91\001\002\000\050\003\u01a1\023\u0199\024\u01a0" +
    "\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f\056\u01aa\057" +
    "\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e\065\u030c\102\u0162" +
    "\103\u015e\104\u019a\105\u019d\001\002\000\060\003\uff99\004" +
    "\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\020\uff99" +
    "\021\uff99\022\uff99\036\uff99\037\uff99\041\uff99\042\uff99\043" +
    "\uff99\070\uff99\074\uff99\075\uff99\076\uff99\077\uff99\100\uff99" +
    "\101\uff99\102\uff99\001\002\000\060\003\uff97\004\uff97\006" +
    "\uff97\007\uff97\010\uff97\011\uff97\012\uff97\020\uff97\021\uff97" +
    "\022\uff97\036\uff97\037\uff97\041\uff97\042\uff97\043\uff97\070" +
    "\uff97\074\uff97\075\uff97\076\uff97\077\uff97\100\uff97\101\uff97" +
    "\102\uff97\001\002\000\060\003\uff95\004\uff95\006\uff95\007" +
    "\uff95\010\uff95\011\uff95\012\uff95\020\uff95\021\uff95\022\uff95" +
    "\036\uff95\037\uff95\041\uff95\042\uff95\043\uff95\070\uff95\074" +
    "\uff95\075\uff95\076\uff95\077\uff95\100\uff95\101\uff95\102\uff95" +
    "\001\002\000\004\064\u030b\001\002\000\060\003\uff93\004" +
    "\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\020\uff93" +
    "\021\uff93\022\uff93\036\uff93\037\uff93\041\uff93\042\uff93\043" +
    "\uff93\070\uff93\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93" +
    "\101\uff93\102\uff93\001\002\000\056\003\064\004\051\006" +
    "\060\007\066\010\075\011\136\012\103\020\106\021\074" +
    "\022\055\036\070\037\071\041\102\042\107\067\u02d6\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\144" +
    "\001\002\000\004\102\u02d1\001\002\000\006\065\u029d\102" +
    "\u029e\001\002\000\050\003\u01a1\023\u0199\024\u01a0\032\u01a9" +
    "\046\u01a4\053\u01a2\054\u01a8\055\u019f\056\u01aa\057\u01a5\060" +
    "\u019c\061\u019b\062\u01a6\063\u019e\065\u0295\102\u0162\103\u015e" +
    "\104\u019a\105\u019d\001\002\000\060\003\uff8f\004\uff8f\006" +
    "\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\020\uff8f\021\uff8f" +
    "\022\uff8f\036\uff8f\037\uff8f\041\uff8f\042\uff8f\043\uff8f\070" +
    "\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\101\uff8f" +
    "\102\uff8f\001\002\000\060\003\uff9b\004\uff9b\006\uff9b\007" +
    "\uff9b\010\uff9b\011\uff9b\012\uff9b\020\uff9b\021\uff9b\022\uff9b" +
    "\036\uff9b\037\uff9b\041\uff9b\042\uff9b\043\uff9b\070\uff9b\074" +
    "\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b" +
    "\001\002\000\010\065\u0252\102\u0254\104\u0253\001\002\000" +
    "\006\022\u0189\065\u0188\001\002\000\060\003\uff8b\004\uff8b" +
    "\006\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\020\uff8b\021" +
    "\uff8b\022\uff8b\036\uff8b\037\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\070\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b\101" +
    "\uff8b\102\uff8b\001\002\000\060\003\uff8d\004\uff8d\006\uff8d" +
    "\007\uff8d\010\uff8d\011\uff8d\012\uff8d\020\uff8d\021\uff8d\022" +
    "\uff8d\036\uff8d\037\uff8d\041\uff8d\042\uff8d\043\uff8d\070\uff8d" +
    "\074\uff8d\075\uff8d\076\uff8d\077\uff8d\100\uff8d\101\uff8d\102" +
    "\uff8d\001\002\000\056\003\064\004\051\006\060\007\066" +
    "\010\075\011\u0136\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\070\u0187\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\101\001\002\000" +
    "\004\046\150\001\002\000\014\064\u0171\065\u0170\066\u016f" +
    "\102\u0162\103\u015e\001\002\000\022\064\u016c\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\u016d\001\002" +
    "\000\060\003\uff89\004\uff89\006\uff89\007\uff89\010\uff89\011" +
    "\uff89\012\uff89\020\uff89\021\uff89\022\uff89\036\uff89\037\uff89" +
    "\041\uff89\042\uff89\043\uff89\070\uff89\074\uff89\075\uff89\076" +
    "\uff89\077\uff89\100\uff89\101\uff89\102\uff89\001\002\000\060" +
    "\003\uff7f\004\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f\012" +
    "\uff7f\020\uff7f\021\uff7f\022\uff7f\036\uff7f\037\uff7f\041\uff7f" +
    "\042\uff7f\043\uff7f\070\uff7f\074\uff7f\075\uff7f\076\uff7f\077" +
    "\uff7f\100\uff7f\101\uff7f\102\uff7f\001\002\000\012\064\u0160" +
    "\065\u015f\102\u0162\103\u015e\001\002\000\006\065\110\102" +
    "\111\001\002\000\036\003\043\022\040\023\353\024\357" +
    "\066\356\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\354\103\352\105\355\001\002\000\006\066\112" +
    "\067\113\001\002\000\004\067\343\001\002\000\014\023" +
    "\120\024\114\057\117\103\115\105\116\001\002\000\060" +
    "\003\ufe86\004\ufe86\006\ufe86\007\ufe86\010\ufe86\011\ufe86\012" +
    "\ufe86\020\ufe86\021\ufe86\022\ufe86\036\ufe86\037\ufe86\041\ufe86" +
    "\042\ufe86\060\ufe86\073\ufe86\074\ufe86\075\ufe86\076\ufe86\077" +
    "\ufe86\100\ufe86\101\ufe86\102\ufe86\001\002\000\066\003\ufe89" +
    "\004\ufe89\006\ufe89\007\ufe89\010\ufe89\011\ufe89\012\ufe89\020" +
    "\ufe89\021\ufe89\022\ufe89\036\ufe89\037\ufe89\041\ufe89\042\ufe89" +
    "\047\335\060\ufe89\073\ufe89\074\ufe89\075\ufe89\076\ufe89\077" +
    "\ufe89\100\ufe89\101\ufe89\102\ufe89\103\334\104\336\001\002" +
    "\000\064\003\ufe88\004\ufe88\006\ufe88\007\ufe88\010\ufe88\011" +
    "\ufe88\012\ufe88\020\ufe88\021\ufe88\022\ufe88\036\ufe88\037\ufe88" +
    "\041\ufe88\042\ufe88\047\330\060\ufe88\073\ufe88\074\ufe88\075" +
    "\ufe88\076\ufe88\077\ufe88\100\ufe88\101\ufe88\102\ufe88\104\331" +
    "\001\002\000\014\023\120\024\114\102\304\103\115\105" +
    "\116\001\002\000\060\003\ufe87\004\ufe87\006\ufe87\007\ufe87" +
    "\010\ufe87\011\ufe87\012\ufe87\020\ufe87\021\ufe87\022\ufe87\036" +
    "\ufe87\037\ufe87\041\ufe87\042\ufe87\060\ufe87\073\ufe87\074\ufe87" +
    "\075\ufe87\076\ufe87\077\ufe87\100\ufe87\101\ufe87\102\ufe87\001" +
    "\002\000\020\023\120\024\114\043\240\057\237\070\236" +
    "\103\115\105\116\001\002\000\060\003\064\004\051\006" +
    "\060\007\066\010\075\011\136\012\103\020\106\021\074" +
    "\022\055\036\070\037\071\041\102\042\107\060\127\073" +
    "\123\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\054\003\064\004\051\006\060\007" +
    "\066\010\075\011\136\012\103\020\106\021\074\022\055" +
    "\036\070\037\071\041\102\042\107\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\144\001\002\000\060" +
    "\003\uffa3\004\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\026\uffa3\036\uffa3\037\uffa3" +
    "\041\uffa3\042\uffa3\070\uffa3\074\uffa3\075\uffa3\076\uffa3\077" +
    "\uffa3\100\uffa3\101\uffa3\102\uffa3\001\002\000\060\003\uffa5" +
    "\004\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\026\uffa5\036\uffa5\037\uffa5\041\uffa5" +
    "\042\uffa5\070\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\100" +
    "\uffa5\101\uffa5\102\uffa5\001\002\000\060\003\uffa1\004\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\020\uffa1\021" +
    "\uffa1\022\uffa1\026\uffa1\036\uffa1\037\uffa1\041\uffa1\042\uffa1" +
    "\070\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101" +
    "\uffa1\102\uffa1\001\002\000\004\073\231\001\002\000\060" +
    "\003\uffa7\004\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\026\uffa7\036\uffa7\037\uffa7" +
    "\041\uffa7\042\uffa7\070\uffa7\074\uffa7\075\uffa7\076\uffa7\077" +
    "\uffa7\100\uffa7\101\uffa7\102\uffa7\001\002\000\060\003\uffb1" +
    "\004\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\020" +
    "\uffb1\021\uffb1\022\uffb1\026\uffb1\036\uffb1\037\uffb1\041\uffb1" +
    "\042\uffb1\070\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100" +
    "\uffb1\101\uffb1\102\uffb1\001\002\000\060\003\uff9d\004\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\020\uff9d\021" +
    "\uff9d\022\uff9d\026\uff9d\036\uff9d\037\uff9d\041\uff9d\042\uff9d" +
    "\070\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\100\uff9d\101" +
    "\uff9d\102\uff9d\001\002\000\060\003\uffb9\004\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\011\uffb9\012\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\026\uffb9\036\uffb9\037\uffb9\041\uffb9\042\uffb9\070\uffb9" +
    "\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\101\uffb9\102" +
    "\uffb9\001\002\000\060\003\uffb7\004\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\011\uffb7\012\uffb7\020\uffb7\021\uffb7\022\uffb7\026" +
    "\uffb7\036\uffb7\037\uffb7\041\uffb7\042\uffb7\070\uffb7\074\uffb7" +
    "\075\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\001" +
    "\002\000\060\003\uffb5\004\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\011\uffb5\012\uffb5\020\uffb5\021\uffb5\022\uffb5\026\uffb5\036" +
    "\uffb5\037\uffb5\041\uffb5\042\uffb5\070\uffb5\074\uffb5\075\uffb5" +
    "\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\001\002\000" +
    "\060\003\uffb3\004\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3" +
    "\012\uffb3\020\uffb3\021\uffb3\022\uffb3\026\uffb3\036\uffb3\037" +
    "\uffb3\041\uffb3\042\uffb3\070\uffb3\074\uffb3\075\uffb3\076\uffb3" +
    "\077\uffb3\100\uffb3\101\uffb3\102\uffb3\001\002\000\060\003" +
    "\uffaf\004\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\026\uffaf\036\uffaf\037\uffaf\041" +
    "\uffaf\042\uffaf\070\uffaf\074\uffaf\075\uffaf\076\uffaf\077\uffaf" +
    "\100\uffaf\101\uffaf\102\uffaf\001\002\000\060\003\uffbb\004" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\026\uffbb\036\uffbb\037\uffbb\041\uffbb\042" +
    "\uffbb\070\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb" +
    "\101\uffbb\102\uffbb\001\002\000\060\003\uffab\004\uffab\006" +
    "\uffab\007\uffab\010\uffab\011\uffab\012\uffab\020\uffab\021\uffab" +
    "\022\uffab\026\uffab\036\uffab\037\uffab\041\uffab\042\uffab\070" +
    "\uffab\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\101\uffab" +
    "\102\uffab\001\002\000\060\003\uffad\004\uffad\006\uffad\007" +
    "\uffad\010\uffad\011\uffad\012\uffad\020\uffad\021\uffad\022\uffad" +
    "\026\uffad\036\uffad\037\uffad\041\uffad\042\uffad\070\uffad\074" +
    "\uffad\075\uffad\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad" +
    "\001\002\000\054\003\064\004\051\006\060\007\066\010" +
    "\075\011\222\012\103\020\106\021\074\022\055\036\070" +
    "\037\071\041\102\042\107\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\102\144\001\002\000\006\046\150" +
    "\065\147\001\002\000\060\003\uffa9\004\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\020\uffa9\021\uffa9\022\uffa9" +
    "\026\uffa9\036\uffa9\037\uffa9\041\uffa9\042\uffa9\070\uffa9\074" +
    "\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9" +
    "\001\002\000\060\003\uff9f\004\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\011\uff9f\012\uff9f\020\uff9f\021\uff9f\022\uff9f\026\uff9f" +
    "\036\uff9f\037\uff9f\041\uff9f\042\uff9f\070\uff9f\074\uff9f\075" +
    "\uff9f\076\uff9f\077\uff9f\100\uff9f\101\uff9f\102\uff9f\001\002" +
    "\000\012\003\165\102\157\103\162\105\163\001\002\000" +
    "\020\003\160\020\106\050\161\065\152\102\157\103\162" +
    "\105\163\001\002\000\016\047\ufe67\050\ufe67\051\ufe67\052" +
    "\ufe67\064\ufe67\066\ufe67\001\002\000\016\003\165\050\161" +
    "\065\152\102\157\103\162\105\163\001\002\000\016\047" +
    "\ufe6b\050\ufe6b\051\175\052\174\064\ufe6b\066\ufe6b\001\002" +
    "\000\064\003\ufe6f\004\ufe6f\006\ufe6f\007\ufe6f\010\ufe6f\011" +
    "\ufe6f\012\ufe6f\020\ufe6f\021\ufe6f\022\ufe6f\026\ufe6f\036\ufe6f" +
    "\037\ufe6f\041\ufe6f\042\ufe6f\043\ufe6f\066\ufe6f\070\ufe6f\074" +
    "\ufe6f\075\ufe6f\076\ufe6f\077\ufe6f\100\ufe6f\101\ufe6f\102\ufe6f" +
    "\001\002\000\010\047\171\050\172\064\170\001\002\000" +
    "\016\047\ufe68\050\ufe68\051\ufe68\052\ufe68\064\ufe68\066\ufe68" +
    "\001\002\000\040\022\ufedb\047\ufedb\050\ufedb\051\ufedb\052" +
    "\ufedb\064\ufedb\066\ufedb\067\ufedb\074\ufedb\075\ufedb\076\ufedb" +
    "\077\ufedb\100\ufedb\101\ufedb\104\ufedb\001\002\000\004\064" +
    "\167\001\002\000\016\003\165\050\161\065\152\102\157" +
    "\103\162\105\163\001\002\000\116\003\ufedc\004\ufedc\006" +
    "\ufedc\007\ufedc\010\ufedc\011\ufedc\012\ufedc\020\ufedc\021\ufedc" +
    "\022\ufedc\026\ufedc\030\ufedc\031\ufedc\034\ufedc\035\ufedc\036" +
    "\ufedc\037\ufedc\040\ufedc\041\ufedc\042\ufedc\043\ufedc\045\ufedc" +
    "\047\ufedc\050\ufedc\051\ufedc\052\ufedc\064\ufedc\066\ufedc\067" +
    "\ufedc\070\ufedc\074\ufedc\075\ufedc\076\ufedc\077\ufedc\100\ufedc" +
    "\101\ufedc\102\ufedc\104\ufedc\001\002\000\116\003\ufeda\004" +
    "\ufeda\006\ufeda\007\ufeda\010\ufeda\011\ufeda\012\ufeda\020\ufeda" +
    "\021\ufeda\022\ufeda\026\ufeda\030\ufeda\031\ufeda\034\ufeda\035" +
    "\ufeda\036\ufeda\037\ufeda\040\ufeda\041\ufeda\042\ufeda\043\ufeda" +
    "\045\ufeda\047\ufeda\050\ufeda\051\ufeda\052\ufeda\064\ufeda\066" +
    "\ufeda\067\ufeda\070\ufeda\074\ufeda\075\ufeda\076\ufeda\077\ufeda" +
    "\100\ufeda\101\ufeda\102\ufeda\104\ufeda\001\002\000\016\047" +
    "\ufe65\050\ufe65\051\ufe65\052\ufe65\064\ufe65\066\ufe65\001\002" +
    "\000\004\064\166\001\002\000\116\003\ufed9\004\ufed9\006" +
    "\ufed9\007\ufed9\010\ufed9\011\ufed9\012\ufed9\020\ufed9\021\ufed9" +
    "\022\ufed9\026\ufed9\030\ufed9\031\ufed9\034\ufed9\035\ufed9\036" +
    "\ufed9\037\ufed9\040\ufed9\041\ufed9\042\ufed9\043\ufed9\045\ufed9" +
    "\047\ufed9\050\ufed9\051\ufed9\052\ufed9\064\ufed9\066\ufed9\067" +
    "\ufed9\070\ufed9\074\ufed9\075\ufed9\076\ufed9\077\ufed9\100\ufed9" +
    "\101\ufed9\102\ufed9\104\ufed9\001\002\000\076\003\ufe6e\004" +
    "\ufe6e\006\ufe6e\007\ufe6e\010\ufe6e\011\ufe6e\012\ufe6e\020\ufe6e" +
    "\021\ufe6e\022\ufe6e\026\ufe6e\036\ufe6e\037\ufe6e\041\ufe6e\042" +
    "\ufe6e\043\ufe6e\047\ufed9\050\ufed9\051\ufed9\052\ufed9\064\ufed9" +
    "\066\ufe6e\070\ufe6e\074\ufe6e\075\ufe6e\076\ufe6e\077\ufe6e\100" +
    "\ufe6e\101\ufe6e\102\ufe6e\001\002\000\064\003\ufe70\004\ufe70" +
    "\006\ufe70\007\ufe70\010\ufe70\011\ufe70\012\ufe70\020\ufe70\021" +
    "\ufe70\022\ufe70\026\ufe70\036\ufe70\037\ufe70\041\ufe70\042\ufe70" +
    "\043\ufe70\066\ufe70\070\ufe70\074\ufe70\075\ufe70\076\ufe70\077" +
    "\ufe70\100\ufe70\101\ufe70\102\ufe70\001\002\000\016\003\165" +
    "\050\161\065\152\102\157\103\162\105\163\001\002\000" +
    "\016\003\165\050\161\065\152\102\157\103\162\105\163" +
    "\001\002\000\016\047\ufe6c\050\ufe6c\051\175\052\174\064" +
    "\ufe6c\066\ufe6c\001\002\000\016\003\165\050\161\065\152" +
    "\102\157\103\162\105\163\001\002\000\016\003\165\050" +
    "\161\065\152\102\157\103\162\105\163\001\002\000\016" +
    "\047\ufe6a\050\ufe6a\051\ufe6a\052\ufe6a\064\ufe6a\066\ufe6a\001" +
    "\002\000\016\047\ufe69\050\ufe69\051\ufe69\052\ufe69\064\ufe69" +
    "\066\ufe69\001\002\000\016\047\ufe6d\050\ufe6d\051\175\052" +
    "\174\064\ufe6d\066\ufe6d\001\002\000\010\047\171\050\172" +
    "\066\202\001\002\000\016\047\ufe66\050\ufe66\051\ufe66\052" +
    "\ufe66\064\ufe66\066\ufe66\001\002\000\006\066\205\104\206" +
    "\001\002\000\006\066\uffdb\104\uffdb\001\002\000\004\064" +
    "\210\001\002\000\012\003\165\102\157\103\162\105\163" +
    "\001\002\000\006\066\uffda\104\uffda\001\002\000\062\003" +
    "\uffdc\004\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\026\uffdc\036\uffdc\037\uffdc\041" +
    "\uffdc\042\uffdc\064\uffdc\070\uffdc\074\uffdc\075\uffdc\076\uffdc" +
    "\077\uffdc\100\uffdc\101\uffdc\102\uffdc\001\002\000\060\003" +
    "\uffa2\004\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2" +
    "\020\uffa2\021\uffa2\022\uffa2\026\uffa2\036\uffa2\037\uffa2\041" +
    "\uffa2\042\uffa2\070\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2" +
    "\100\uffa2\101\uffa2\102\uffa2\001\002\000\060\003\uffa4\004" +
    "\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\026\uffa4\036\uffa4\037\uffa4\041\uffa4\042" +
    "\uffa4\070\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4" +
    "\101\uffa4\102\uffa4\001\002\000\060\003\uffa0\004\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\026\uffa0\036\uffa0\037\uffa0\041\uffa0\042\uffa0\070" +
    "\uffa0\074\uffa0\075\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0" +
    "\102\uffa0\001\002\000\060\003\uffa6\004\uffa6\006\uffa6\007" +
    "\uffa6\010\uffa6\011\uffa6\012\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\026\uffa6\036\uffa6\037\uffa6\041\uffa6\042\uffa6\070\uffa6\074" +
    "\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6" +
    "\001\002\000\060\003\uffb0\004\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\020\uffb0\021\uffb0\022\uffb0\026\uffb0" +
    "\036\uffb0\037\uffb0\041\uffb0\042\uffb0\070\uffb0\074\uffb0\075" +
    "\uffb0\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\001\002" +
    "\000\060\003\uffb8\004\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\020\uffb8\021\uffb8\022\uffb8\026\uffb8\036\uffb8" +
    "\037\uffb8\041\uffb8\042\uffb8\070\uffb8\074\uffb8\075\uffb8\076" +
    "\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\001\002\000\060" +
    "\003\uff9c\004\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\020\uff9c\021\uff9c\022\uff9c\026\uff9c\036\uff9c\037\uff9c" +
    "\041\uff9c\042\uff9c\070\uff9c\074\uff9c\075\uff9c\076\uff9c\077" +
    "\uff9c\100\uff9c\101\uff9c\102\uff9c\001\002\000\060\003\uffb6" +
    "\004\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\026\uffb6\036\uffb6\037\uffb6\041\uffb6" +
    "\042\uffb6\070\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100" +
    "\uffb6\101\uffb6\102\uffb6\001\002\000\060\003\uffb4\004\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\020\uffb4\021" +
    "\uffb4\022\uffb4\026\uffb4\036\uffb4\037\uffb4\041\uffb4\042\uffb4" +
    "\070\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\101" +
    "\uffb4\102\uffb4\001\002\000\074\003\uffb2\004\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\011\uffb2\012\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\ufe92\024\ufe92\036\uffb2\037\uffb2\041\uffb2\042\uffb2" +
    "\043\ufe92\057\ufe92\070\ufe92\073\ufe92\074\uffb2\075\uffb2\076" +
    "\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\ufe92\105\ufe92" +
    "\001\002\000\060\003\uffae\004\uffae\006\uffae\007\uffae\010" +
    "\uffae\011\uffae\012\uffae\020\uffae\021\uffae\022\uffae\026\uffae" +
    "\036\uffae\037\uffae\041\uffae\042\uffae\070\uffae\074\uffae\075" +
    "\uffae\076\uffae\077\uffae\100\uffae\101\uffae\102\uffae\001\002" +
    "\000\060\003\uffba\004\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\020\uffba\021\uffba\022\uffba\026\uffba\036\uffba" +
    "\037\uffba\041\uffba\042\uffba\070\uffba\074\uffba\075\uffba\076" +
    "\uffba\077\uffba\100\uffba\101\uffba\102\uffba\001\002\000\060" +
    "\003\uffaa\004\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\026\uffaa\036\uffaa\037\uffaa" +
    "\041\uffaa\042\uffaa\070\uffaa\074\uffaa\075\uffaa\076\uffaa\077" +
    "\uffaa\100\uffaa\101\uffaa\102\uffaa\001\002\000\060\003\uffac" +
    "\004\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\020" +
    "\uffac\021\uffac\022\uffac\026\uffac\036\uffac\037\uffac\041\uffac" +
    "\042\uffac\070\uffac\074\uffac\075\uffac\076\uffac\077\uffac\100" +
    "\uffac\101\uffac\102\uffac\001\002\000\060\003\uffa8\004\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\020\uffa8\021" +
    "\uffa8\022\uffa8\026\uffa8\036\uffa8\037\uffa8\041\uffa8\042\uffa8" +
    "\070\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\100\uffa8\101" +
    "\uffa8\102\uffa8\001\002\000\060\003\uff9e\004\uff9e\006\uff9e" +
    "\007\uff9e\010\uff9e\011\uff9e\012\uff9e\020\uff9e\021\uff9e\022" +
    "\uff9e\026\uff9e\036\uff9e\037\uff9e\041\uff9e\042\uff9e\070\uff9e" +
    "\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e\101\uff9e\102" +
    "\uff9e\001\002\000\054\003\064\004\051\006\060\007\066" +
    "\010\075\011\136\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\054\003" +
    "\064\004\051\006\060\007\066\010\075\011\233\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\074\003\uffb2\004\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\ufe98\024\ufe98\036\uffb2\037\uffb2\041\uffb2\042\uffb2\043" +
    "\ufe98\057\ufe98\070\ufe98\073\ufe98\074\uffb2\075\uffb2\076\uffb2" +
    "\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\ufe98\105\ufe98\001" +
    "\002\000\054\003\064\004\051\006\060\007\066\010\075" +
    "\011\235\012\103\020\106\021\074\022\055\036\070\037" +
    "\071\041\102\042\107\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\144\001\002\000\074\003\uffb2\004" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\020\uffb2" +
    "\021\uffb2\022\uffb2\023\ufe99\024\ufe99\036\uffb2\037\uffb2\041" +
    "\uffb2\042\uffb2\043\ufe99\057\ufe99\070\ufe99\073\ufe99\074\uffb2" +
    "\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103" +
    "\ufe99\105\ufe99\001\002\000\062\003\ufeb6\004\ufeb6\006\ufeb6" +
    "\007\ufeb6\010\ufeb6\011\ufeb6\012\ufeb6\020\ufeb6\021\ufeb6\022" +
    "\ufeb6\026\ufeb6\036\ufeb6\037\ufeb6\041\ufeb6\042\ufeb6\043\ufeb6" +
    "\070\ufeb6\074\ufeb6\075\ufeb6\076\ufeb6\077\ufeb6\100\ufeb6\101" +
    "\ufeb6\102\ufeb6\001\002\000\014\023\120\024\114\102\257" +
    "\103\115\105\116\001\002\000\004\073\253\001\002\000" +
    "\060\003\064\004\051\006\060\007\066\010\075\011\136" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\060\243\073\242\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\054\003" +
    "\064\004\051\006\060\007\066\010\075\011\136\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\004\073\246\001\002\000\054\003" +
    "\064\004\051\006\060\007\066\010\075\011\245\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\074\003\uffb2\004\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\ufe8a\024\ufe8a\036\uffb2\037\uffb2\041\uffb2\042\uffb2\043" +
    "\ufe8a\057\ufe8a\070\ufe8a\073\ufe8a\074\uffb2\075\uffb2\076\uffb2" +
    "\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\ufe8a\105\ufe8a\001" +
    "\002\000\054\003\064\004\051\006\060\007\066\010\075" +
    "\011\136\012\103\020\106\021\074\022\055\036\070\037" +
    "\071\041\102\042\107\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\144\001\002\000\054\003\064\004" +
    "\051\006\060\007\066\010\075\011\250\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\144" +
    "\001\002\000\074\003\uffb2\004\uffb2\006\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\020\uffb2\021\uffb2\022\uffb2\023\ufe90" +
    "\024\ufe90\036\uffb2\037\uffb2\041\uffb2\042\uffb2\043\ufe90\057" +
    "\ufe90\070\ufe90\073\ufe90\074\uffb2\075\uffb2\076\uffb2\077\uffb2" +
    "\100\uffb2\101\uffb2\102\uffb2\103\ufe90\105\ufe90\001\002\000" +
    "\054\003\064\004\051\006\060\007\066\010\075\011\252" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\144\001\002\000\074\003\uffb2\004\uffb2\006" +
    "\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\ufe91\024\ufe91\036\uffb2\037\uffb2\041\uffb2\042" +
    "\uffb2\043\ufe91\057\ufe91\070\ufe91\073\ufe91\074\uffb2\075\uffb2" +
    "\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\ufe91\105" +
    "\ufe91\001\002\000\054\003\064\004\051\006\060\007\066" +
    "\010\075\011\136\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\056\003" +
    "\064\004\051\006\060\007\066\010\075\011\256\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\070\255\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\144\001\002\000\062\003\ufea9\004\ufea9\006" +
    "\ufea9\007\ufea9\010\ufea9\011\ufea9\012\ufea9\020\ufea9\021\ufea9" +
    "\022\ufea9\026\ufea9\036\ufea9\037\ufea9\041\ufea9\042\ufea9\043" +
    "\ufea9\070\ufea9\074\ufea9\075\ufea9\076\ufea9\077\ufea9\100\ufea9" +
    "\101\ufea9\102\ufea9\001\002\000\060\003\uffb2\004\uffb2\006" +
    "\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\026\uffb2\036\uffb2\037\uffb2\041\uffb2\042\uffb2\070" +
    "\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2" +
    "\102\uffb2\001\002\000\004\060\300\001\002\000\060\003" +
    "\064\004\051\006\060\007\066\010\075\011\136\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\060\262\073\261\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\144\001\002\000\054\003\064\004" +
    "\051\006\060\007\066\010\075\011\136\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\144" +
    "\001\002\000\060\003\064\004\051\006\060\007\066\010" +
    "\075\011\136\012\103\020\106\021\074\022\055\036\070" +
    "\037\071\041\102\042\107\067\266\073\265\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\144\001\002" +
    "\000\054\003\064\004\051\006\060\007\066\010\075\011" +
    "\264\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\144\001\002\000\074\003\uffb2\004\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\ufe8d\024\ufe8d\036\uffb2\037\uffb2\041\uffb2" +
    "\042\uffb2\043\ufe8d\057\ufe8d\070\ufe8d\073\ufe8d\074\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\ufe8d" +
    "\105\ufe8d\001\002\000\054\003\064\004\051\006\060\007" +
    "\066\010\075\011\136\012\103\020\106\021\074\022\055" +
    "\036\070\037\071\041\102\042\107\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\144\001\002\000\054" +
    "\003\064\004\051\006\060\007\066\010\075\011\136\012" +
    "\103\020\106\021\074\022\055\036\070\037\071\041\102" +
    "\042\107\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\144\001\002\000\054\003\064\004\051\006\060" +
    "\007\066\010\075\011\270\012\103\020\106\021\074\022" +
    "\055\036\070\037\071\041\102\042\107\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\144\001\002\000" +
    "\074\003\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\020\uffb2\021\uffb2\022\uffb2\023\ufe8e\024\ufe8e\036" +
    "\uffb2\037\uffb2\041\uffb2\042\uffb2\043\ufe8e\057\ufe8e\070\ufe8e" +
    "\073\ufe8e\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101" +
    "\uffb2\102\uffb2\103\ufe8e\105\ufe8e\001\002\000\056\003\064" +
    "\004\051\006\060\007\066\010\075\011\256\012\103\020" +
    "\106\021\074\022\055\036\070\037\071\041\102\042\107" +
    "\070\272\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\144\001\002\000\004\011\273\001\002\000\022" +
    "\023\ufe8b\024\ufe8b\043\ufe8b\057\ufe8b\070\ufe8b\073\ufe8b\103" +
    "\ufe8b\105\ufe8b\001\002\000\054\003\064\004\051\006\060" +
    "\007\066\010\075\011\275\012\103\020\106\021\074\022" +
    "\055\036\070\037\071\041\102\042\107\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\144\001\002\000" +
    "\074\003\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\020\uffb2\021\uffb2\022\uffb2\023\ufe9a\024\ufe9a\036" +
    "\uffb2\037\uffb2\041\uffb2\042\uffb2\043\ufe9a\057\ufe9a\070\ufe9a" +
    "\073\ufe9a\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101" +
    "\uffb2\102\uffb2\103\ufe9a\105\ufe9a\001\002\000\054\003\064" +
    "\004\051\006\060\007\066\010\075\011\277\012\103\020" +
    "\106\021\074\022\055\036\070\037\071\041\102\042\107" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\144\001\002\000\074\003\uffb2\004\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\011\uffb2\012\uffb2\020\uffb2\021\uffb2\022\uffb2\023" +
    "\ufe8f\024\ufe8f\036\uffb2\037\uffb2\041\uffb2\042\uffb2\043\ufe8f" +
    "\057\ufe8f\070\ufe8f\073\ufe8f\074\uffb2\075\uffb2\076\uffb2\077" +
    "\uffb2\100\uffb2\101\uffb2\102\uffb2\103\ufe8f\105\ufe8f\001\002" +
    "\000\004\073\301\001\002\000\054\003\064\004\051\006" +
    "\060\007\066\010\075\011\136\012\103\020\106\021\074" +
    "\022\055\036\070\037\071\041\102\042\107\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\144\001\002" +
    "\000\054\003\064\004\051\006\060\007\066\010\075\011" +
    "\303\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\144\001\002\000\074\003\uffb2\004\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\ufe8c\024\ufe8c\036\uffb2\037\uffb2\041\uffb2" +
    "\042\uffb2\043\ufe8c\057\ufe8c\070\ufe8c\073\ufe8c\074\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\ufe8c" +
    "\105\ufe8c\001\002\000\004\060\324\001\002\000\060\003" +
    "\064\004\051\006\060\007\066\010\075\011\136\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\060\307\073\306\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\144\001\002\000\054\003\064\004" +
    "\051\006\060\007\066\010\075\011\136\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\144" +
    "\001\002\000\060\003\064\004\051\006\060\007\066\010" +
    "\075\011\136\012\103\020\106\021\074\022\055\036\070" +
    "\037\071\041\102\042\107\067\313\073\312\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\144\001\002" +
    "\000\054\003\064\004\051\006\060\007\066\010\075\011" +
    "\311\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\144\001\002\000\074\003\uffb2\004\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\ufe95\024\ufe95\036\uffb2\037\uffb2\041\uffb2" +
    "\042\uffb2\043\ufe95\057\ufe95\070\ufe95\073\ufe95\074\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\ufe95" +
    "\105\ufe95\001\002\000\054\003\064\004\051\006\060\007" +
    "\066\010\075\011\136\012\103\020\106\021\074\022\055" +
    "\036\070\037\071\041\102\042\107\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\144\001\002\000\054" +
    "\003\064\004\051\006\060\007\066\010\075\011\136\012" +
    "\103\020\106\021\074\022\055\036\070\037\071\041\102" +
    "\042\107\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\144\001\002\000\054\003\064\004\051\006\060" +
    "\007\066\010\075\011\315\012\103\020\106\021\074\022" +
    "\055\036\070\037\071\041\102\042\107\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\144\001\002\000" +
    "\074\003\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\020\uffb2\021\uffb2\022\uffb2\023\ufe96\024\ufe96\036" +
    "\uffb2\037\uffb2\041\uffb2\042\uffb2\043\ufe96\057\ufe96\070\ufe96" +
    "\073\ufe96\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101" +
    "\uffb2\102\uffb2\103\ufe96\105\ufe96\001\002\000\056\003\064" +
    "\004\051\006\060\007\066\010\075\011\256\012\103\020" +
    "\106\021\074\022\055\036\070\037\071\041\102\042\107" +
    "\070\317\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\144\001\002\000\022\023\ufe93\024\ufe93\043\ufe93" +
    "\057\ufe93\070\ufe93\073\ufe93\103\ufe93\105\ufe93\001\002\000" +
    "\054\003\064\004\051\006\060\007\066\010\075\011\321" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\144\001\002\000\074\003\uffb2\004\uffb2\006" +
    "\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\ufe9b\024\ufe9b\036\uffb2\037\uffb2\041\uffb2\042" +
    "\uffb2\043\ufe9b\057\ufe9b\070\ufe9b\073\ufe9b\074\uffb2\075\uffb2" +
    "\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\ufe9b\105" +
    "\ufe9b\001\002\000\054\003\064\004\051\006\060\007\066" +
    "\010\075\011\323\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\074\003" +
    "\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\ufe97\024\ufe97\036\uffb2\037" +
    "\uffb2\041\uffb2\042\uffb2\043\ufe97\057\ufe97\070\ufe97\073\ufe97" +
    "\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102" +
    "\uffb2\103\ufe97\105\ufe97\001\002\000\004\073\325\001\002" +
    "\000\054\003\064\004\051\006\060\007\066\010\075\011" +
    "\136\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\144\001\002\000\054\003\064\004\051" +
    "\006\060\007\066\010\075\011\327\012\103\020\106\021" +
    "\074\022\055\036\070\037\071\041\102\042\107\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\102\144\001" +
    "\002\000\074\003\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\012\uffb2\020\uffb2\021\uffb2\022\uffb2\023\ufe94\024" +
    "\ufe94\036\uffb2\037\uffb2\041\uffb2\042\uffb2\043\ufe94\057\ufe94" +
    "\070\ufe94\073\ufe94\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100" +
    "\uffb2\101\uffb2\102\uffb2\103\ufe94\105\ufe94\001\002\000\004" +
    "\105\333\001\002\000\004\105\332\001\002\000\060\003" +
    "\ufe80\004\ufe80\006\ufe80\007\ufe80\010\ufe80\011\ufe80\012\ufe80" +
    "\020\ufe80\021\ufe80\022\ufe80\036\ufe80\037\ufe80\041\ufe80\042" +
    "\ufe80\060\ufe80\073\ufe80\074\ufe80\075\ufe80\076\ufe80\077\ufe80" +
    "\100\ufe80\101\ufe80\102\ufe80\001\002\000\060\003\ufe83\004" +
    "\ufe83\006\ufe83\007\ufe83\010\ufe83\011\ufe83\012\ufe83\020\ufe83" +
    "\021\ufe83\022\ufe83\036\ufe83\037\ufe83\041\ufe83\042\ufe83\060" +
    "\ufe83\073\ufe83\074\ufe83\075\ufe83\076\ufe83\077\ufe83\100\ufe83" +
    "\101\ufe83\102\ufe83\001\002\000\060\003\ufe85\004\ufe85\006" +
    "\ufe85\007\ufe85\010\ufe85\011\ufe85\012\ufe85\020\ufe85\021\ufe85" +
    "\022\ufe85\036\ufe85\037\ufe85\041\ufe85\042\ufe85\060\ufe85\073" +
    "\ufe85\074\ufe85\075\ufe85\076\ufe85\077\ufe85\100\ufe85\101\ufe85" +
    "\102\ufe85\001\002\000\006\103\341\105\342\001\002\000" +
    "\006\102\340\103\337\001\002\000\060\003\ufe84\004\ufe84" +
    "\006\ufe84\007\ufe84\010\ufe84\011\ufe84\012\ufe84\020\ufe84\021" +
    "\ufe84\022\ufe84\036\ufe84\037\ufe84\041\ufe84\042\ufe84\060\ufe84" +
    "\073\ufe84\074\ufe84\075\ufe84\076\ufe84\077\ufe84\100\ufe84\101" +
    "\ufe84\102\ufe84\001\002\000\060\003\ufe7f\004\ufe7f\006\ufe7f" +
    "\007\ufe7f\010\ufe7f\011\ufe7f\012\ufe7f\020\ufe7f\021\ufe7f\022" +
    "\ufe7f\036\ufe7f\037\ufe7f\041\ufe7f\042\ufe7f\060\ufe7f\073\ufe7f" +
    "\074\ufe7f\075\ufe7f\076\ufe7f\077\ufe7f\100\ufe7f\101\ufe7f\102" +
    "\ufe7f\001\002\000\060\003\ufe81\004\ufe81\006\ufe81\007\ufe81" +
    "\010\ufe81\011\ufe81\012\ufe81\020\ufe81\021\ufe81\022\ufe81\036" +
    "\ufe81\037\ufe81\041\ufe81\042\ufe81\060\ufe81\073\ufe81\074\ufe81" +
    "\075\ufe81\076\ufe81\077\ufe81\100\ufe81\101\ufe81\102\ufe81\001" +
    "\002\000\060\003\ufe82\004\ufe82\006\ufe82\007\ufe82\010\ufe82" +
    "\011\ufe82\012\ufe82\020\ufe82\021\ufe82\022\ufe82\036\ufe82\037" +
    "\ufe82\041\ufe82\042\ufe82\060\ufe82\073\ufe82\074\ufe82\075\ufe82" +
    "\076\ufe82\077\ufe82\100\ufe82\101\ufe82\102\ufe82\001\002\000" +
    "\014\023\120\024\114\057\117\103\115\105\116\001\002" +
    "\000\020\023\120\024\114\043\346\057\237\070\345\103" +
    "\115\105\116\001\002\000\062\003\ufeb8\004\ufeb8\006\ufeb8" +
    "\007\ufeb8\010\ufeb8\011\ufeb8\012\ufeb8\020\ufeb8\021\ufeb8\022" +
    "\ufeb8\026\ufeb8\036\ufeb8\037\ufeb8\041\ufeb8\042\ufeb8\043\ufeb8" +
    "\070\ufeb8\074\ufeb8\075\ufeb8\076\ufeb8\077\ufeb8\100\ufeb8\101" +
    "\ufeb8\102\ufeb8\001\002\000\004\073\347\001\002\000\054" +
    "\003\064\004\051\006\060\007\066\010\075\011\136\012" +
    "\103\020\106\021\074\022\055\036\070\037\071\041\102" +
    "\042\107\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\144\001\002\000\056\003\064\004\051\006\060" +
    "\007\066\010\075\011\256\012\103\020\106\021\074\022" +
    "\055\036\070\037\071\041\102\042\107\070\351\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\102\144\001" +
    "\002\000\062\003\ufeab\004\ufeab\006\ufeab\007\ufeab\010\ufeab" +
    "\011\ufeab\012\ufeab\020\ufeab\021\ufeab\022\ufeab\026\ufeab\036" +
    "\ufeab\037\ufeab\041\ufeab\042\ufeab\043\ufeab\070\ufeab\074\ufeab" +
    "\075\ufeab\076\ufeab\077\ufeab\100\ufeab\101\ufeab\102\ufeab\001" +
    "\002\000\004\066\u0156\001\002\000\004\066\u014e\001\002" +
    "\000\010\046\150\066\u0119\067\u011a\001\002\000\004\066" +
    "\u0111\001\002\000\004\067\u010a\001\002\000\004\066\u0102" +
    "\001\002\000\024\022\040\066\372\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\104\045\001\002\000\004" +
    "\066\362\001\002\000\004\067\363\001\002\000\014\023" +
    "\120\024\114\057\117\103\115\105\116\001\002\000\020" +
    "\023\120\024\114\043\366\057\237\070\365\103\115\105" +
    "\116\001\002\000\062\003\ufeb0\004\ufeb0\006\ufeb0\007\ufeb0" +
    "\010\ufeb0\011\ufeb0\012\ufeb0\020\ufeb0\021\ufeb0\022\ufeb0\026" +
    "\ufeb0\036\ufeb0\037\ufeb0\041\ufeb0\042\ufeb0\043\ufeb0\070\ufeb0" +
    "\074\ufeb0\075\ufeb0\076\ufeb0\077\ufeb0\100\ufeb0\101\ufeb0\102" +
    "\ufeb0\001\002\000\004\073\367\001\002\000\054\003\064" +
    "\004\051\006\060\007\066\010\075\011\136\012\103\020" +
    "\106\021\074\022\055\036\070\037\071\041\102\042\107" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\144\001\002\000\056\003\064\004\051\006\060\007\066" +
    "\010\075\011\256\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\070\371\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\144\001\002\000" +
    "\062\003\ufea3\004\ufea3\006\ufea3\007\ufea3\010\ufea3\011\ufea3" +
    "\012\ufea3\020\ufea3\021\ufea3\022\ufea3\026\ufea3\036\ufea3\037" +
    "\ufea3\041\ufea3\042\ufea3\043\ufea3\070\ufea3\074\ufea3\075\ufea3" +
    "\076\ufea3\077\ufea3\100\ufea3\101\ufea3\102\ufea3\001\002\000" +
    "\004\067\373\001\002\000\014\023\120\024\114\057\117" +
    "\103\115\105\116\001\002\000\020\023\120\024\114\043" +
    "\376\057\237\070\375\103\115\105\116\001\002\000\062" +
    "\003\ufeaf\004\ufeaf\006\ufeaf\007\ufeaf\010\ufeaf\011\ufeaf\012" +
    "\ufeaf\020\ufeaf\021\ufeaf\022\ufeaf\026\ufeaf\036\ufeaf\037\ufeaf" +
    "\041\ufeaf\042\ufeaf\043\ufeaf\070\ufeaf\074\ufeaf\075\ufeaf\076" +
    "\ufeaf\077\ufeaf\100\ufeaf\101\ufeaf\102\ufeaf\001\002\000\004" +
    "\073\377\001\002\000\054\003\064\004\051\006\060\007" +
    "\066\010\075\011\136\012\103\020\106\021\074\022\055" +
    "\036\070\037\071\041\102\042\107\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\144\001\002\000\056" +
    "\003\064\004\051\006\060\007\066\010\075\011\256\012" +
    "\103\020\106\021\074\022\055\036\070\037\071\041\102" +
    "\042\107\070\u0101\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\144\001\002\000\062\003\ufea2\004\ufea2" +
    "\006\ufea2\007\ufea2\010\ufea2\011\ufea2\012\ufea2\020\ufea2\021" +
    "\ufea2\022\ufea2\026\ufea2\036\ufea2\037\ufea2\041\ufea2\042\ufea2" +
    "\043\ufea2\070\ufea2\074\ufea2\075\ufea2\076\ufea2\077\ufea2\100" +
    "\ufea2\101\ufea2\102\ufea2\001\002\000\004\067\u0103\001\002" +
    "\000\014\023\120\024\114\057\117\103\115\105\116\001" +
    "\002\000\020\023\120\024\114\043\u0106\057\237\070\u0105" +
    "\103\115\105\116\001\002\000\062\003\ufeb1\004\ufeb1\006" +
    "\ufeb1\007\ufeb1\010\ufeb1\011\ufeb1\012\ufeb1\020\ufeb1\021\ufeb1" +
    "\022\ufeb1\026\ufeb1\036\ufeb1\037\ufeb1\041\ufeb1\042\ufeb1\043" +
    "\ufeb1\070\ufeb1\074\ufeb1\075\ufeb1\076\ufeb1\077\ufeb1\100\ufeb1" +
    "\101\ufeb1\102\ufeb1\001\002\000\004\073\u0107\001\002\000" +
    "\054\003\064\004\051\006\060\007\066\010\075\011\136" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\144\001\002\000\056\003\064\004\051\006" +
    "\060\007\066\010\075\011\256\012\103\020\106\021\074" +
    "\022\055\036\070\037\071\041\102\042\107\070\u0109\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\144" +
    "\001\002\000\062\003\ufea4\004\ufea4\006\ufea4\007\ufea4\010" +
    "\ufea4\011\ufea4\012\ufea4\020\ufea4\021\ufea4\022\ufea4\026\ufea4" +
    "\036\ufea4\037\ufea4\041\ufea4\042\ufea4\043\ufea4\070\ufea4\074" +
    "\ufea4\075\ufea4\076\ufea4\077\ufea4\100\ufea4\101\ufea4\102\ufea4" +
    "\001\002\000\014\023\120\024\114\057\117\103\115\105" +
    "\116\001\002\000\020\023\120\024\114\043\u010d\057\237" +
    "\070\u010c\103\115\105\116\001\002\000\062\003\ufeb5\004" +
    "\ufeb5\006\ufeb5\007\ufeb5\010\ufeb5\011\ufeb5\012\ufeb5\020\ufeb5" +
    "\021\ufeb5\022\ufeb5\026\ufeb5\036\ufeb5\037\ufeb5\041\ufeb5\042" +
    "\ufeb5\043\ufeb5\070\ufeb5\074\ufeb5\075\ufeb5\076\ufeb5\077\ufeb5" +
    "\100\ufeb5\101\ufeb5\102\ufeb5\001\002\000\004\073\u010e\001" +
    "\002\000\054\003\064\004\051\006\060\007\066\010\075" +
    "\011\136\012\103\020\106\021\074\022\055\036\070\037" +
    "\071\041\102\042\107\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\144\001\002\000\056\003\064\004" +
    "\051\006\060\007\066\010\075\011\256\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\070" +
    "\u0110\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\062\003\ufea8\004\ufea8\006\ufea8\007" +
    "\ufea8\010\ufea8\011\ufea8\012\ufea8\020\ufea8\021\ufea8\022\ufea8" +
    "\026\ufea8\036\ufea8\037\ufea8\041\ufea8\042\ufea8\043\ufea8\070" +
    "\ufea8\074\ufea8\075\ufea8\076\ufea8\077\ufea8\100\ufea8\101\ufea8" +
    "\102\ufea8\001\002\000\004\067\u0112\001\002\000\014\023" +
    "\120\024\114\057\117\103\115\105\116\001\002\000\020" +
    "\023\120\024\114\043\u0115\057\237\070\u0114\103\115\105" +
    "\116\001\002\000\062\003\ufeb3\004\ufeb3\006\ufeb3\007\ufeb3" +
    "\010\ufeb3\011\ufeb3\012\ufeb3\020\ufeb3\021\ufeb3\022\ufeb3\026" +
    "\ufeb3\036\ufeb3\037\ufeb3\041\ufeb3\042\ufeb3\043\ufeb3\070\ufeb3" +
    "\074\ufeb3\075\ufeb3\076\ufeb3\077\ufeb3\100\ufeb3\101\ufeb3\102" +
    "\ufeb3\001\002\000\004\073\u0116\001\002\000\054\003\064" +
    "\004\051\006\060\007\066\010\075\011\136\012\103\020" +
    "\106\021\074\022\055\036\070\037\071\041\102\042\107" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\144\001\002\000\056\003\064\004\051\006\060\007\066" +
    "\010\075\011\256\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\070\u0118\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\144\001\002\000" +
    "\062\003\ufea6\004\ufea6\006\ufea6\007\ufea6\010\ufea6\011\ufea6" +
    "\012\ufea6\020\ufea6\021\ufea6\022\ufea6\026\ufea6\036\ufea6\037" +
    "\ufea6\041\ufea6\042\ufea6\043\ufea6\070\ufea6\074\ufea6\075\ufea6" +
    "\076\ufea6\077\ufea6\100\ufea6\101\ufea6\102\ufea6\001\002\000" +
    "\016\023\120\024\114\057\117\067\u0121\103\115\105\116" +
    "\001\002\000\014\023\120\024\114\057\117\103\115\105" +
    "\116\001\002\000\020\023\120\024\114\043\u011d\057\237" +
    "\070\u011c\103\115\105\116\001\002\000\062\003\ufeb7\004" +
    "\ufeb7\006\ufeb7\007\ufeb7\010\ufeb7\011\ufeb7\012\ufeb7\020\ufeb7" +
    "\021\ufeb7\022\ufeb7\026\ufeb7\036\ufeb7\037\ufeb7\041\ufeb7\042" +
    "\ufeb7\043\ufeb7\070\ufeb7\074\ufeb7\075\ufeb7\076\ufeb7\077\ufeb7" +
    "\100\ufeb7\101\ufeb7\102\ufeb7\001\002\000\004\073\u011e\001" +
    "\002\000\054\003\064\004\051\006\060\007\066\010\075" +
    "\011\136\012\103\020\106\021\074\022\055\036\070\037" +
    "\071\041\102\042\107\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\144\001\002\000\056\003\064\004" +
    "\051\006\060\007\066\010\075\011\256\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\070" +
    "\u0120\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\062\003\ufeaa\004\ufeaa\006\ufeaa\007" +
    "\ufeaa\010\ufeaa\011\ufeaa\012\ufeaa\020\ufeaa\021\ufeaa\022\ufeaa" +
    "\026\ufeaa\036\ufeaa\037\ufeaa\041\ufeaa\042\ufeaa\043\ufeaa\070" +
    "\ufeaa\074\ufeaa\075\ufeaa\076\ufeaa\077\ufeaa\100\ufeaa\101\ufeaa" +
    "\102\ufeaa\001\002\000\072\003\064\004\051\006\060\007" +
    "\066\010\075\011\065\012\103\020\106\021\074\022\055" +
    "\023\120\024\114\036\070\037\071\041\102\042\107\043" +
    "\u0129\057\117\070\u0128\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\101\103\115\105\116\001\002\000" +
    "\020\023\120\024\114\043\u0124\057\237\070\u0123\103\115" +
    "\105\116\001\002\000\062\003\ufeae\004\ufeae\006\ufeae\007" +
    "\ufeae\010\ufeae\011\ufeae\012\ufeae\020\ufeae\021\ufeae\022\ufeae" +
    "\026\ufeae\036\ufeae\037\ufeae\041\ufeae\042\ufeae\043\ufeae\070" +
    "\ufeae\074\ufeae\075\ufeae\076\ufeae\077\ufeae\100\ufeae\101\ufeae" +
    "\102\ufeae\001\002\000\004\073\u0125\001\002\000\054\003" +
    "\064\004\051\006\060\007\066\010\075\011\136\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\056\003\064\004\051\006\060\007" +
    "\066\010\075\011\256\012\103\020\106\021\074\022\055" +
    "\036\070\037\071\041\102\042\107\070\u0127\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\144\001\002" +
    "\000\062\003\ufea1\004\ufea1\006\ufea1\007\ufea1\010\ufea1\011" +
    "\ufea1\012\ufea1\020\ufea1\021\ufea1\022\ufea1\026\ufea1\036\ufea1" +
    "\037\ufea1\041\ufea1\042\ufea1\043\ufea1\070\ufea1\074\ufea1\075" +
    "\ufea1\076\ufea1\077\ufea1\100\ufea1\101\ufea1\102\ufea1\001\002" +
    "\000\062\003\ufead\004\ufead\006\ufead\007\ufead\010\ufead\011" +
    "\ufead\012\ufead\020\ufead\021\ufead\022\ufead\026\ufead\036\ufead" +
    "\037\ufead\041\ufead\042\ufead\043\ufead\070\ufead\074\ufead\075" +
    "\ufead\076\ufead\077\ufead\100\ufead\101\ufead\102\ufead\001\002" +
    "\000\004\073\u014b\001\002\000\022\023\120\024\114\043" +
    "\u0141\057\237\070\u0142\073\u0140\103\115\105\116\001\002" +
    "\000\060\003\064\004\051\006\060\007\066\010\075\011" +
    "\u0136\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\043\u0132\070\u012f\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\101\001\002\000\060" +
    "\003\uff82\004\uff82\006\uff82\007\uff82\010\uff82\011\uff82\012" +
    "\uff82\020\uff82\021\uff82\022\uff82\036\uff82\037\uff82\041\uff82" +
    "\042\uff82\043\uff82\070\uff82\074\uff82\075\uff82\076\uff82\077" +
    "\uff82\100\uff82\101\uff82\102\uff82\001\002\000\060\003\uff84" +
    "\004\uff84\006\uff84\007\uff84\010\uff84\011\uff84\012\uff84\020" +
    "\uff84\021\uff84\022\uff84\036\uff84\037\uff84\041\uff84\042\uff84" +
    "\043\uff84\070\uff84\074\uff84\075\uff84\076\uff84\077\uff84\100" +
    "\uff84\101\uff84\102\uff84\001\002\000\060\003\uff80\004\uff80" +
    "\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80\020\uff80\021" +
    "\uff80\022\uff80\036\uff80\037\uff80\041\uff80\042\uff80\043\uff80" +
    "\070\uff80\074\uff80\075\uff80\076\uff80\077\uff80\100\uff80\101" +
    "\uff80\102\uff80\001\002\000\062\003\ufeac\004\ufeac\006\ufeac" +
    "\007\ufeac\010\ufeac\011\ufeac\012\ufeac\020\ufeac\021\ufeac\022" +
    "\ufeac\026\ufeac\036\ufeac\037\ufeac\041\ufeac\042\ufeac\043\ufeac" +
    "\070\ufeac\074\ufeac\075\ufeac\076\ufeac\077\ufeac\100\ufeac\101" +
    "\ufeac\102\ufeac\001\002\000\060\003\uff86\004\uff86\006\uff86" +
    "\007\uff86\010\uff86\011\uff86\012\uff86\020\uff86\021\uff86\022" +
    "\uff86\036\uff86\037\uff86\041\uff86\042\uff86\043\uff86\070\uff86" +
    "\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86\101\uff86\102" +
    "\uff86\001\002\000\060\003\uff90\004\uff90\006\uff90\007\uff90" +
    "\010\uff90\011\uff90\012\uff90\020\uff90\021\uff90\022\uff90\036" +
    "\uff90\037\uff90\041\uff90\042\uff90\043\uff90\070\uff90\074\uff90" +
    "\075\uff90\076\uff90\077\uff90\100\uff90\101\uff90\102\uff90\001" +
    "\002\000\004\073\u013d\001\002\000\060\003\uff98\004\uff98" +
    "\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\020\uff98\021" +
    "\uff98\022\uff98\036\uff98\037\uff98\041\uff98\042\uff98\043\uff98" +
    "\070\uff98\074\uff98\075\uff98\076\uff98\077\uff98\100\uff98\101" +
    "\uff98\102\uff98\001\002\000\060\003\uff96\004\uff96\006\uff96" +
    "\007\uff96\010\uff96\011\uff96\012\uff96\020\uff96\021\uff96\022" +
    "\uff96\036\uff96\037\uff96\041\uff96\042\uff96\043\uff96\070\uff96" +
    "\074\uff96\075\uff96\076\uff96\077\uff96\100\uff96\101\uff96\102" +
    "\uff96\001\002\000\060\003\uff94\004\uff94\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\020\uff94\021\uff94\022\uff94\036" +
    "\uff94\037\uff94\041\uff94\042\uff94\043\uff94\070\uff94\074\uff94" +
    "\075\uff94\076\uff94\077\uff94\100\uff94\101\uff94\102\uff94\001" +
    "\002\000\060\003\uff92\004\uff92\006\uff92\007\uff92\010\uff92" +
    "\011\uff92\012\uff92\020\uff92\021\uff92\022\uff92\036\uff92\037" +
    "\uff92\041\uff92\042\uff92\043\uff92\070\uff92\074\uff92\075\uff92" +
    "\076\uff92\077\uff92\100\uff92\101\uff92\102\uff92\001\002\000" +
    "\060\003\uff8e\004\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e" +
    "\012\uff8e\020\uff8e\021\uff8e\022\uff8e\036\uff8e\037\uff8e\041" +
    "\uff8e\042\uff8e\043\uff8e\070\uff8e\074\uff8e\075\uff8e\076\uff8e" +
    "\077\uff8e\100\uff8e\101\uff8e\102\uff8e\001\002\000\060\003" +
    "\uff9a\004\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\036\uff9a\037\uff9a\041\uff9a\042" +
    "\uff9a\043\uff9a\070\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a" +
    "\100\uff9a\101\uff9a\102\uff9a\001\002\000\060\003\uff8a\004" +
    "\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\020\uff8a" +
    "\021\uff8a\022\uff8a\036\uff8a\037\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\070\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a" +
    "\101\uff8a\102\uff8a\001\002\000\060\003\uff8c\004\uff8c\006" +
    "\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\036\uff8c\037\uff8c\041\uff8c\042\uff8c\043\uff8c\070" +
    "\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100\uff8c\101\uff8c" +
    "\102\uff8c\001\002\000\060\003\uff88\004\uff88\006\uff88\007" +
    "\uff88\010\uff88\011\uff88\012\uff88\020\uff88\021\uff88\022\uff88" +
    "\036\uff88\037\uff88\041\uff88\042\uff88\043\uff88\070\uff88\074" +
    "\uff88\075\uff88\076\uff88\077\uff88\100\uff88\101\uff88\102\uff88" +
    "\001\002\000\060\003\uff7e\004\uff7e\006\uff7e\007\uff7e\010" +
    "\uff7e\011\uff7e\012\uff7e\020\uff7e\021\uff7e\022\uff7e\036\uff7e" +
    "\037\uff7e\041\uff7e\042\uff7e\043\uff7e\070\uff7e\074\uff7e\075" +
    "\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e\102\uff7e\001\002" +
    "\000\054\003\064\004\051\006\060\007\066\010\075\011" +
    "\136\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\144\001\002\000\056\003\064\004\051" +
    "\006\060\007\066\010\075\011\256\012\103\020\106\021" +
    "\074\022\055\036\070\037\071\041\102\042\107\070\u013f" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\144\001\002\000\062\003\ufe9f\004\ufe9f\006\ufe9f\007\ufe9f" +
    "\010\ufe9f\011\ufe9f\012\ufe9f\020\ufe9f\021\ufe9f\022\ufe9f\026" +
    "\ufe9f\036\ufe9f\037\ufe9f\041\ufe9f\042\ufe9f\043\ufe9f\070\ufe9f" +
    "\074\ufe9f\075\ufe9f\076\ufe9f\077\ufe9f\100\ufe9f\101\ufe9f\102" +
    "\ufe9f\001\002\000\054\003\064\004\051\006\060\007\066" +
    "\010\075\011\136\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\056\003" +
    "\064\004\051\006\060\007\066\010\075\011\136\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\073\u0143\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\144\001\002\000\062\003\ufeba\004\ufeba\006" +
    "\ufeba\007\ufeba\010\ufeba\011\ufeba\012\ufeba\020\ufeba\021\ufeba" +
    "\022\ufeba\026\ufeba\036\ufeba\037\ufeba\041\ufeba\042\ufeba\043" +
    "\ufeba\070\ufeba\074\ufeba\075\ufeba\076\ufeba\077\ufeba\100\ufeba" +
    "\101\ufeba\102\ufeba\001\002\000\056\003\064\004\051\006" +
    "\060\007\066\010\075\011\136\012\103\020\106\021\074" +
    "\022\055\036\070\037\071\041\102\042\107\070\u0146\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\144" +
    "\001\002\000\056\003\064\004\051\006\060\007\066\010" +
    "\075\011\256\012\103\020\106\021\074\022\055\036\070" +
    "\037\071\041\102\042\107\070\u0145\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\144\001\002\000\062" +
    "\003\ufe9d\004\ufe9d\006\ufe9d\007\ufe9d\010\ufe9d\011\ufe9d\012" +
    "\ufe9d\020\ufe9d\021\ufe9d\022\ufe9d\026\ufe9d\036\ufe9d\037\ufe9d" +
    "\041\ufe9d\042\ufe9d\043\ufe9d\070\ufe9d\074\ufe9d\075\ufe9d\076" +
    "\ufe9d\077\ufe9d\100\ufe9d\101\ufe9d\102\ufe9d\001\002\000\062" +
    "\003\ufe9e\004\ufe9e\006\ufe9e\007\ufe9e\010\ufe9e\011\ufe9e\012" +
    "\ufe9e\020\ufe9e\021\ufe9e\022\ufe9e\026\ufe9e\036\ufe9e\037\ufe9e" +
    "\041\ufe9e\042\ufe9e\043\ufe9e\070\ufe9e\074\ufe9e\075\ufe9e\076" +
    "\ufe9e\077\ufe9e\100\ufe9e\101\ufe9e\102\ufe9e\001\002\000\056" +
    "\003\064\004\051\006\060\007\066\010\075\011\256\012" +
    "\103\020\106\021\074\022\055\036\070\037\071\041\102" +
    "\042\107\070\u0148\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\144\001\002\000\062\003\ufeb9\004\ufeb9" +
    "\006\ufeb9\007\ufeb9\010\ufeb9\011\ufeb9\012\ufeb9\020\ufeb9\021" +
    "\ufeb9\022\ufeb9\026\ufeb9\036\ufeb9\037\ufeb9\041\ufeb9\042\ufeb9" +
    "\043\ufeb9\070\ufeb9\074\ufeb9\075\ufeb9\076\ufeb9\077\ufeb9\100" +
    "\ufeb9\101\ufeb9\102\ufeb9\001\002\000\056\003\064\004\051" +
    "\006\060\007\066\010\075\011\256\012\103\020\106\021" +
    "\074\022\055\036\070\037\071\041\102\042\107\070\u014a" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\144\001\002\000\062\003\ufe9c\004\ufe9c\006\ufe9c\007\ufe9c" +
    "\010\ufe9c\011\ufe9c\012\ufe9c\020\ufe9c\021\ufe9c\022\ufe9c\026" +
    "\ufe9c\036\ufe9c\037\ufe9c\041\ufe9c\042\ufe9c\043\ufe9c\070\ufe9c" +
    "\074\ufe9c\075\ufe9c\076\ufe9c\077\ufe9c\100\ufe9c\101\ufe9c\102" +
    "\ufe9c\001\002\000\054\003\064\004\051\006\060\007\066" +
    "\010\075\011\136\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\056\003" +
    "\064\004\051\006\060\007\066\010\075\011\256\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\070\u014d\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\144\001\002\000\062\003\ufea0\004\ufea0\006" +
    "\ufea0\007\ufea0\010\ufea0\011\ufea0\012\ufea0\020\ufea0\021\ufea0" +
    "\022\ufea0\026\ufea0\036\ufea0\037\ufea0\041\ufea0\042\ufea0\043" +
    "\ufea0\070\ufea0\074\ufea0\075\ufea0\076\ufea0\077\ufea0\100\ufea0" +
    "\101\ufea0\102\ufea0\001\002\000\004\067\u014f\001\002\000" +
    "\014\023\120\024\114\057\117\103\115\105\116\001\002" +
    "\000\020\023\120\024\114\043\u0152\057\237\070\u0151\103" +
    "\115\105\116\001\002\000\062\003\ufeb2\004\ufeb2\006\ufeb2" +
    "\007\ufeb2\010\ufeb2\011\ufeb2\012\ufeb2\020\ufeb2\021\ufeb2\022" +
    "\ufeb2\026\ufeb2\036\ufeb2\037\ufeb2\041\ufeb2\042\ufeb2\043\ufeb2" +
    "\070\ufeb2\074\ufeb2\075\ufeb2\076\ufeb2\077\ufeb2\100\ufeb2\101" +
    "\ufeb2\102\ufeb2\001\002\000\004\073\u0153\001\002\000\054" +
    "\003\064\004\051\006\060\007\066\010\075\011\136\012" +
    "\103\020\106\021\074\022\055\036\070\037\071\041\102" +
    "\042\107\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\144\001\002\000\056\003\064\004\051\006\060" +
    "\007\066\010\075\011\256\012\103\020\106\021\074\022" +
    "\055\036\070\037\071\041\102\042\107\070\u0155\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\102\144\001" +
    "\002\000\062\003\ufea5\004\ufea5\006\ufea5\007\ufea5\010\ufea5" +
    "\011\ufea5\012\ufea5\020\ufea5\021\ufea5\022\ufea5\026\ufea5\036" +
    "\ufea5\037\ufea5\041\ufea5\042\ufea5\043\ufea5\070\ufea5\074\ufea5" +
    "\075\ufea5\076\ufea5\077\ufea5\100\ufea5\101\ufea5\102\ufea5\001" +
    "\002\000\004\067\u0157\001\002\000\014\023\120\024\114" +
    "\057\117\103\115\105\116\001\002\000\020\023\120\024" +
    "\114\043\u015a\057\237\070\u0159\103\115\105\116\001\002" +
    "\000\062\003\ufeb4\004\ufeb4\006\ufeb4\007\ufeb4\010\ufeb4\011" +
    "\ufeb4\012\ufeb4\020\ufeb4\021\ufeb4\022\ufeb4\026\ufeb4\036\ufeb4" +
    "\037\ufeb4\041\ufeb4\042\ufeb4\043\ufeb4\070\ufeb4\074\ufeb4\075" +
    "\ufeb4\076\ufeb4\077\ufeb4\100\ufeb4\101\ufeb4\102\ufeb4\001\002" +
    "\000\004\073\u015b\001\002\000\054\003\064\004\051\006" +
    "\060\007\066\010\075\011\136\012\103\020\106\021\074" +
    "\022\055\036\070\037\071\041\102\042\107\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\144\001\002" +
    "\000\056\003\064\004\051\006\060\007\066\010\075\011" +
    "\256\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\070\u015d\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\102\144\001\002\000\062\003\ufea7" +
    "\004\ufea7\006\ufea7\007\ufea7\010\ufea7\011\ufea7\012\ufea7\020" +
    "\ufea7\021\ufea7\022\ufea7\026\ufea7\036\ufea7\037\ufea7\041\ufea7" +
    "\042\ufea7\043\ufea7\070\ufea7\074\ufea7\075\ufea7\076\ufea7\077" +
    "\ufea7\100\ufea7\101\ufea7\102\ufea7\001\002\000\132\003\ufed8" +
    "\004\ufed8\006\ufed8\007\ufed8\010\ufed8\011\ufed8\012\ufed8\020" +
    "\ufed8\021\ufed8\022\ufed8\023\ufed8\024\ufed8\026\ufed8\032\ufed8" +
    "\036\ufed8\037\ufed8\041\ufed8\042\ufed8\043\ufed8\046\ufed8\053" +
    "\ufed8\054\ufed8\055\ufed8\056\ufed8\057\ufed8\060\ufed8\061\ufed8" +
    "\062\ufed8\063\ufed8\064\ufed8\065\ufed8\066\ufed8\067\ufed8\070" +
    "\ufed8\074\ufed8\075\ufed8\076\ufed8\077\ufed8\100\ufed8\101\ufed8" +
    "\102\ufed8\103\ufed8\104\ufed8\105\ufed8\001\002\000\010\066" +
    "\u0165\102\u0162\103\u015e\001\002\000\064\003\ufe58\004\ufe58" +
    "\006\ufe58\007\ufe58\010\ufe58\011\ufe58\012\ufe58\020\ufe58\021" +
    "\ufe58\022\ufe58\026\ufe58\036\ufe58\037\ufe58\041\ufe58\042\ufe58" +
    "\043\ufe58\066\ufe58\070\ufe58\074\ufe58\075\ufe58\076\ufe58\077" +
    "\ufe58\100\ufe58\101\ufe58\102\ufe58\001\002\000\004\066\u0163" +
    "\001\002\000\056\003\ufed7\023\ufed7\024\ufed7\032\ufed7\046" +
    "\ufed7\053\ufed7\054\ufed7\055\ufed7\056\ufed7\057\ufed7\060\ufed7" +
    "\061\ufed7\062\ufed7\063\ufed7\064\ufed7\065\ufed7\066\ufed7\067" +
    "\ufed7\102\ufed7\103\ufed7\104\ufed7\105\ufed7\001\002\000\004" +
    "\064\u0164\001\002\000\064\003\ufe59\004\ufe59\006\ufe59\007" +
    "\ufe59\010\ufe59\011\ufe59\012\ufe59\020\ufe59\021\ufe59\022\ufe59" +
    "\026\ufe59\036\ufe59\037\ufe59\041\ufe59\042\ufe59\043\ufe59\066" +
    "\ufe59\070\ufe59\074\ufe59\075\ufe59\076\ufe59\077\ufe59\100\ufe59" +
    "\101\ufe59\102\ufe59\001\002\000\004\064\u016a\001\002\000" +
    "\006\064\u0168\066\u0167\001\002\000\066\003\ufe5c\004\ufe5c" +
    "\006\ufe5c\007\ufe5c\010\ufe5c\011\ufe5c\012\ufe5c\020\ufe5c\021" +
    "\ufe5c\022\ufe5c\026\ufe5c\036\ufe5c\037\ufe5c\041\ufe5c\042\ufe5c" +
    "\043\ufe5c\064\u0169\066\ufe5c\070\ufe5c\074\ufe5c\075\ufe5c\076" +
    "\ufe5c\077\ufe5c\100\ufe5c\101\ufe5c\102\ufe5c\001\002\000\064" +
    "\003\ufe5b\004\ufe5b\006\ufe5b\007\ufe5b\010\ufe5b\011\ufe5b\012" +
    "\ufe5b\020\ufe5b\021\ufe5b\022\ufe5b\026\ufe5b\036\ufe5b\037\ufe5b" +
    "\041\ufe5b\042\ufe5b\043\ufe5b\066\ufe5b\070\ufe5b\074\ufe5b\075" +
    "\ufe5b\076\ufe5b\077\ufe5b\100\ufe5b\101\ufe5b\102\ufe5b\001\002" +
    "\000\064\003\ufe5d\004\ufe5d\006\ufe5d\007\ufe5d\010\ufe5d\011" +
    "\ufe5d\012\ufe5d\020\ufe5d\021\ufe5d\022\ufe5d\026\ufe5d\036\ufe5d" +
    "\037\ufe5d\041\ufe5d\042\ufe5d\043\ufe5d\066\ufe5d\070\ufe5d\074" +
    "\ufe5d\075\ufe5d\076\ufe5d\077\ufe5d\100\ufe5d\101\ufe5d\102\ufe5d" +
    "\001\002\000\064\003\ufe5a\004\ufe5a\006\ufe5a\007\ufe5a\010" +
    "\ufe5a\011\ufe5a\012\ufe5a\020\ufe5a\021\ufe5a\022\ufe5a\026\ufe5a" +
    "\036\ufe5a\037\ufe5a\041\ufe5a\042\ufe5a\043\ufe5a\066\ufe5a\070" +
    "\ufe5a\074\ufe5a\075\ufe5a\076\ufe5a\077\ufe5a\100\ufe5a\101\ufe5a" +
    "\102\ufe5a\001\002\000\062\003\uffd6\004\uffd6\006\uffd6\007" +
    "\uffd6\010\uffd6\011\uffd6\012\uffd6\020\uffd6\021\uffd6\022\uffd6" +
    "\026\uffd6\036\uffd6\037\uffd6\041\uffd6\042\uffd6\043\uffd6\070" +
    "\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6" +
    "\102\uffd6\001\002\000\062\003\uffd8\004\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\026\uffd8\036\uffd8\037\uffd8\041\uffd8\042\uffd8\043\uffd8\070" +
    "\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8" +
    "\102\uffd8\001\002\000\064\003\uffd7\004\uffd7\006\uffd7\007" +
    "\uffd7\010\uffd7\011\uffd7\012\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\026\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7\064" +
    "\u016e\070\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7" +
    "\101\uffd7\102\uffd7\001\002\000\062\003\uffd9\004\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\026\uffd9\036\uffd9\037\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\070\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9" +
    "\101\uffd9\102\uffd9\001\002\000\010\064\u0181\102\u0162\103" +
    "\u015e\001\002\000\010\066\u0175\102\u0178\103\u015e\001\002" +
    "\000\062\003\ufe38\004\ufe38\006\ufe38\007\ufe38\010\ufe38\011" +
    "\ufe38\012\ufe38\020\ufe38\021\ufe38\022\ufe38\026\ufe38\036\ufe38" +
    "\037\ufe38\041\ufe38\042\ufe38\043\ufe38\070\ufe38\074\ufe38\075" +
    "\ufe38\076\ufe38\077\ufe38\100\ufe38\101\ufe38\102\ufe38\001\002" +
    "\000\004\066\u0173\001\002\000\004\064\u0174\001\002\000" +
    "\062\003\ufe3a\004\ufe3a\006\ufe3a\007\ufe3a\010\ufe3a\011\ufe3a" +
    "\012\ufe3a\020\ufe3a\021\ufe3a\022\ufe3a\026\ufe3a\036\ufe3a\037" +
    "\ufe3a\041\ufe3a\042\ufe3a\043\ufe3a\070\ufe3a\074\ufe3a\075\ufe3a" +
    "\076\ufe3a\077\ufe3a\100\ufe3a\101\ufe3a\102\ufe3a\001\002\000" +
    "\064\003\ufe37\004\ufe37\006\ufe37\007\ufe37\010\ufe37\011\ufe37" +
    "\012\ufe37\020\ufe37\021\ufe37\022\ufe37\026\ufe37\036\ufe37\037" +
    "\ufe37\041\ufe37\042\ufe37\043\ufe37\064\u0180\070\ufe37\074\ufe37" +
    "\075\ufe37\076\ufe37\077\ufe37\100\ufe37\101\ufe37\102\ufe37\001" +
    "\002\000\070\003\ufe36\004\ufe36\006\ufe36\007\ufe36\010\ufe36" +
    "\011\ufe36\012\ufe36\020\ufe36\021\ufe36\022\ufe36\026\ufe36\036" +
    "\ufe36\037\ufe36\041\ufe36\042\ufe36\043\ufe36\064\u017d\065\u017b" +
    "\066\u017c\070\ufe36\074\ufe36\075\ufe36\076\ufe36\077\ufe36\100" +
    "\ufe36\101\ufe36\102\ufe36\001\002\000\004\066\u0179\001\002" +
    "\000\072\003\ufed7\004\ufed7\006\ufed7\007\ufed7\010\ufed7\011" +
    "\ufed7\012\ufed7\020\ufed7\021\ufed7\022\ufed7\026\ufed7\036\ufed7" +
    "\037\ufed7\041\ufed7\042\ufed7\043\ufed7\046\150\064\ufed7\065" +
    "\ufed7\066\ufed7\070\ufed7\074\ufed7\075\ufed7\076\ufed7\077\ufed7" +
    "\100\ufed7\101\ufed7\102\ufed7\001\002\000\004\064\u017a\001" +
    "\002\000\062\003\ufe3e\004\ufe3e\006\ufe3e\007\ufe3e\010\ufe3e" +
    "\011\ufe3e\012\ufe3e\020\ufe3e\021\ufe3e\022\ufe3e\026\ufe3e\036" +
    "\ufe3e\037\ufe3e\041\ufe3e\042\ufe3e\043\ufe3e\070\ufe3e\074\ufe3e" +
    "\075\ufe3e\076\ufe3e\077\ufe3e\100\ufe3e\101\ufe3e\102\ufe3e\001" +
    "\002\000\004\064\u017f\001\002\000\064\003\ufe3d\004\ufe3d" +
    "\006\ufe3d\007\ufe3d\010\ufe3d\011\ufe3d\012\ufe3d\020\ufe3d\021" +
    "\ufe3d\022\ufe3d\026\ufe3d\036\ufe3d\037\ufe3d\041\ufe3d\042\ufe3d" +
    "\043\ufe3d\064\u017e\070\ufe3d\074\ufe3d\075\ufe3d\076\ufe3d\077" +
    "\ufe3d\100\ufe3d\101\ufe3d\102\ufe3d\001\002\000\062\003\ufe3c" +
    "\004\ufe3c\006\ufe3c\007\ufe3c\010\ufe3c\011\ufe3c\012\ufe3c\020" +
    "\ufe3c\021\ufe3c\022\ufe3c\026\ufe3c\036\ufe3c\037\ufe3c\041\ufe3c" +
    "\042\ufe3c\043\ufe3c\070\ufe3c\074\ufe3c\075\ufe3c\076\ufe3c\077" +
    "\ufe3c\100\ufe3c\101\ufe3c\102\ufe3c\001\002\000\062\003\ufe3f" +
    "\004\ufe3f\006\ufe3f\007\ufe3f\010\ufe3f\011\ufe3f\012\ufe3f\020" +
    "\ufe3f\021\ufe3f\022\ufe3f\026\ufe3f\036\ufe3f\037\ufe3f\041\ufe3f" +
    "\042\ufe3f\043\ufe3f\070\ufe3f\074\ufe3f\075\ufe3f\076\ufe3f\077" +
    "\ufe3f\100\ufe3f\101\ufe3f\102\ufe3f\001\002\000\062\003\ufe33" +
    "\004\ufe33\006\ufe33\007\ufe33\010\ufe33\011\ufe33\012\ufe33\020" +
    "\ufe33\021\ufe33\022\ufe33\026\ufe33\036\ufe33\037\ufe33\041\ufe33" +
    "\042\ufe33\043\ufe33\070\ufe33\074\ufe33\075\ufe33\076\ufe33\077" +
    "\ufe33\100\ufe33\101\ufe33\102\ufe33\001\002\000\062\003\ufe3b" +
    "\004\ufe3b\006\ufe3b\007\ufe3b\010\ufe3b\011\ufe3b\012\ufe3b\020" +
    "\ufe3b\021\ufe3b\022\ufe3b\026\ufe3b\036\ufe3b\037\ufe3b\041\ufe3b" +
    "\042\ufe3b\043\ufe3b\070\ufe3b\074\ufe3b\075\ufe3b\076\ufe3b\077" +
    "\ufe3b\100\ufe3b\101\ufe3b\102\ufe3b\001\002\000\062\003\ufe39" +
    "\004\ufe39\006\ufe39\007\ufe39\010\ufe39\011\ufe39\012\ufe39\020" +
    "\ufe39\021\ufe39\022\ufe39\026\ufe39\036\ufe39\037\ufe39\041\ufe39" +
    "\042\ufe39\043\ufe39\070\ufe39\074\ufe39\075\ufe39\076\ufe39\077" +
    "\ufe39\100\ufe39\101\ufe39\102\ufe39\001\002\000\006\065\u0183" +
    "\066\u0184\001\002\000\004\064\u0186\001\002\000\004\064" +
    "\u0185\001\002\000\062\003\ufe34\004\ufe34\006\ufe34\007\ufe34" +
    "\010\ufe34\011\ufe34\012\ufe34\020\ufe34\021\ufe34\022\ufe34\026" +
    "\ufe34\036\ufe34\037\ufe34\041\ufe34\042\ufe34\043\ufe34\070\ufe34" +
    "\074\ufe34\075\ufe34\076\ufe34\077\ufe34\100\ufe34\101\ufe34\102" +
    "\ufe34\001\002\000\062\003\ufe35\004\ufe35\006\ufe35\007\ufe35" +
    "\010\ufe35\011\ufe35\012\ufe35\020\ufe35\021\ufe35\022\ufe35\026" +
    "\ufe35\036\ufe35\037\ufe35\041\ufe35\042\ufe35\043\ufe35\070\ufe35" +
    "\074\ufe35\075\ufe35\076\ufe35\077\ufe35\100\ufe35\101\ufe35\102" +
    "\ufe35\001\002\000\032\002\uffde\003\uffde\013\uffde\025\uffde" +
    "\033\uffde\074\uffde\075\uffde\076\uffde\077\uffde\100\uffde\101" +
    "\uffde\102\uffde\001\002\000\026\003\u018d\022\u01df\064\u01e0" +
    "\074\u018c\075\u0190\076\u018f\077\u018a\100\u018e\101\u0191\102" +
    "\u01e2\001\002\000\020\003\u018d\074\u018c\075\u0190\076\u018f" +
    "\077\u018a\100\u018e\101\u0191\001\002\000\006\046\ufe1b\102" +
    "\ufe1b\001\002\000\004\102\u0193\001\002\000\006\046\ufe1a" +
    "\102\ufe1a\001\002\000\004\064\u0192\001\002\000\006\046" +
    "\ufe18\102\ufe18\001\002\000\006\046\ufe1c\102\ufe1c\001\002" +
    "\000\006\046\ufe1d\102\ufe1d\001\002\000\006\046\ufe19\102" +
    "\ufe19\001\002\000\006\046\ufe17\102\ufe17\001\002\000\004" +
    "\046\u0194\001\002\000\006\102\u0162\103\u015e\001\002\000" +
    "\004\064\u0196\001\002\000\050\003\u01a1\023\u0199\024\u01a0" +
    "\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f\056\u01aa\057" +
    "\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e\065\u0197\102\u0162" +
    "\103\u015e\104\u019a\105\u019d\001\002\000\050\003\u01a1\023" +
    "\u0199\024\u01a0\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f" +
    "\056\u01aa\057\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e\065" +
    "\u0197\102\u0162\103\u015e\104\u019a\105\u019d\001\002\000\042" +
    "\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f\057\u01a5\060" +
    "\u019c\061\u019b\062\u01a6\063\u019e\064\uff1b\066\uff1b\067\uff1b" +
    "\102\u0162\103\u015e\104\u019a\001\002\000\056\003\u01a1\023" +
    "\u0199\024\u01a0\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f" +
    "\056\u01aa\057\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e\064" +
    "\uff19\065\u0197\066\uff19\067\uff19\102\u0162\103\u015e\104\u019a" +
    "\105\u019d\001\002\000\056\003\uff03\023\uff03\024\uff03\032" +
    "\uff03\046\uff03\053\uff03\054\uff03\055\uff03\056\uff03\057\uff03" +
    "\060\uff03\061\uff03\062\uff03\063\uff03\064\uff03\065\uff03\066" +
    "\uff03\067\uff03\102\uff03\103\uff03\104\uff03\105\uff03\001\002" +
    "\000\056\003\uff05\023\uff05\024\uff05\032\uff05\046\uff05\053" +
    "\uff05\054\uff05\055\uff05\056\uff05\057\uff05\060\uff05\061\uff05" +
    "\062\uff05\063\uff05\064\uff05\065\uff05\066\uff05\067\uff05\102" +
    "\uff05\103\uff05\104\uff05\105\uff05\001\002\000\056\003\uff06" +
    "\023\uff06\024\uff06\032\uff06\046\uff06\053\uff06\054\uff06\055" +
    "\uff06\056\uff06\057\uff06\060\uff06\061\uff06\062\uff06\063\uff06" +
    "\064\uff06\065\uff06\066\uff06\067\uff06\102\uff06\103\uff06\104" +
    "\uff06\105\uff06\001\002\000\036\032\u01a9\046\u01a4\053\u01a2" +
    "\054\u01a8\055\u019f\057\u01a5\060\u019c\061\u019b\062\u01a6\063" +
    "\u019e\064\uff10\066\uff10\067\uff10\104\u019a\001\002\000\056" +
    "\003\uff09\023\uff09\024\uff09\032\uff09\046\uff09\053\uff09\054" +
    "\uff09\055\uff09\056\uff09\057\uff09\060\uff09\061\uff09\062\uff09" +
    "\063\uff09\064\uff09\065\uff09\066\uff09\067\uff09\102\uff09\103" +
    "\uff09\104\uff09\105\uff09\001\002\000\056\003\uff0c\023\uff0c" +
    "\024\uff0c\032\uff0c\046\uff0c\053\uff0c\054\uff0c\055\uff0c\056" +
    "\uff0c\057\uff0c\060\uff0c\061\uff0c\062\uff0c\063\uff0c\064\uff0c" +
    "\065\uff0c\066\uff0c\067\uff0c\102\uff0c\103\uff0c\104\uff0c\105" +
    "\uff0c\001\002\000\056\003\u01a1\023\u0199\024\u01a0\032\u01a9" +
    "\046\u01a4\053\u01a2\054\u01a8\055\u019f\056\u01aa\057\u01a5\060" +
    "\u019c\061\u019b\062\u01a6\063\u019e\064\uff1a\065\u0197\066\uff1a" +
    "\067\uff1a\102\u0162\103\u015e\104\u019a\105\u019d\001\002\000" +
    "\004\064\u01d2\001\002\000\056\003\uff0b\023\uff0b\024\uff0b" +
    "\032\uff0b\046\uff0b\053\uff0b\054\uff0b\055\uff0b\056\uff0b\057" +
    "\uff0b\060\uff0b\061\uff0b\062\uff0b\063\uff0b\064\uff0b\065\uff0b" +
    "\066\uff0b\067\uff0b\102\uff0b\103\uff0b\104\uff0b\105\uff0b\001" +
    "\002\000\014\064\uff13\066\uff13\067\uff13\102\u0162\103\u015e" +
    "\001\002\000\056\003\uff02\023\uff02\024\uff02\032\uff02\046" +
    "\uff02\053\uff02\054\uff02\055\uff02\056\uff02\057\uff02\060\uff02" +
    "\061\uff02\062\uff02\063\uff02\064\uff02\065\uff02\066\uff02\067" +
    "\uff02\102\uff02\103\uff02\104\uff02\105\uff02\001\002\000\056" +
    "\003\uff04\023\uff04\024\uff04\032\uff04\046\uff04\053\uff04\054" +
    "\uff04\055\uff04\056\uff04\057\uff04\060\uff04\061\uff04\062\uff04" +
    "\063\uff04\064\uff04\065\uff04\066\uff04\067\uff04\102\uff04\103" +
    "\uff04\104\uff04\105\uff04\001\002\000\056\003\uff07\023\uff07" +
    "\024\uff07\032\uff07\046\uff07\053\uff07\054\uff07\055\uff07\056" +
    "\uff07\057\uff07\060\uff07\061\uff07\062\uff07\063\uff07\064\uff07" +
    "\065\uff07\066\uff07\067\uff07\102\uff07\103\uff07\104\uff07\105" +
    "\uff07\001\002\000\004\064\u01b0\001\002\000\056\003\uff0a" +
    "\023\uff0a\024\uff0a\032\uff0a\046\uff0a\053\uff0a\054\uff0a\055" +
    "\uff0a\056\uff0a\057\uff0a\060\uff0a\061\uff0a\062\uff0a\063\uff0a" +
    "\064\uff0a\065\uff0a\066\uff0a\067\uff0a\102\uff0a\103\uff0a\104" +
    "\uff0a\105\uff0a\001\002\000\056\003\uff08\023\uff08\024\uff08" +
    "\032\uff08\046\uff08\053\uff08\054\uff08\055\uff08\056\uff08\057" +
    "\uff08\060\uff08\061\uff08\062\uff08\063\uff08\064\uff08\065\uff08" +
    "\066\uff08\067\uff08\102\uff08\103\uff08\104\uff08\105\uff08\001" +
    "\002\000\032\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f" +
    "\057\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e\102\u01ac\104" +
    "\u019a\001\002\000\006\102\u0162\103\u015e\001\002\000\036" +
    "\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f\057\u01a5\060" +
    "\u019c\061\u019b\062\u01a6\063\u019e\064\uff1d\066\uff1d\067\uff1d" +
    "\104\u019a\001\002\000\050\003\u01a1\023\u0199\024\u01a0\032" +
    "\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f\056\u01aa\057\u01a5" +
    "\060\u019c\061\u019b\062\u01a6\063\u019e\065\u0197\102\u0162\103" +
    "\u015e\104\u019a\105\u019d\001\002\000\010\064\uff1c\066\uff1c" +
    "\067\uff1c\001\002\000\010\064\uff14\066\uff14\067\uff14\001" +
    "\002\000\016\003\u01b5\047\u01b8\050\u01b7\051\u01b6\052\u01b9" +
    "\102\u01b4\001\002\000\004\066\u01cd\001\002\000\010\065" +
    "\ufe1e\066\ufe1e\067\ufe1e\001\002\000\004\046\u01ca\001\002" +
    "\000\014\003\u01bc\047\u01bd\050\u01be\051\u01b6\052\u01b9\001" +
    "\002\000\004\064\u01ba\001\002\000\010\046\ufe11\102\ufe11" +
    "\103\ufe11\001\002\000\004\046\ufe12\001\002\000\004\046" +
    "\ufe13\001\002\000\010\046\ufe10\102\ufe10\103\ufe10\001\002" +
    "\000\012\046\ufe0f\065\ufe08\066\ufe08\067\ufe08\001\002\000" +
    "\010\046\u01c4\102\u0162\103\u015e\001\002\000\004\064\u01c3" +
    "\001\002\000\012\046\ufe13\047\u01c2\102\ufe13\103\ufe13\001" +
    "\002\000\012\046\ufe12\050\u01c1\102\ufe12\103\ufe12\001\002" +
    "\000\012\064\u01c0\065\ufe1f\066\ufe1f\067\ufe1f\001\002\000" +
    "\010\065\ufe0d\066\ufe0d\067\ufe0d\001\002\000\012\064\ufe15" +
    "\065\ufe15\066\ufe15\067\ufe15\001\002\000\012\064\ufe16\065" +
    "\ufe16\066\ufe16\067\ufe16\001\002\000\020\046\ufe0f\064\ufe14" +
    "\065\ufe14\066\ufe14\067\ufe14\102\ufe0f\103\ufe0f\001\002\000" +
    "\010\064\u01c7\102\u0162\103\u015e\001\002\000\004\064\u01c6" +
    "\001\002\000\010\065\ufe0a\066\ufe0a\067\ufe0a\001\002\000" +
    "\010\065\ufe0b\066\ufe0b\067\ufe0b\001\002\000\012\064\u01c9" +
    "\065\ufe0c\066\ufe0c\067\ufe0c\001\002\000\010\065\ufe0e\066" +
    "\ufe0e\067\ufe0e\001\002\000\006\102\u0162\103\u015e\001\002" +
    "\000\004\064\u01cc\001\002\000\010\065\ufe09\066\ufe09\067" +
    "\ufe09\001\002\000\004\067\u01ce\001\002\000\054\003\064" +
    "\004\051\006\060\007\066\010\075\011\136\012\103\020" +
    "\106\021\074\022\055\036\070\037\071\041\102\042\107" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\144\001\002\000\056\003\064\004\051\006\060\007\066" +
    "\010\075\011\256\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\070\u01d0\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\144\001\002\000" +
    "\062\003\ufe30\004\ufe30\006\ufe30\007\ufe30\010\ufe30\011\ufe30" +
    "\012\ufe30\020\ufe30\021\ufe30\022\ufe30\026\ufe30\036\ufe30\037" +
    "\ufe30\041\ufe30\042\ufe30\043\ufe30\070\ufe30\074\ufe30\075\ufe30" +
    "\076\ufe30\077\ufe30\100\ufe30\101\ufe30\102\ufe30\001\002\000" +
    "\010\064\uff12\066\uff12\067\uff12\001\002\000\010\064\uff0d" +
    "\066\uff0d\067\uff0d\001\002\000\010\064\uff17\066\uff17\067" +
    "\uff17\001\002\000\010\102\u0162\103\u015e\105\u01d5\001\002" +
    "\000\010\064\uff0f\066\uff0f\067\uff0f\001\002\000\010\064" +
    "\uff0e\066\uff0e\067\uff0e\001\002\000\010\064\uff16\066\uff16" +
    "\067\uff16\001\002\000\042\032\u01a9\046\u01a4\053\u01a2\054" +
    "\u01a8\055\u019f\057\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e" +
    "\064\uff18\066\uff18\067\uff18\102\u0162\103\u015e\104\u019a\001" +
    "\002\000\010\064\uff15\066\uff15\067\uff15\001\002\000\006" +
    "\102\u0162\103\u015e\001\002\000\010\064\uff1f\066\uff1f\067" +
    "\uff1f\001\002\000\010\064\uff11\066\uff11\067\uff11\001\002" +
    "\000\004\066\u01de\001\002\000\010\064\uff1e\066\uff1e\067" +
    "\uff1e\001\002\000\020\003\u018d\074\u018c\075\u0190\076\u018f" +
    "\077\u018a\100\u018e\101\u0191\001\002\000\052\003\u01a1\023" +
    "\u0199\024\u01a0\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f" +
    "\056\u01aa\057\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e\064" +
    "\u01ff\065\u0197\102\u0162\103\u015e\104\u019a\105\u019d\001\002" +
    "\000\004\102\u01ed\001\002\000\004\046\u01e3\001\002\000" +
    "\006\102\u0162\103\u015e\001\002\000\004\064\u01e5\001\002" +
    "\000\050\003\u01a1\023\u0199\024\u01a0\032\u01a9\046\u01a4\053" +
    "\u01a2\054\u01a8\055\u019f\056\u01aa\057\u01a5\060\u019c\061\u019b" +
    "\062\u01a6\063\u019e\065\u0197\102\u0162\103\u015e\104\u019a\105" +
    "\u019d\001\002\000\004\064\u01e7\001\002\000\016\003\u01b5" +
    "\047\u01b8\050\u01b7\051\u01b6\052\u01b9\102\u01b4\001\002\000" +
    "\004\066\u01e9\001\002\000\004\067\u01ea\001\002\000\054" +
    "\003\064\004\051\006\060\007\066\010\075\011\136\012" +
    "\103\020\106\021\074\022\055\036\070\037\071\041\102" +
    "\042\107\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\144\001\002\000\056\003\064\004\051\006\060" +
    "\007\066\010\075\011\256\012\103\020\106\021\074\022" +
    "\055\036\070\037\071\041\102\042\107\070\u01ec\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\102\144\001" +
    "\002\000\062\003\ufe2f\004\ufe2f\006\ufe2f\007\ufe2f\010\ufe2f" +
    "\011\ufe2f\012\ufe2f\020\ufe2f\021\ufe2f\022\ufe2f\026\ufe2f\036" +
    "\ufe2f\037\ufe2f\041\ufe2f\042\ufe2f\043\ufe2f\070\ufe2f\074\ufe2f" +
    "\075\ufe2f\076\ufe2f\077\ufe2f\100\ufe2f\101\ufe2f\102\ufe2f\001" +
    "\002\000\004\046\u01ee\001\002\000\010\064\u01ef\102\u0162" +
    "\103\u015e\001\002\000\050\003\u01a1\023\u0199\024\u01a0\032" +
    "\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f\056\u01aa\057\u01a5" +
    "\060\u019c\061\u019b\062\u01a6\063\u019e\065\u0197\102\u0162\103" +
    "\u015e\104\u019a\105\u019d\001\002\000\004\064\u01f1\001\002" +
    "\000\004\064\u01f2\001\002\000\016\003\u01b5\047\u01b8\050" +
    "\u01b7\051\u01b6\052\u01b9\102\u01b4\001\002\000\004\066\u01f4" +
    "\001\002\000\004\067\u01f5\001\002\000\054\003\064\004" +
    "\051\006\060\007\066\010\075\011\136\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\144" +
    "\001\002\000\056\003\064\004\051\006\060\007\066\010" +
    "\075\011\256\012\103\020\106\021\074\022\055\036\070" +
    "\037\071\041\102\042\107\070\u01f7\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\144\001\002\000\062" +
    "\003\ufe2a\004\ufe2a\006\ufe2a\007\ufe2a\010\ufe2a\011\ufe2a\012" +
    "\ufe2a\020\ufe2a\021\ufe2a\022\ufe2a\026\ufe2a\036\ufe2a\037\ufe2a" +
    "\041\ufe2a\042\ufe2a\043\ufe2a\070\ufe2a\074\ufe2a\075\ufe2a\076" +
    "\ufe2a\077\ufe2a\100\ufe2a\101\ufe2a\102\ufe2a\001\002\000\004" +
    "\064\u01f9\001\002\000\016\003\u01b5\047\u01b8\050\u01b7\051" +
    "\u01b6\052\u01b9\102\u01b4\001\002\000\004\066\u01fb\001\002" +
    "\000\004\067\u01fc\001\002\000\054\003\064\004\051\006" +
    "\060\007\066\010\075\011\136\012\103\020\106\021\074" +
    "\022\055\036\070\037\071\041\102\042\107\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\144\001\002" +
    "\000\056\003\064\004\051\006\060\007\066\010\075\011" +
    "\256\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\070\u01fe\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\102\144\001\002\000\062\003\ufe20" +
    "\004\ufe20\006\ufe20\007\ufe20\010\ufe20\011\ufe20\012\ufe20\020" +
    "\ufe20\021\ufe20\022\ufe20\026\ufe20\036\ufe20\037\ufe20\041\ufe20" +
    "\042\ufe20\043\ufe20\070\ufe20\074\ufe20\075\ufe20\076\ufe20\077" +
    "\ufe20\100\ufe20\101\ufe20\102\ufe20\001\002\000\016\003\u01b5" +
    "\047\u01b8\050\u01b7\051\u01b6\052\u01b9\102\u01b4\001\002\000" +
    "\004\064\u0201\001\002\000\020\003\u01b5\047\u01b8\050\u01b7" +
    "\051\u01b6\052\u01b9\066\u0203\102\u01b4\001\002\000\010\065" +
    "\u0208\066\u0207\067\u0209\001\002\000\004\067\u0204\001\002" +
    "\000\054\003\064\004\051\006\060\007\066\010\075\011" +
    "\136\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\144\001\002\000\056\003\064\004\051" +
    "\006\060\007\066\010\075\011\256\012\103\020\106\021" +
    "\074\022\055\036\070\037\071\041\102\042\107\070\u0206" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\144\001\002\000\062\003\ufe24\004\ufe24\006\ufe24\007\ufe24" +
    "\010\ufe24\011\ufe24\012\ufe24\020\ufe24\021\ufe24\022\ufe24\026" +
    "\ufe24\036\ufe24\037\ufe24\041\ufe24\042\ufe24\043\ufe24\070\ufe24" +
    "\074\ufe24\075\ufe24\076\ufe24\077\ufe24\100\ufe24\101\ufe24\102" +
    "\ufe24\001\002\000\004\067\u0210\001\002\000\056\003\064" +
    "\004\051\006\060\007\066\010\075\011\136\012\103\020" +
    "\106\021\074\022\055\036\070\037\071\041\102\042\107" +
    "\067\u020c\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\144\001\002\000\054\003\064\004\051\006\060" +
    "\007\066\010\075\011\136\012\103\020\106\021\074\022" +
    "\055\036\070\037\071\041\102\042\107\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\144\001\002\000" +
    "\056\003\064\004\051\006\060\007\066\010\075\011\256" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\070\u020b\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\144\001\002\000\062\003\ufe23\004" +
    "\ufe23\006\ufe23\007\ufe23\010\ufe23\011\ufe23\012\ufe23\020\ufe23" +
    "\021\ufe23\022\ufe23\026\ufe23\036\ufe23\037\ufe23\041\ufe23\042" +
    "\ufe23\043\ufe23\070\ufe23\074\ufe23\075\ufe23\076\ufe23\077\ufe23" +
    "\100\ufe23\101\ufe23\102\ufe23\001\002\000\004\070\u020f\001" +
    "\002\000\056\003\064\004\051\006\060\007\066\010\075" +
    "\011\256\012\103\020\106\021\074\022\055\036\070\037" +
    "\071\041\102\042\107\070\u020e\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\062\003" +
    "\ufe22\004\ufe22\006\ufe22\007\ufe22\010\ufe22\011\ufe22\012\ufe22" +
    "\020\ufe22\021\ufe22\022\ufe22\026\ufe22\036\ufe22\037\ufe22\041" +
    "\ufe22\042\ufe22\043\ufe22\070\ufe22\074\ufe22\075\ufe22\076\ufe22" +
    "\077\ufe22\100\ufe22\101\ufe22\102\ufe22\001\002\000\062\003" +
    "\ufe21\004\ufe21\006\ufe21\007\ufe21\010\ufe21\011\ufe21\012\ufe21" +
    "\020\ufe21\021\ufe21\022\ufe21\026\ufe21\036\ufe21\037\ufe21\041" +
    "\ufe21\042\ufe21\043\ufe21\070\ufe21\074\ufe21\075\ufe21\076\ufe21" +
    "\077\ufe21\100\ufe21\101\ufe21\102\ufe21\001\002\000\054\003" +
    "\064\004\051\006\060\007\066\010\075\011\136\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\056\003\064\004\051\006\060\007" +
    "\066\010\075\011\256\012\103\020\106\021\074\022\055" +
    "\036\070\037\071\041\102\042\107\070\u0212\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\144\001\002" +
    "\000\062\003\ufe31\004\ufe31\006\ufe31\007\ufe31\010\ufe31\011" +
    "\ufe31\012\ufe31\020\ufe31\021\ufe31\022\ufe31\026\ufe31\036\ufe31" +
    "\037\ufe31\041\ufe31\042\ufe31\043\ufe31\070\ufe31\074\ufe31\075" +
    "\ufe31\076\ufe31\077\ufe31\100\ufe31\101\ufe31\102\ufe31\001\002" +
    "\000\004\066\u0214\001\002\000\004\067\u0215\001\002\000" +
    "\054\003\064\004\051\006\060\007\066\010\075\011\136" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\144\001\002\000\056\003\064\004\051\006" +
    "\060\007\066\010\075\011\256\012\103\020\106\021\074" +
    "\022\055\036\070\037\071\041\102\042\107\070\u0217\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\144" +
    "\001\002\000\062\003\ufe25\004\ufe25\006\ufe25\007\ufe25\010" +
    "\ufe25\011\ufe25\012\ufe25\020\ufe25\021\ufe25\022\ufe25\026\ufe25" +
    "\036\ufe25\037\ufe25\041\ufe25\042\ufe25\043\ufe25\070\ufe25\074" +
    "\ufe25\075\ufe25\076\ufe25\077\ufe25\100\ufe25\101\ufe25\102\ufe25" +
    "\001\002\000\006\046\u0219\102\u021a\001\002\000\006\102" +
    "\u0162\103\u015e\001\002\000\010\046\u021b\102\u0162\103\u015e" +
    "\001\002\000\010\064\u0225\102\u0162\103\u015e\001\002\000" +
    "\004\064\u021d\001\002\000\050\003\u01a1\023\u0199\024\u01a0" +
    "\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f\056\u01aa\057" +
    "\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e\065\u0197\102\u0162" +
    "\103\u015e\104\u019a\105\u019d\001\002\000\004\064\u021f\001" +
    "\002\000\016\003\u01b5\047\u01b8\050\u01b7\051\u01b6\052\u01b9" +
    "\102\u01b4\001\002\000\004\066\u0221\001\002\000\004\067" +
    "\u0222\001\002\000\054\003\064\004\051\006\060\007\066" +
    "\010\075\011\136\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\056\003" +
    "\064\004\051\006\060\007\066\010\075\011\256\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\070\u0224\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\144\001\002\000\062\003\ufe2d\004\ufe2d\006" +
    "\ufe2d\007\ufe2d\010\ufe2d\011\ufe2d\012\ufe2d\020\ufe2d\021\ufe2d" +
    "\022\ufe2d\026\ufe2d\036\ufe2d\037\ufe2d\041\ufe2d\042\ufe2d\043" +
    "\ufe2d\070\ufe2d\074\ufe2d\075\ufe2d\076\ufe2d\077\ufe2d\100\ufe2d" +
    "\101\ufe2d\102\ufe2d\001\002\000\050\003\u01a1\023\u0199\024" +
    "\u01a0\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f\056\u01aa" +
    "\057\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e\065\u0197\102" +
    "\u0162\103\u015e\104\u019a\105\u019d\001\002\000\052\003\u01a1" +
    "\023\u0199\024\u01a0\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055" +
    "\u019f\056\u01aa\057\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e" +
    "\064\u0227\065\u0197\102\u0162\103\u015e\104\u019a\105\u019d\001" +
    "\002\000\050\003\u01a1\023\u0199\024\u01a0\032\u01a9\046\u01a4" +
    "\053\u01a2\054\u01a8\055\u019f\056\u01aa\057\u01a5\060\u019c\061" +
    "\u019b\062\u01a6\063\u019e\065\u0197\102\u0162\103\u015e\104\u019a" +
    "\105\u019d\001\002\000\004\064\u0229\001\002\000\016\003" +
    "\u01b5\047\u01b8\050\u01b7\051\u01b6\052\u01b9\102\u01b4\001\002" +
    "\000\004\066\u022b\001\002\000\004\067\u022c\001\002\000" +
    "\054\003\064\004\051\006\060\007\066\010\075\011\136" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\144\001\002\000\056\003\064\004\051\006" +
    "\060\007\066\010\075\011\256\012\103\020\106\021\074" +
    "\022\055\036\070\037\071\041\102\042\107\070\u022e\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\144" +
    "\001\002\000\062\003\ufe2b\004\ufe2b\006\ufe2b\007\ufe2b\010" +
    "\ufe2b\011\ufe2b\012\ufe2b\020\ufe2b\021\ufe2b\022\ufe2b\026\ufe2b" +
    "\036\ufe2b\037\ufe2b\041\ufe2b\042\ufe2b\043\ufe2b\070\ufe2b\074" +
    "\ufe2b\075\ufe2b\076\ufe2b\077\ufe2b\100\ufe2b\101\ufe2b\102\ufe2b" +
    "\001\002\000\004\064\u0230\001\002\000\020\003\u01b5\047" +
    "\u01b8\050\u01b7\051\u01b6\052\u01b9\066\u0232\102\u01b4\001\002" +
    "\000\010\065\u0237\066\u0236\067\u0238\001\002\000\004\067" +
    "\u0233\001\002\000\054\003\064\004\051\006\060\007\066" +
    "\010\075\011\136\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\056\003" +
    "\064\004\051\006\060\007\066\010\075\011\256\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\070\u0235\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\144\001\002\000\062\003\ufe29\004\ufe29\006" +
    "\ufe29\007\ufe29\010\ufe29\011\ufe29\012\ufe29\020\ufe29\021\ufe29" +
    "\022\ufe29\026\ufe29\036\ufe29\037\ufe29\041\ufe29\042\ufe29\043" +
    "\ufe29\070\ufe29\074\ufe29\075\ufe29\076\ufe29\077\ufe29\100\ufe29" +
    "\101\ufe29\102\ufe29\001\002\000\004\067\u023f\001\002\000" +
    "\056\003\064\004\051\006\060\007\066\010\075\011\136" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\067\u023b\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\144\001\002\000\054\003\064\004" +
    "\051\006\060\007\066\010\075\011\136\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\144" +
    "\001\002\000\056\003\064\004\051\006\060\007\066\010" +
    "\075\011\256\012\103\020\106\021\074\022\055\036\070" +
    "\037\071\041\102\042\107\070\u023a\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\144\001\002\000\062" +
    "\003\ufe28\004\ufe28\006\ufe28\007\ufe28\010\ufe28\011\ufe28\012" +
    "\ufe28\020\ufe28\021\ufe28\022\ufe28\026\ufe28\036\ufe28\037\ufe28" +
    "\041\ufe28\042\ufe28\043\ufe28\070\ufe28\074\ufe28\075\ufe28\076" +
    "\ufe28\077\ufe28\100\ufe28\101\ufe28\102\ufe28\001\002\000\004" +
    "\070\u023e\001\002\000\056\003\064\004\051\006\060\007" +
    "\066\010\075\011\256\012\103\020\106\021\074\022\055" +
    "\036\070\037\071\041\102\042\107\070\u023d\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\144\001\002" +
    "\000\062\003\ufe27\004\ufe27\006\ufe27\007\ufe27\010\ufe27\011" +
    "\ufe27\012\ufe27\020\ufe27\021\ufe27\022\ufe27\026\ufe27\036\ufe27" +
    "\037\ufe27\041\ufe27\042\ufe27\043\ufe27\070\ufe27\074\ufe27\075" +
    "\ufe27\076\ufe27\077\ufe27\100\ufe27\101\ufe27\102\ufe27\001\002" +
    "\000\062\003\ufe26\004\ufe26\006\ufe26\007\ufe26\010\ufe26\011" +
    "\ufe26\012\ufe26\020\ufe26\021\ufe26\022\ufe26\026\ufe26\036\ufe26" +
    "\037\ufe26\041\ufe26\042\ufe26\043\ufe26\070\ufe26\074\ufe26\075" +
    "\ufe26\076\ufe26\077\ufe26\100\ufe26\101\ufe26\102\ufe26\001\002" +
    "\000\054\003\064\004\051\006\060\007\066\010\075\011" +
    "\136\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\144\001\002\000\056\003\064\004\051" +
    "\006\060\007\066\010\075\011\256\012\103\020\106\021" +
    "\074\022\055\036\070\037\071\041\102\042\107\070\u0241" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\144\001\002\000\062\003\ufe32\004\ufe32\006\ufe32\007\ufe32" +
    "\010\ufe32\011\ufe32\012\ufe32\020\ufe32\021\ufe32\022\ufe32\026" +
    "\ufe32\036\ufe32\037\ufe32\041\ufe32\042\ufe32\043\ufe32\070\ufe32" +
    "\074\ufe32\075\ufe32\076\ufe32\077\ufe32\100\ufe32\101\ufe32\102" +
    "\ufe32\001\002\000\004\064\u0243\001\002\000\016\003\u01b5" +
    "\047\u01b8\050\u01b7\051\u01b6\052\u01b9\102\u01b4\001\002\000" +
    "\004\066\u0245\001\002\000\004\067\u0246\001\002\000\054" +
    "\003\064\004\051\006\060\007\066\010\075\011\136\012" +
    "\103\020\106\021\074\022\055\036\070\037\071\041\102" +
    "\042\107\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\144\001\002\000\056\003\064\004\051\006\060" +
    "\007\066\010\075\011\256\012\103\020\106\021\074\022" +
    "\055\036\070\037\071\041\102\042\107\070\u0248\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\102\144\001" +
    "\002\000\062\003\ufe2c\004\ufe2c\006\ufe2c\007\ufe2c\010\ufe2c" +
    "\011\ufe2c\012\ufe2c\020\ufe2c\021\ufe2c\022\ufe2c\026\ufe2c\036" +
    "\ufe2c\037\ufe2c\041\ufe2c\042\ufe2c\043\ufe2c\070\ufe2c\074\ufe2c" +
    "\075\ufe2c\076\ufe2c\077\ufe2c\100\ufe2c\101\ufe2c\102\ufe2c\001" +
    "\002\000\004\064\u024a\001\002\000\050\003\u01a1\023\u0199" +
    "\024\u01a0\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f\056" +
    "\u01aa\057\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e\065\u0197" +
    "\102\u0162\103\u015e\104\u019a\105\u019d\001\002\000\004\064" +
    "\u024c\001\002\000\016\003\u01b5\047\u01b8\050\u01b7\051\u01b6" +
    "\052\u01b9\102\u01b4\001\002\000\004\066\u024e\001\002\000" +
    "\004\067\u024f\001\002\000\054\003\064\004\051\006\060" +
    "\007\066\010\075\011\136\012\103\020\106\021\074\022" +
    "\055\036\070\037\071\041\102\042\107\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\144\001\002\000" +
    "\056\003\064\004\051\006\060\007\066\010\075\011\256" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\070\u0251\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\144\001\002\000\062\003\ufe2e\004" +
    "\ufe2e\006\ufe2e\007\ufe2e\010\ufe2e\011\ufe2e\012\ufe2e\020\ufe2e" +
    "\021\ufe2e\022\ufe2e\026\ufe2e\036\ufe2e\037\ufe2e\041\ufe2e\042" +
    "\ufe2e\043\ufe2e\070\ufe2e\074\ufe2e\075\ufe2e\076\ufe2e\077\ufe2e" +
    "\100\ufe2e\101\ufe2e\102\ufe2e\001\002\000\012\031\u0261\066" +
    "\u0260\102\u0263\104\u0262\001\002\000\004\105\u025d\001\002" +
    "\000\004\104\u0255\001\002\000\006\102\u0162\103\u015e\001" +
    "\002\000\006\066\u0257\104\u0258\001\002\000\004\064\u025c" +
    "\001\002\000\006\102\u0162\103\u015e\001\002\000\004\066" +
    "\u025a\001\002\000\004\064\u025b\001\002\000\062\003\ufe46" +
    "\004\ufe46\006\ufe46\007\ufe46\010\ufe46\011\ufe46\012\ufe46\020" +
    "\ufe46\021\ufe46\022\ufe46\026\ufe46\036\ufe46\037\ufe46\041\ufe46" +
    "\042\ufe46\043\ufe46\070\ufe46\074\ufe46\075\ufe46\076\ufe46\077" +
    "\ufe46\100\ufe46\101\ufe46\102\ufe46\001\002\000\062\003\ufe4f" +
    "\004\ufe4f\006\ufe4f\007\ufe4f\010\ufe4f\011\ufe4f\012\ufe4f\020" +
    "\ufe4f\021\ufe4f\022\ufe4f\026\ufe4f\036\ufe4f\037\ufe4f\041\ufe4f" +
    "\042\ufe4f\043\ufe4f\070\ufe4f\074\ufe4f\075\ufe4f\076\ufe4f\077" +
    "\ufe4f\100\ufe4f\101\ufe4f\102\ufe4f\001\002\000\004\066\u025e" +
    "\001\002\000\004\064\u025f\001\002\000\062\003\ufe40\004" +
    "\ufe40\006\ufe40\007\ufe40\010\ufe40\011\ufe40\012\ufe40\020\ufe40" +
    "\021\ufe40\022\ufe40\026\ufe40\036\ufe40\037\ufe40\041\ufe40\042" +
    "\ufe40\043\ufe40\070\ufe40\074\ufe40\075\ufe40\076\ufe40\077\ufe40" +
    "\100\ufe40\101\ufe40\102\ufe40\001\002\000\004\064\u0294\001" +
    "\002\000\006\104\u028b\105\u028a\001\002\000\010\102\u0162" +
    "\103\u015e\105\u0280\001\002\000\010\102\u0162\103\u015e\104" +
    "\u0265\001\002\000\006\066\u027a\104\u027b\001\002\000\012" +
    "\066\u0266\102\u0162\103\u015e\104\u0267\001\002\000\004\064" +
    "\u0279\001\002\000\006\102\u0162\103\u015e\001\002\000\014" +
    "\064\u026a\066\u0269\102\u0162\103\u015e\104\u026b\001\002\000" +
    "\064\003\ufe54\004\ufe54\006\ufe54\007\ufe54\010\ufe54\011\ufe54" +
    "\012\ufe54\020\ufe54\021\ufe54\022\ufe54\026\ufe54\036\ufe54\037" +
    "\ufe54\041\ufe54\042\ufe54\043\ufe54\064\u0275\070\ufe54\074\ufe54" +
    "\075\ufe54\076\ufe54\077\ufe54\100\ufe54\101\ufe54\102\ufe54\001" +
    "\002\000\062\003\ufe53\004\ufe53\006\ufe53\007\ufe53\010\ufe53" +
    "\011\ufe53\012\ufe53\020\ufe53\021\ufe53\022\ufe53\026\ufe53\036" +
    "\ufe53\037\ufe53\041\ufe53\042\ufe53\043\ufe53\070\ufe53\074\ufe53" +
    "\075\ufe53\076\ufe53\077\ufe53\100\ufe53\101\ufe53\102\ufe53\001" +
    "\002\000\010\066\u026f\102\u0162\103\u015e\001\002\000\004" +
    "\066\u026d\001\002\000\004\064\u026e\001\002\000\062\003" +
    "\ufe4a\004\ufe4a\006\ufe4a\007\ufe4a\010\ufe4a\011\ufe4a\012\ufe4a" +
    "\020\ufe4a\021\ufe4a\022\ufe4a\026\ufe4a\036\ufe4a\037\ufe4a\041" +
    "\ufe4a\042\ufe4a\043\ufe4a\070\ufe4a\074\ufe4a\075\ufe4a\076\ufe4a" +
    "\077\ufe4a\100\ufe4a\101\ufe4a\102\ufe4a\001\002\000\004\064" +
    "\u0274\001\002\000\006\064\u0272\066\u0271\001\002\000\064" +
    "\003\ufe4d\004\ufe4d\006\ufe4d\007\ufe4d\010\ufe4d\011\ufe4d\012" +
    "\ufe4d\020\ufe4d\021\ufe4d\022\ufe4d\026\ufe4d\036\ufe4d\037\ufe4d" +
    "\041\ufe4d\042\ufe4d\043\ufe4d\064\u0273\070\ufe4d\074\ufe4d\075" +
    "\ufe4d\076\ufe4d\077\ufe4d\100\ufe4d\101\ufe4d\102\ufe4d\001\002" +
    "\000\062\003\ufe4c\004\ufe4c\006\ufe4c\007\ufe4c\010\ufe4c\011" +
    "\ufe4c\012\ufe4c\020\ufe4c\021\ufe4c\022\ufe4c\026\ufe4c\036\ufe4c" +
    "\037\ufe4c\041\ufe4c\042\ufe4c\043\ufe4c\070\ufe4c\074\ufe4c\075" +
    "\ufe4c\076\ufe4c\077\ufe4c\100\ufe4c\101\ufe4c\102\ufe4c\001\002" +
    "\000\062\003\ufe56\004\ufe56\006\ufe56\007\ufe56\010\ufe56\011" +
    "\ufe56\012\ufe56\020\ufe56\021\ufe56\022\ufe56\026\ufe56\036\ufe56" +
    "\037\ufe56\041\ufe56\042\ufe56\043\ufe56\070\ufe56\074\ufe56\075" +
    "\ufe56\076\ufe56\077\ufe56\100\ufe56\101\ufe56\102\ufe56\001\002" +
    "\000\062\003\ufe4b\004\ufe4b\006\ufe4b\007\ufe4b\010\ufe4b\011" +
    "\ufe4b\012\ufe4b\020\ufe4b\021\ufe4b\022\ufe4b\026\ufe4b\036\ufe4b" +
    "\037\ufe4b\041\ufe4b\042\ufe4b\043\ufe4b\070\ufe4b\074\ufe4b\075" +
    "\ufe4b\076\ufe4b\077\ufe4b\100\ufe4b\101\ufe4b\102\ufe4b\001\002" +
    "\000\062\003\ufe57\004\ufe57\006\ufe57\007\ufe57\010\ufe57\011" +
    "\ufe57\012\ufe57\020\ufe57\021\ufe57\022\ufe57\026\ufe57\036\ufe57" +
    "\037\ufe57\041\ufe57\042\ufe57\043\ufe57\070\ufe57\074\ufe57\075" +
    "\ufe57\076\ufe57\077\ufe57\100\ufe57\101\ufe57\102\ufe57\001\002" +
    "\000\004\066\u0277\001\002\000\004\064\u0278\001\002\000" +
    "\062\003\ufe49\004\ufe49\006\ufe49\007\ufe49\010\ufe49\011\ufe49" +
    "\012\ufe49\020\ufe49\021\ufe49\022\ufe49\026\ufe49\036\ufe49\037" +
    "\ufe49\041\ufe49\042\ufe49\043\ufe49\070\ufe49\074\ufe49\075\ufe49" +
    "\076\ufe49\077\ufe49\100\ufe49\101\ufe49\102\ufe49\001\002\000" +
    "\062\003\ufe52\004\ufe52\006\ufe52\007\ufe52\010\ufe52\011\ufe52" +
    "\012\ufe52\020\ufe52\021\ufe52\022\ufe52\026\ufe52\036\ufe52\037" +
    "\ufe52\041\ufe52\042\ufe52\043\ufe52\070\ufe52\074\ufe52\075\ufe52" +
    "\076\ufe52\077\ufe52\100\ufe52\101\ufe52\102\ufe52\001\002\000" +
    "\004\064\u027f\001\002\000\006\102\u0162\103\u015e\001\002" +
    "\000\004\066\u027d\001\002\000\004\064\u027e\001\002\000" +
    "\062\003\ufe48\004\ufe48\006\ufe48\007\ufe48\010\ufe48\011\ufe48" +
    "\012\ufe48\020\ufe48\021\ufe48\022\ufe48\026\ufe48\036\ufe48\037" +
    "\ufe48\041\ufe48\042\ufe48\043\ufe48\070\ufe48\074\ufe48\075\ufe48" +
    "\076\ufe48\077\ufe48\100\ufe48\101\ufe48\102\ufe48\001\002\000" +
    "\062\003\ufe51\004\ufe51\006\ufe51\007\ufe51\010\ufe51\011\ufe51" +
    "\012\ufe51\020\ufe51\021\ufe51\022\ufe51\026\ufe51\036\ufe51\037" +
    "\ufe51\041\ufe51\042\ufe51\043\ufe51\070\ufe51\074\ufe51\075\ufe51" +
    "\076\ufe51\077\ufe51\100\ufe51\101\ufe51\102\ufe51\001\002\000" +
    "\004\066\u0288\001\002\000\006\066\u0282\104\u0283\001\002" +
    "\000\004\064\u0287\001\002\000\006\102\u0162\103\u015e\001" +
    "\002\000\004\066\u0285\001\002\000\004\064\u0286\001\002" +
    "\000\062\003\ufe47\004\ufe47\006\ufe47\007\ufe47\010\ufe47\011" +
    "\ufe47\012\ufe47\020\ufe47\021\ufe47\022\ufe47\026\ufe47\036\ufe47" +
    "\037\ufe47\041\ufe47\042\ufe47\043\ufe47\070\ufe47\074\ufe47\075" +
    "\ufe47\076\ufe47\077\ufe47\100\ufe47\101\ufe47\102\ufe47\001\002" +
    "\000\062\003\ufe50\004\ufe50\006\ufe50\007\ufe50\010\ufe50\011" +
    "\ufe50\012\ufe50\020\ufe50\021\ufe50\022\ufe50\026\ufe50\036\ufe50" +
    "\037\ufe50\041\ufe50\042\ufe50\043\ufe50\070\ufe50\074\ufe50\075" +
    "\ufe50\076\ufe50\077\ufe50\100\ufe50\101\ufe50\102\ufe50\001\002" +
    "\000\004\064\u0289\001\002\000\062\003\ufe41\004\ufe41\006" +
    "\ufe41\007\ufe41\010\ufe41\011\ufe41\012\ufe41\020\ufe41\021\ufe41" +
    "\022\ufe41\026\ufe41\036\ufe41\037\ufe41\041\ufe41\042\ufe41\043" +
    "\ufe41\070\ufe41\074\ufe41\075\ufe41\076\ufe41\077\ufe41\100\ufe41" +
    "\101\ufe41\102\ufe41\001\002\000\004\066\u0292\001\002\000" +
    "\006\066\u028c\105\u028d\001\002\000\004\064\u0291\001\002" +
    "\000\006\064\u028f\066\u028e\001\002\000\064\003\ufe45\004" +
    "\ufe45\006\ufe45\007\ufe45\010\ufe45\011\ufe45\012\ufe45\020\ufe45" +
    "\021\ufe45\022\ufe45\026\ufe45\036\ufe45\037\ufe45\041\ufe45\042" +
    "\ufe45\043\ufe45\064\u0290\070\ufe45\074\ufe45\075\ufe45\076\ufe45" +
    "\077\ufe45\100\ufe45\101\ufe45\102\ufe45\001\002\000\062\003" +
    "\ufe44\004\ufe44\006\ufe44\007\ufe44\010\ufe44\011\ufe44\012\ufe44" +
    "\020\ufe44\021\ufe44\022\ufe44\026\ufe44\036\ufe44\037\ufe44\041" +
    "\ufe44\042\ufe44\043\ufe44\070\ufe44\074\ufe44\075\ufe44\076\ufe44" +
    "\077\ufe44\100\ufe44\101\ufe44\102\ufe44\001\002\000\062\003" +
    "\ufe55\004\ufe55\006\ufe55\007\ufe55\010\ufe55\011\ufe55\012\ufe55" +
    "\020\ufe55\021\ufe55\022\ufe55\026\ufe55\036\ufe55\037\ufe55\041" +
    "\ufe55\042\ufe55\043\ufe55\070\ufe55\074\ufe55\075\ufe55\076\ufe55" +
    "\077\ufe55\100\ufe55\101\ufe55\102\ufe55\001\002\000\062\003" +
    "\ufe43\004\ufe43\006\ufe43\007\ufe43\010\ufe43\011\ufe43\012\ufe43" +
    "\020\ufe43\021\ufe43\022\ufe43\026\ufe43\036\ufe43\037\ufe43\041" +
    "\ufe43\042\ufe43\043\ufe43\070\ufe43\074\ufe43\075\ufe43\076\ufe43" +
    "\077\ufe43\100\ufe43\101\ufe43\102\ufe43\001\002\000\004\064" +
    "\u0293\001\002\000\062\003\ufe42\004\ufe42\006\ufe42\007\ufe42" +
    "\010\ufe42\011\ufe42\012\ufe42\020\ufe42\021\ufe42\022\ufe42\026" +
    "\ufe42\036\ufe42\037\ufe42\041\ufe42\042\ufe42\043\ufe42\070\ufe42" +
    "\074\ufe42\075\ufe42\076\ufe42\077\ufe42\100\ufe42\101\ufe42\102" +
    "\ufe42\001\002\000\062\003\ufe4e\004\ufe4e\006\ufe4e\007\ufe4e" +
    "\010\ufe4e\011\ufe4e\012\ufe4e\020\ufe4e\021\ufe4e\022\ufe4e\026" +
    "\ufe4e\036\ufe4e\037\ufe4e\041\ufe4e\042\ufe4e\043\ufe4e\070\ufe4e" +
    "\074\ufe4e\075\ufe4e\076\ufe4e\077\ufe4e\100\ufe4e\101\ufe4e\102" +
    "\ufe4e\001\002\000\050\003\u01a1\023\u0199\024\u01a0\032\u01a9" +
    "\046\u01a4\053\u01a2\054\u01a8\055\u019f\056\u01aa\057\u01a5\060" +
    "\u019c\061\u019b\062\u01a6\063\u019e\065\u0197\102\u0162\103\u015e" +
    "\104\u019a\105\u019d\001\002\000\004\066\u0297\001\002\000" +
    "\004\064\u0298\001\002\000\062\003\uff21\004\uff21\006\uff21" +
    "\007\uff21\010\uff21\011\uff21\012\uff21\020\uff21\021\uff21\022" +
    "\uff21\026\uff21\036\uff21\037\uff21\041\uff21\042\uff21\043\uff21" +
    "\070\uff21\074\uff21\075\uff21\076\uff21\077\uff21\100\uff21\101" +
    "\uff21\102\uff21\001\002\000\006\064\u029b\066\u029a\001\002" +
    "\000\066\003\uff22\004\uff22\006\uff22\007\uff22\010\uff22\011" +
    "\uff22\012\uff22\020\uff22\021\uff22\022\uff22\026\uff22\036\uff22" +
    "\037\uff22\041\uff22\042\uff22\043\uff22\064\u029c\066\uff1e\070" +
    "\uff22\074\uff22\075\uff22\076\uff22\077\uff22\100\uff22\101\uff22" +
    "\102\uff22\001\002\000\062\003\uff20\004\uff20\006\uff20\007" +
    "\uff20\010\uff20\011\uff20\012\uff20\020\uff20\021\uff20\022\uff20" +
    "\026\uff20\036\uff20\037\uff20\041\uff20\042\uff20\043\uff20\070" +
    "\uff20\074\uff20\075\uff20\076\uff20\077\uff20\100\uff20\101\uff20" +
    "\102\uff20\001\002\000\062\003\uff23\004\uff23\006\uff23\007" +
    "\uff23\010\uff23\011\uff23\012\uff23\020\uff23\021\uff23\022\uff23" +
    "\026\uff23\036\uff23\037\uff23\041\uff23\042\uff23\043\uff23\070" +
    "\uff23\074\uff23\075\uff23\076\uff23\077\uff23\100\uff23\101\uff23" +
    "\102\uff23\001\002\000\010\102\u02a9\103\u02a7\104\u02a8\001" +
    "\002\000\004\104\u029f\001\002\000\004\103\u02a0\001\002" +
    "\000\006\066\u02a1\104\u02a2\001\002\000\004\064\u02a6\001" +
    "\002\000\004\103\u02a3\001\002\000\004\066\u02a4\001\002" +
    "\000\004\064\u02a5\001\002\000\076\003\uff32\004\uff32\006" +
    "\uff32\007\uff32\010\uff32\011\uff32\012\uff32\020\uff32\021\uff32" +
    "\022\uff32\026\uff32\030\uff32\031\uff32\034\uff32\035\uff32\036" +
    "\uff32\037\uff32\040\uff32\041\uff32\042\uff32\043\uff32\045\uff32" +
    "\070\uff32\074\uff32\075\uff32\076\uff32\077\uff32\100\uff32\101" +
    "\uff32\102\uff32\001\002\000\076\003\uff34\004\uff34\006\uff34" +
    "\007\uff34\010\uff34\011\uff34\012\uff34\020\uff34\021\uff34\022" +
    "\uff34\026\uff34\030\uff34\031\uff34\034\uff34\035\uff34\036\uff34" +
    "\037\uff34\040\uff34\041\uff34\042\uff34\043\uff34\045\uff34\070" +
    "\uff34\074\uff34\075\uff34\076\uff34\077\uff34\100\uff34\101\uff34" +
    "\102\uff34\001\002\000\004\104\u02c4\001\002\000\004\103" +
    "\u02c2\001\002\000\006\103\u02aa\104\u02ab\001\002\000\010" +
    "\066\u02ba\103\u02b9\104\u02bb\001\002\000\006\066\u02ad\103" +
    "\u02ac\001\002\000\012\064\u02b0\066\u02af\103\u02ae\104\u02b1" +
    "\001\002\000\076\003\uff30\004\uff30\006\uff30\007\uff30\010" +
    "\uff30\011\uff30\012\uff30\020\uff30\021\uff30\022\uff30\026\uff30" +
    "\030\uff30\031\uff30\034\uff30\035\uff30\036\uff30\037\uff30\040" +
    "\uff30\041\uff30\042\uff30\043\uff30\045\uff30\070\uff30\074\uff30" +
    "\075\uff30\076\uff30\077\uff30\100\uff30\101\uff30\102\uff30\001" +
    "\002\000\004\066\u02b7\001\002\000\100\003\uff3d\004\uff3d" +
    "\006\uff3d\007\uff3d\010\uff3d\011\uff3d\012\uff3d\020\uff3d\021" +
    "\uff3d\022\uff3d\026\uff3d\030\uff3d\031\uff3d\034\uff3d\035\uff3d" +
    "\036\uff3d\037\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d\045" +
    "\uff3d\064\u02b6\070\uff3d\074\uff3d\075\uff3d\076\uff3d\077\uff3d" +
    "\100\uff3d\101\uff3d\102\uff3d\001\002\000\076\003\uff33\004" +
    "\uff33\006\uff33\007\uff33\010\uff33\011\uff33\012\uff33\020\uff33" +
    "\021\uff33\022\uff33\026\uff33\030\uff33\031\uff33\034\uff33\035" +
    "\uff33\036\uff33\037\uff33\040\uff33\041\uff33\042\uff33\043\uff33" +
    "\045\uff33\070\uff33\074\uff33\075\uff33\076\uff33\077\uff33\100" +
    "\uff33\101\uff33\102\uff33\001\002\000\004\103\u02b2\001\002" +
    "\000\006\064\u02b4\066\u02b3\001\002\000\100\003\uff3c\004" +
    "\uff3c\006\uff3c\007\uff3c\010\uff3c\011\uff3c\012\uff3c\020\uff3c" +
    "\021\uff3c\022\uff3c\026\uff3c\030\uff3c\031\uff3c\034\uff3c\035" +
    "\uff3c\036\uff3c\037\uff3c\040\uff3c\041\uff3c\042\uff3c\043\uff3c" +
    "\045\uff3c\064\u02b5\070\uff3c\074\uff3c\075\uff3c\076\uff3c\077" +
    "\uff3c\100\uff3c\101\uff3c\102\uff3c\001\002\000\076\003\uff31" +
    "\004\uff31\006\uff31\007\uff31\010\uff31\011\uff31\012\uff31\020" +
    "\uff31\021\uff31\022\uff31\026\uff31\030\uff31\031\uff31\034\uff31" +
    "\035\uff31\036\uff31\037\uff31\040\uff31\041\uff31\042\uff31\043" +
    "\uff31\045\uff31\070\uff31\074\uff31\075\uff31\076\uff31\077\uff31" +
    "\100\uff31\101\uff31\102\uff31\001\002\000\076\003\uff3e\004" +
    "\uff3e\006\uff3e\007\uff3e\010\uff3e\011\uff3e\012\uff3e\020\uff3e" +
    "\021\uff3e\022\uff3e\026\uff3e\030\uff3e\031\uff3e\034\uff3e\035" +
    "\uff3e\036\uff3e\037\uff3e\040\uff3e\041\uff3e\042\uff3e\043\uff3e" +
    "\045\uff3e\070\uff3e\074\uff3e\075\uff3e\076\uff3e\077\uff3e\100" +
    "\uff3e\101\uff3e\102\uff3e\001\002\000\076\003\uff3f\004\uff3f" +
    "\006\uff3f\007\uff3f\010\uff3f\011\uff3f\012\uff3f\020\uff3f\021" +
    "\uff3f\022\uff3f\026\uff3f\030\uff3f\031\uff3f\034\uff3f\035\uff3f" +
    "\036\uff3f\037\uff3f\040\uff3f\041\uff3f\042\uff3f\043\uff3f\045" +
    "\uff3f\070\uff3f\074\uff3f\075\uff3f\076\uff3f\077\uff3f\100\uff3f" +
    "\101\uff3f\102\uff3f\001\002\000\004\064\u02b8\001\002\000" +
    "\076\003\uff37\004\uff37\006\uff37\007\uff37\010\uff37\011\uff37" +
    "\012\uff37\020\uff37\021\uff37\022\uff37\026\uff37\030\uff37\031" +
    "\uff37\034\uff37\035\uff37\036\uff37\037\uff37\040\uff37\041\uff37" +
    "\042\uff37\043\uff37\045\uff37\070\uff37\074\uff37\075\uff37\076" +
    "\uff37\077\uff37\100\uff37\101\uff37\102\uff37\001\002\000\004" +
    "\066\u02c0\001\002\000\004\064\u02bf\001\002\000\004\103" +
    "\u02bc\001\002\000\004\066\u02bd\001\002\000\004\064\u02be" +
    "\001\002\000\076\003\uff36\004\uff36\006\uff36\007\uff36\010" +
    "\uff36\011\uff36\012\uff36\020\uff36\021\uff36\022\uff36\026\uff36" +
    "\030\uff36\031\uff36\034\uff36\035\uff36\036\uff36\037\uff36\040" +
    "\uff36\041\uff36\042\uff36\043\uff36\045\uff36\070\uff36\074\uff36" +
    "\075\uff36\076\uff36\077\uff36\100\uff36\101\uff36\102\uff36\001" +
    "\002\000\076\003\uff38\004\uff38\006\uff38\007\uff38\010\uff38" +
    "\011\uff38\012\uff38\020\uff38\021\uff38\022\uff38\026\uff38\030" +
    "\uff38\031\uff38\034\uff38\035\uff38\036\uff38\037\uff38\040\uff38" +
    "\041\uff38\042\uff38\043\uff38\045\uff38\070\uff38\074\uff38\075" +
    "\uff38\076\uff38\077\uff38\100\uff38\101\uff38\102\uff38\001\002" +
    "\000\004\064\u02c1\001\002\000\076\003\uff35\004\uff35\006" +
    "\uff35\007\uff35\010\uff35\011\uff35\012\uff35\020\uff35\021\uff35" +
    "\022\uff35\026\uff35\030\uff35\031\uff35\034\uff35\035\uff35\036" +
    "\uff35\037\uff35\040\uff35\041\uff35\042\uff35\043\uff35\045\uff35" +
    "\070\uff35\074\uff35\075\uff35\076\uff35\077\uff35\100\uff35\101" +
    "\uff35\102\uff35\001\002\000\004\066\u02c3\001\002\000\076" +
    "\003\uff2f\004\uff2f\006\uff2f\007\uff2f\010\uff2f\011\uff2f\012" +
    "\uff2f\020\uff2f\021\uff2f\022\uff2f\026\uff2f\030\uff2f\031\uff2f" +
    "\034\uff2f\035\uff2f\036\uff2f\037\uff2f\040\uff2f\041\uff2f\042" +
    "\uff2f\043\uff2f\045\uff2f\070\uff2f\074\uff2f\075\uff2f\076\uff2f" +
    "\077\uff2f\100\uff2f\101\uff2f\102\uff2f\001\002\000\006\102" +
    "\u02c6\103\u02c5\001\002\000\004\104\u02cd\001\002\000\006" +
    "\066\u02c7\104\u02c8\001\002\000\004\064\u02cc\001\002\000" +
    "\004\103\u02c9\001\002\000\004\066\u02ca\001\002\000\004" +
    "\064\u02cb\001\002\000\076\003\uff3a\004\uff3a\006\uff3a\007" +
    "\uff3a\010\uff3a\011\uff3a\012\uff3a\020\uff3a\021\uff3a\022\uff3a" +
    "\026\uff3a\030\uff3a\031\uff3a\034\uff3a\035\uff3a\036\uff3a\037" +
    "\uff3a\040\uff3a\041\uff3a\042\uff3a\043\uff3a\045\uff3a\070\uff3a" +
    "\074\uff3a\075\uff3a\076\uff3a\077\uff3a\100\uff3a\101\uff3a\102" +
    "\uff3a\001\002\000\076\003\uff3b\004\uff3b\006\uff3b\007\uff3b" +
    "\010\uff3b\011\uff3b\012\uff3b\020\uff3b\021\uff3b\022\uff3b\026" +
    "\uff3b\030\uff3b\031\uff3b\034\uff3b\035\uff3b\036\uff3b\037\uff3b" +
    "\040\uff3b\041\uff3b\042\uff3b\043\uff3b\045\uff3b\070\uff3b\074" +
    "\uff3b\075\uff3b\076\uff3b\077\uff3b\100\uff3b\101\uff3b\102\uff3b" +
    "\001\002\000\004\102\u02ce\001\002\000\004\066\u02cf\001" +
    "\002\000\004\064\u02d0\001\002\000\076\003\uff39\004\uff39" +
    "\006\uff39\007\uff39\010\uff39\011\uff39\012\uff39\020\uff39\021" +
    "\uff39\022\uff39\026\uff39\030\uff39\031\uff39\034\uff39\035\uff39" +
    "\036\uff39\037\uff39\040\uff39\041\uff39\042\uff39\043\uff39\045" +
    "\uff39\070\uff39\074\uff39\075\uff39\076\uff39\077\uff39\100\uff39" +
    "\101\uff39\102\uff39\001\002\000\006\046\u02d2\064\u02d3\001" +
    "\002\000\012\003\165\102\157\103\162\105\163\001\002" +
    "\000\076\003\uff79\004\uff79\006\uff79\007\uff79\010\uff79\011" +
    "\uff79\012\uff79\020\uff79\021\uff79\022\uff79\026\uff79\030\uff79" +
    "\031\uff79\034\uff79\035\uff79\036\uff79\037\uff79\040\uff79\041" +
    "\uff79\042\uff79\043\uff79\045\uff79\070\uff79\074\uff79\075\uff79" +
    "\076\uff79\077\uff79\100\uff79\101\uff79\102\uff79\001\002\000" +
    "\004\064\u02d5\001\002\000\076\003\uff77\004\uff77\006\uff77" +
    "\007\uff77\010\uff77\011\uff77\012\uff77\020\uff77\021\uff77\022" +
    "\uff77\026\uff77\030\uff77\031\uff77\034\uff77\035\uff77\036\uff77" +
    "\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77\045\uff77\070" +
    "\uff77\074\uff77\075\uff77\076\uff77\077\uff77\100\uff77\101\uff77" +
    "\102\uff77\001\002\000\056\003\064\004\051\006\060\007" +
    "\066\010\075\011\136\012\103\020\106\021\074\022\055" +
    "\036\070\037\071\041\102\042\107\070\u02de\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\144\001\002" +
    "\000\056\003\064\004\051\006\060\007\066\010\075\011" +
    "\256\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\070\u02d8\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\102\144\001\002\000\004\006\u02d9" +
    "\001\002\000\004\065\u02da\001\002\000\050\003\u01a1\023" +
    "\u0199\024\u01a0\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f" +
    "\056\u01aa\057\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e\065" +
    "\u0197\102\u0162\103\u015e\104\u019a\105\u019d\001\002\000\004" +
    "\066\u02dc\001\002\000\004\064\u02dd\001\002\000\062\003" +
    "\ufe71\004\ufe71\006\ufe71\007\ufe71\010\ufe71\011\ufe71\012\ufe71" +
    "\020\ufe71\021\ufe71\022\ufe71\026\ufe71\036\ufe71\037\ufe71\041" +
    "\ufe71\042\ufe71\043\ufe71\070\ufe71\074\ufe71\075\ufe71\076\ufe71" +
    "\077\ufe71\100\ufe71\101\ufe71\102\ufe71\001\002\000\004\006" +
    "\u0306\001\002\000\056\003\064\004\051\006\u02e1\007\066" +
    "\010\075\011\256\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\070\u02e0\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\144\001\002\000" +
    "\006\006\u02f8\065\u02f7\001\002\000\050\003\u01a1\023\u0199" +
    "\024\u01a0\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f\056" +
    "\u01aa\057\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e\065\u02e2" +
    "\102\u0162\103\u015e\104\u019a\105\u019d\001\002\000\052\003" +
    "\u01a1\023\u0199\024\u01a0\032\u01a9\046\u01a4\053\u01a2\054\u01a8" +
    "\055\u019f\056\u01aa\057\u01a5\060\u019c\061\u019b\062\u01a6\063" +
    "\u019e\065\u0197\066\u02e8\102\u0162\103\u015e\104\u019a\105\u019d" +
    "\001\002\000\004\066\u02e4\001\002\000\004\067\u02e5\001" +
    "\002\000\054\003\064\004\051\006\060\007\066\010\075" +
    "\011\136\012\103\020\106\021\074\022\055\036\070\037" +
    "\071\041\102\042\107\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\144\001\002\000\056\003\064\004" +
    "\051\006\060\007\066\010\075\011\256\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\070" +
    "\u02e7\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\062\003\ufe7d\004\ufe7d\006\ufe7d\007" +
    "\ufe7d\010\ufe7d\011\ufe7d\012\ufe7d\020\ufe7d\021\ufe7d\022\ufe7d" +
    "\026\ufe7d\036\ufe7d\037\ufe7d\041\ufe7d\042\ufe7d\043\ufe7d\070" +
    "\ufe7d\074\ufe7d\075\ufe7d\076\ufe7d\077\ufe7d\100\ufe7d\101\ufe7d" +
    "\102\ufe7d\001\002\000\004\067\u02f4\001\002\000\006\066" +
    "\u02ea\067\u02eb\001\002\000\062\003\064\004\051\006\060" +
    "\007\066\010\075\011\136\012\103\020\106\021\074\022" +
    "\055\036\070\037\071\041\102\042\107\064\u02f0\066\uff1e" +
    "\067\u02ee\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\144\001\002\000\054\003\064\004\051\006\060" +
    "\007\066\010\075\011\136\012\103\020\106\021\074\022" +
    "\055\036\070\037\071\041\102\042\107\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\144\001\002\000" +
    "\056\003\064\004\051\006\060\007\066\010\075\011\256" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\070\u02ed\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\144\001\002\000\062\003\ufe7c\004" +
    "\ufe7c\006\ufe7c\007\ufe7c\010\ufe7c\011\ufe7c\012\ufe7c\020\ufe7c" +
    "\021\ufe7c\022\ufe7c\026\ufe7c\036\ufe7c\037\ufe7c\041\ufe7c\042" +
    "\ufe7c\043\ufe7c\070\ufe7c\074\ufe7c\075\ufe7c\076\ufe7c\077\ufe7c" +
    "\100\ufe7c\101\ufe7c\102\ufe7c\001\002\000\054\003\064\004" +
    "\051\006\060\007\066\010\075\011\136\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\144" +
    "\001\002\000\056\003\064\004\051\006\060\007\066\010" +
    "\075\011\256\012\103\020\106\021\074\022\055\036\070" +
    "\037\071\041\102\042\107\070\u02f1\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\144\001\002\000\062" +
    "\003\ufe73\004\ufe73\006\ufe73\007\ufe73\010\ufe73\011\ufe73\012" +
    "\ufe73\020\ufe73\021\ufe73\022\ufe73\026\ufe73\036\ufe73\037\ufe73" +
    "\041\ufe73\042\ufe73\043\ufe73\070\ufe73\074\ufe73\075\ufe73\076" +
    "\ufe73\077\ufe73\100\ufe73\101\ufe73\102\ufe73\001\002\000\062" +
    "\003\ufe7b\004\ufe7b\006\ufe7b\007\ufe7b\010\ufe7b\011\ufe7b\012" +
    "\ufe7b\020\ufe7b\021\ufe7b\022\ufe7b\026\ufe7b\036\ufe7b\037\ufe7b" +
    "\041\ufe7b\042\ufe7b\043\ufe7b\070\ufe7b\074\ufe7b\075\ufe7b\076" +
    "\ufe7b\077\ufe7b\100\ufe7b\101\ufe7b\102\ufe7b\001\002\000\056" +
    "\003\064\004\051\006\060\007\066\010\075\011\256\012" +
    "\103\020\106\021\074\022\055\036\070\037\071\041\102" +
    "\042\107\070\u02f3\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\144\001\002\000\062\003\ufe7e\004\ufe7e" +
    "\006\ufe7e\007\ufe7e\010\ufe7e\011\ufe7e\012\ufe7e\020\ufe7e\021" +
    "\ufe7e\022\ufe7e\026\ufe7e\036\ufe7e\037\ufe7e\041\ufe7e\042\ufe7e" +
    "\043\ufe7e\070\ufe7e\074\ufe7e\075\ufe7e\076\ufe7e\077\ufe7e\100" +
    "\ufe7e\101\ufe7e\102\ufe7e\001\002\000\054\003\064\004\051" +
    "\006\060\007\066\010\075\011\136\012\103\020\106\021" +
    "\074\022\055\036\070\037\071\041\102\042\107\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\102\144\001" +
    "\002\000\056\003\064\004\051\006\060\007\066\010\075" +
    "\011\256\012\103\020\106\021\074\022\055\036\070\037" +
    "\071\041\102\042\107\070\u02f6\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\062\003" +
    "\ufe7a\004\ufe7a\006\ufe7a\007\ufe7a\010\ufe7a\011\ufe7a\012\ufe7a" +
    "\020\ufe7a\021\ufe7a\022\ufe7a\026\ufe7a\036\ufe7a\037\ufe7a\041" +
    "\ufe7a\042\ufe7a\043\ufe7a\070\ufe7a\074\ufe7a\075\ufe7a\076\ufe7a" +
    "\077\ufe7a\100\ufe7a\101\ufe7a\102\ufe7a\001\002\000\050\003" +
    "\u01a1\023\u0199\024\u01a0\032\u01a9\046\u01a4\053\u01a2\054\u01a8" +
    "\055\u019f\056\u01aa\057\u01a5\060\u019c\061\u019b\062\u01a6\063" +
    "\u019e\065\u0197\102\u0162\103\u015e\104\u019a\105\u019d\001\002" +
    "\000\050\003\u01a1\023\u0199\024\u01a0\032\u01a9\046\u01a4\053" +
    "\u01a2\054\u01a8\055\u019f\056\u01aa\057\u01a5\060\u019c\061\u019b" +
    "\062\u01a6\063\u019e\065\u02f9\102\u0162\103\u015e\104\u019a\105" +
    "\u019d\001\002\000\052\003\u01a1\023\u0199\024\u01a0\032\u01a9" +
    "\046\u01a4\053\u01a2\054\u01a8\055\u019f\056\u01aa\057\u01a5\060" +
    "\u019c\061\u019b\062\u01a6\063\u019e\065\u0197\066\u02fd\102\u0162" +
    "\103\u015e\104\u019a\105\u019d\001\002\000\004\066\u02fb\001" +
    "\002\000\004\064\u02fc\001\002\000\062\003\ufe75\004\ufe75" +
    "\006\ufe75\007\ufe75\010\ufe75\011\ufe75\012\ufe75\020\ufe75\021" +
    "\ufe75\022\ufe75\026\ufe75\036\ufe75\037\ufe75\041\ufe75\042\ufe75" +
    "\043\ufe75\070\ufe75\074\ufe75\075\ufe75\076\ufe75\077\ufe75\100" +
    "\ufe75\101\ufe75\102\ufe75\001\002\000\004\064\u0302\001\002" +
    "\000\006\064\u0300\066\u02ff\001\002\000\066\003\ufe78\004" +
    "\ufe78\006\ufe78\007\ufe78\010\ufe78\011\ufe78\012\ufe78\020\ufe78" +
    "\021\ufe78\022\ufe78\026\ufe78\036\ufe78\037\ufe78\041\ufe78\042" +
    "\ufe78\043\ufe78\064\u0301\066\uff1e\070\ufe78\074\ufe78\075\ufe78" +
    "\076\ufe78\077\ufe78\100\ufe78\101\ufe78\102\ufe78\001\002\000" +
    "\062\003\ufe77\004\ufe77\006\ufe77\007\ufe77\010\ufe77\011\ufe77" +
    "\012\ufe77\020\ufe77\021\ufe77\022\ufe77\026\ufe77\036\ufe77\037" +
    "\ufe77\041\ufe77\042\ufe77\043\ufe77\070\ufe77\074\ufe77\075\ufe77" +
    "\076\ufe77\077\ufe77\100\ufe77\101\ufe77\102\ufe77\001\002\000" +
    "\062\003\ufe79\004\ufe79\006\ufe79\007\ufe79\010\ufe79\011\ufe79" +
    "\012\ufe79\020\ufe79\021\ufe79\022\ufe79\026\ufe79\036\ufe79\037" +
    "\ufe79\041\ufe79\042\ufe79\043\ufe79\070\ufe79\074\ufe79\075\ufe79" +
    "\076\ufe79\077\ufe79\100\ufe79\101\ufe79\102\ufe79\001\002\000" +
    "\062\003\ufe76\004\ufe76\006\ufe76\007\ufe76\010\ufe76\011\ufe76" +
    "\012\ufe76\020\ufe76\021\ufe76\022\ufe76\026\ufe76\036\ufe76\037" +
    "\ufe76\041\ufe76\042\ufe76\043\ufe76\070\ufe76\074\ufe76\075\ufe76" +
    "\076\ufe76\077\ufe76\100\ufe76\101\ufe76\102\ufe76\001\002\000" +
    "\004\066\u0304\001\002\000\004\064\u0305\001\002\000\062" +
    "\003\ufe74\004\ufe74\006\ufe74\007\ufe74\010\ufe74\011\ufe74\012" +
    "\ufe74\020\ufe74\021\ufe74\022\ufe74\026\ufe74\036\ufe74\037\ufe74" +
    "\041\ufe74\042\ufe74\043\ufe74\070\ufe74\074\ufe74\075\ufe74\076" +
    "\ufe74\077\ufe74\100\ufe74\101\ufe74\102\ufe74\001\002\000\004" +
    "\065\u0307\001\002\000\050\003\u01a1\023\u0199\024\u01a0\032" +
    "\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f\056\u01aa\057\u01a5" +
    "\060\u019c\061\u019b\062\u01a6\063\u019e\065\u0197\102\u0162\103" +
    "\u015e\104\u019a\105\u019d\001\002\000\004\066\u0309\001\002" +
    "\000\004\064\u030a\001\002\000\062\003\ufe72\004\ufe72\006" +
    "\ufe72\007\ufe72\010\ufe72\011\ufe72\012\ufe72\020\ufe72\021\ufe72" +
    "\022\ufe72\026\ufe72\036\ufe72\037\ufe72\041\ufe72\042\ufe72\043" +
    "\ufe72\070\ufe72\074\ufe72\075\ufe72\076\ufe72\077\ufe72\100\ufe72" +
    "\101\ufe72\102\ufe72\001\002\000\062\003\uffd5\004\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\026\uffd5\036\uffd5\037\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\070\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\100\uffd5" +
    "\101\uffd5\102\uffd5\001\002\000\052\003\u01a1\023\u0199\024" +
    "\u01a0\032\u01a9\046\u01a4\053\u01a2\054\u01a8\055\u019f\056\u01aa" +
    "\057\u01a5\060\u019c\061\u019b\062\u01a6\063\u019e\065\u0197\066" +
    "\u02e8\102\u0162\103\u015e\104\u019a\105\u019d\001\002\000\006" +
    "\066\u030e\067\u02eb\001\002\000\060\003\064\004\051\006" +
    "\060\007\066\010\075\011\136\012\103\020\106\021\074" +
    "\022\055\036\070\037\071\041\102\042\107\066\uff1e\067" +
    "\u02ee\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\006\065\u035a\102\u035b\001\002\000" +
    "\004\065\u034c\001\002\000\004\102\u0344\001\002\000\020" +
    "\014\u0335\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\001\002\000\004\065\u032c\001\002\000\004\065\u0320" +
    "\001\002\000\004\065\u0316\001\002\000\004\102\u0317\001" +
    "\002\000\004\104\u0318\001\002\000\004\103\u0319\001\002" +
    "\000\006\066\u031a\104\u031b\001\002\000\004\064\u031f\001" +
    "\002\000\004\103\u031c\001\002\000\004\066\u031d\001\002" +
    "\000\004\064\u031e\001\002\000\076\003\uff6d\004\uff6d\006" +
    "\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d\020\uff6d\021\uff6d" +
    "\022\uff6d\026\uff6d\030\uff6d\031\uff6d\034\uff6d\035\uff6d\036" +
    "\uff6d\037\uff6d\040\uff6d\041\uff6d\042\uff6d\043\uff6d\045\uff6d" +
    "\070\uff6d\074\uff6d\075\uff6d\076\uff6d\077\uff6d\100\uff6d\101" +
    "\uff6d\102\uff6d\001\002\000\076\003\uff6e\004\uff6e\006\uff6e" +
    "\007\uff6e\010\uff6e\011\uff6e\012\uff6e\020\uff6e\021\uff6e\022" +
    "\uff6e\026\uff6e\030\uff6e\031\uff6e\034\uff6e\035\uff6e\036\uff6e" +
    "\037\uff6e\040\uff6e\041\uff6e\042\uff6e\043\uff6e\045\uff6e\070" +
    "\uff6e\074\uff6e\075\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e" +
    "\102\uff6e\001\002\000\004\102\u0321\001\002\000\004\104" +
    "\u0322\001\002\000\010\003\u0323\016\u0324\017\u0326\001\002" +
    "\000\004\064\u032b\001\002\000\012\017\u032a\064\uff4c\066" +
    "\uff4c\104\uff4c\001\002\000\004\066\u0328\001\002\000\012" +
    "\016\u0327\064\uff4b\066\uff4b\104\uff4b\001\002\000\010\064" +
    "\uff49\066\uff49\104\uff49\001\002\000\004\064\u0329\001\002" +
    "\000\076\003\uff70\004\uff70\006\uff70\007\uff70\010\uff70\011" +
    "\uff70\012\uff70\020\uff70\021\uff70\022\uff70\026\uff70\030\uff70" +
    "\031\uff70\034\uff70\035\uff70\036\uff70\037\uff70\040\uff70\041" +
    "\uff70\042\uff70\043\uff70\045\uff70\070\uff70\074\uff70\075\uff70" +
    "\076\uff70\077\uff70\100\uff70\101\uff70\102\uff70\001\002\000" +
    "\010\064\uff4a\066\uff4a\104\uff4a\001\002\000\010\064\uff48" +
    "\066\uff48\104\uff48\001\002\000\004\102\u032d\001\002\000" +
    "\004\104\u032e\001\002\000\004\103\u032f\001\002\000\004" +
    "\104\u0330\001\002\000\004\103\u0331\001\002\000\004\066" +
    "\u0332\001\002\000\004\064\u0333\001\002\000\076\003\uff6f" +
    "\004\uff6f\006\uff6f\007\uff6f\010\uff6f\011\uff6f\012\uff6f\020" +
    "\uff6f\021\uff6f\022\uff6f\026\uff6f\030\uff6f\031\uff6f\034\uff6f" +
    "\035\uff6f\036\uff6f\037\uff6f\040\uff6f\041\uff6f\042\uff6f\043" +
    "\uff6f\045\uff6f\070\uff6f\074\uff6f\075\uff6f\076\uff6f\077\uff6f" +
    "\100\uff6f\101\uff6f\102\uff6f\001\002\000\004\102\u033d\001" +
    "\002\000\004\102\u0336\001\002\000\004\065\u0337\001\002" +
    "\000\022\003\043\022\040\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\001\002\000\024\022\040\066\u0339" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\104" +
    "\045\001\002\000\004\067\u033a\001\002\000\054\003\064" +
    "\004\051\006\060\007\066\010\075\011\065\012\103\020" +
    "\106\021\074\022\055\036\070\037\071\041\102\042\107" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\101\001\002\000\056\003\064\004\051\006\060\007\066" +
    "\010\075\011\u0136\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\070\u033c\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\101\001\002\000" +
    "\076\003\uff71\004\uff71\006\uff71\007\uff71\010\uff71\011\uff71" +
    "\012\uff71\020\uff71\021\uff71\022\uff71\026\uff71\030\uff71\031" +
    "\uff71\034\uff71\035\uff71\036\uff71\037\uff71\040\uff71\041\uff71" +
    "\042\uff71\043\uff71\045\uff71\070\uff71\074\uff71\075\uff71\076" +
    "\uff71\077\uff71\100\uff71\101\uff71\102\uff71\001\002\000\004" +
    "\065\u033e\001\002\000\022\003\043\022\040\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\001\002\000\024" +
    "\022\040\066\u0340\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\104\045\001\002\000\004\067\u0341\001\002" +
    "\000\054\003\064\004\051\006\060\007\066\010\075\011" +
    "\065\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\101\001\002\000\056\003\064\004\051" +
    "\006\060\007\066\010\075\011\u0136\012\103\020\106\021" +
    "\074\022\055\036\070\037\071\041\102\042\107\070\u0343" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\101\001\002\000\076\003\uff72\004\uff72\006\uff72\007\uff72" +
    "\010\uff72\011\uff72\012\uff72\020\uff72\021\uff72\022\uff72\026" +
    "\uff72\030\uff72\031\uff72\034\uff72\035\uff72\036\uff72\037\uff72" +
    "\040\uff72\041\uff72\042\uff72\043\uff72\045\uff72\070\uff72\074" +
    "\uff72\075\uff72\076\uff72\077\uff72\100\uff72\101\uff72\102\uff72" +
    "\001\002\000\102\003\uff7a\004\uff7a\006\uff7a\007\uff7a\010" +
    "\uff7a\011\uff7a\012\uff7a\020\uff7a\021\uff7a\022\uff7a\026\uff7a" +
    "\030\uff7a\031\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040" +
    "\uff7a\041\uff7a\042\uff7a\043\uff7a\045\uff7a\046\u0345\064\u0346" +
    "\070\uff7a\074\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a\101" +
    "\uff7a\102\uff7a\001\002\000\012\003\165\102\u0348\103\162" +
    "\105\163\001\002\000\076\003\uff7d\004\uff7d\006\uff7d\007" +
    "\uff7d\010\uff7d\011\uff7d\012\uff7d\020\uff7d\021\uff7d\022\uff7d" +
    "\026\uff7d\030\uff7d\031\uff7d\034\uff7d\035\uff7d\036\uff7d\037" +
    "\uff7d\040\uff7d\041\uff7d\042\uff7d\043\uff7d\045\uff7d\070\uff7d" +
    "\074\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102" +
    "\uff7d\001\002\000\100\003\uff78\004\uff78\006\uff78\007\uff78" +
    "\010\uff78\011\uff78\012\uff78\020\uff78\021\uff78\022\uff78\026" +
    "\uff78\030\uff78\031\uff78\034\uff78\035\uff78\036\uff78\037\uff78" +
    "\040\uff78\041\uff78\042\uff78\043\uff78\045\uff78\064\u034b\070" +
    "\uff78\074\uff78\075\uff78\076\uff78\077\uff78\100\uff78\101\uff78" +
    "\102\uff78\001\002\000\102\003\ufedb\004\ufedb\006\ufedb\007" +
    "\ufedb\010\ufedb\011\ufedb\012\ufedb\020\ufedb\021\ufedb\022\ufedb" +
    "\026\ufedb\030\ufedb\031\ufedb\034\ufedb\035\ufedb\036\ufedb\037" +
    "\ufedb\040\ufedb\041\ufedb\042\ufedb\043\ufedb\045\ufedb\064\ufedb" +
    "\065\147\070\ufedb\074\ufedb\075\ufedb\076\ufedb\077\ufedb\100" +
    "\ufedb\101\ufedb\102\ufedb\001\002\000\004\064\u034a\001\002" +
    "\000\076\003\uff7b\004\uff7b\006\uff7b\007\uff7b\010\uff7b\011" +
    "\uff7b\012\uff7b\020\uff7b\021\uff7b\022\uff7b\026\uff7b\030\uff7b" +
    "\031\uff7b\034\uff7b\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041" +
    "\uff7b\042\uff7b\043\uff7b\045\uff7b\070\uff7b\074\uff7b\075\uff7b" +
    "\076\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b\001\002\000" +
    "\076\003\uff7c\004\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c" +
    "\012\uff7c\020\uff7c\021\uff7c\022\uff7c\026\uff7c\030\uff7c\031" +
    "\uff7c\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c" +
    "\042\uff7c\043\uff7c\045\uff7c\070\uff7c\074\uff7c\075\uff7c\076" +
    "\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c\001\002\000\006" +
    "\003\u034e\103\u034d\001\002\000\014\003\u034e\064\uff60\066" +
    "\uff60\103\u034d\104\u0354\001\002\000\004\064\u0352\001\002" +
    "\000\004\066\u0350\001\002\000\004\064\u0351\001\002\000" +
    "\076\003\uff73\004\uff73\006\uff73\007\uff73\010\uff73\011\uff73" +
    "\012\uff73\020\uff73\021\uff73\022\uff73\026\uff73\030\uff73\031" +
    "\uff73\034\uff73\035\uff73\036\uff73\037\uff73\040\uff73\041\uff73" +
    "\042\uff73\043\uff73\045\uff73\070\uff73\074\uff73\075\uff73\076" +
    "\uff73\077\uff73\100\uff73\101\uff73\102\uff73\001\002\000\006" +
    "\064\uff58\066\uff58\001\002\000\006\064\uff5d\066\uff5d\001" +
    "\002\000\014\003\u034e\064\uff5e\066\uff5e\103\u034d\104\u0356" +
    "\001\002\000\006\064\uff5f\066\uff5f\001\002\000\012\064" +
    "\uff5c\066\uff5c\103\u0357\104\u0358\001\002\000\006\064\uff59" +
    "\066\uff59\001\002\000\010\064\uff5b\066\uff5b\104\u0359\001" +
    "\002\000\006\064\uff5a\066\uff5a\001\002\000\004\103\u0360" +
    "\001\002\000\006\046\u035c\064\u035d\001\002\000\012\003" +
    "\165\102\157\103\162\105\163\001\002\000\076\003\uff76" +
    "\004\uff76\006\uff76\007\uff76\010\uff76\011\uff76\012\uff76\020" +
    "\uff76\021\uff76\022\uff76\026\uff76\030\uff76\031\uff76\034\uff76" +
    "\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043" +
    "\uff76\045\uff76\070\uff76\074\uff76\075\uff76\076\uff76\077\uff76" +
    "\100\uff76\101\uff76\102\uff76\001\002\000\004\064\u035f\001" +
    "\002\000\076\003\uff75\004\uff75\006\uff75\007\uff75\010\uff75" +
    "\011\uff75\012\uff75\020\uff75\021\uff75\022\uff75\026\uff75\030" +
    "\uff75\031\uff75\034\uff75\035\uff75\036\uff75\037\uff75\040\uff75" +
    "\041\uff75\042\uff75\043\uff75\045\uff75\070\uff75\074\uff75\075" +
    "\uff75\076\uff75\077\uff75\100\uff75\101\uff75\102\uff75\001\002" +
    "\000\004\104\u0361\001\002\000\004\102\u0362\001\002\000" +
    "\004\066\u0363\001\002\000\004\064\u0364\001\002\000\076" +
    "\003\uff74\004\uff74\006\uff74\007\uff74\010\uff74\011\uff74\012" +
    "\uff74\020\uff74\021\uff74\022\uff74\026\uff74\030\uff74\031\uff74" +
    "\034\uff74\035\uff74\036\uff74\037\uff74\040\uff74\041\uff74\042" +
    "\uff74\043\uff74\045\uff74\070\uff74\074\uff74\075\uff74\076\uff74" +
    "\077\uff74\100\uff74\101\uff74\102\uff74\001\002\000\050\003" +
    "\u01a1\023\u0199\024\u01a0\032\u01a9\046\u01a4\053\u01a2\054\u01a8" +
    "\055\u019f\056\u01aa\057\u01a5\060\u019c\061\u019b\062\u01a6\063" +
    "\u019e\065\u0197\102\u0162\103\u015e\104\u019a\105\u019d\001\002" +
    "\000\004\066\u0367\001\002\000\004\067\u0368\001\002\000" +
    "\054\003\064\004\051\006\060\007\066\010\075\011\136" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\144\001\002\000\056\003\064\004\051\006" +
    "\060\007\066\010\075\011\256\012\103\020\106\021\074" +
    "\022\055\036\070\037\071\041\102\042\107\070\u036a\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\144" +
    "\001\002\000\064\003\ufec2\004\ufec2\005\u036b\006\ufec2\007" +
    "\ufec2\010\ufec2\011\ufec2\012\ufec2\020\ufec2\021\ufec2\022\ufec2" +
    "\026\ufec2\036\ufec2\037\ufec2\041\ufec2\042\ufec2\043\ufec2\070" +
    "\ufec2\074\ufec2\075\ufec2\076\ufec2\077\ufec2\100\ufec2\101\ufec2" +
    "\102\ufec2\001\002\000\004\067\u036c\001\002\000\054\003" +
    "\064\004\051\006\060\007\066\010\075\011\136\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\056\003\064\004\051\006\060\007" +
    "\066\010\075\011\256\012\103\020\106\021\074\022\055" +
    "\036\070\037\071\041\102\042\107\070\u036e\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\144\001\002" +
    "\000\062\003\ufebf\004\ufebf\006\ufebf\007\ufebf\010\ufebf\011" +
    "\ufebf\012\ufebf\020\ufebf\021\ufebf\022\ufebf\026\ufebf\036\ufebf" +
    "\037\ufebf\041\ufebf\042\ufebf\043\ufebf\070\ufebf\074\ufebf\075" +
    "\ufebf\076\ufebf\077\ufebf\100\ufebf\101\ufebf\102\ufebf\001\002" +
    "\000\006\066\u0370\067\u0371\001\002\000\060\003\064\004" +
    "\051\006\060\007\066\010\075\011\136\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\066" +
    "\uff1e\067\u0378\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\144\001\002\000\054\003\064\004\051\006" +
    "\060\007\066\010\075\011\136\012\103\020\106\021\074" +
    "\022\055\036\070\037\071\041\102\042\107\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\144\001\002" +
    "\000\056\003\064\004\051\006\060\007\066\010\075\011" +
    "\256\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\070\u0373\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\102\144\001\002\000\064\003\ufec1" +
    "\004\ufec1\005\u0374\006\ufec1\007\ufec1\010\ufec1\011\ufec1\012" +
    "\ufec1\020\ufec1\021\ufec1\022\ufec1\026\ufec1\036\ufec1\037\ufec1" +
    "\041\ufec1\042\ufec1\043\ufec1\070\ufec1\074\ufec1\075\ufec1\076" +
    "\ufec1\077\ufec1\100\ufec1\101\ufec1\102\ufec1\001\002\000\004" +
    "\067\u0375\001\002\000\054\003\064\004\051\006\060\007" +
    "\066\010\075\011\136\012\103\020\106\021\074\022\055" +
    "\036\070\037\071\041\102\042\107\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\144\001\002\000\056" +
    "\003\064\004\051\006\060\007\066\010\075\011\256\012" +
    "\103\020\106\021\074\022\055\036\070\037\071\041\102" +
    "\042\107\070\u0377\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\144\001\002\000\062\003\ufebe\004\ufebe" +
    "\006\ufebe\007\ufebe\010\ufebe\011\ufebe\012\ufebe\020\ufebe\021" +
    "\ufebe\022\ufebe\026\ufebe\036\ufebe\037\ufebe\041\ufebe\042\ufebe" +
    "\043\ufebe\070\ufebe\074\ufebe\075\ufebe\076\ufebe\077\ufebe\100" +
    "\ufebe\101\ufebe\102\ufebe\001\002\000\054\003\064\004\051" +
    "\006\060\007\066\010\075\011\136\012\103\020\106\021" +
    "\074\022\055\036\070\037\071\041\102\042\107\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\102\144\001" +
    "\002\000\056\003\064\004\051\006\060\007\066\010\075" +
    "\011\256\012\103\020\106\021\074\022\055\036\070\037" +
    "\071\041\102\042\107\070\u037a\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\064\003" +
    "\ufec0\004\ufec0\005\u037b\006\ufec0\007\ufec0\010\ufec0\011\ufec0" +
    "\012\ufec0\020\ufec0\021\ufec0\022\ufec0\026\ufec0\036\ufec0\037" +
    "\ufec0\041\ufec0\042\ufec0\043\ufec0\070\ufec0\074\ufec0\075\ufec0" +
    "\076\ufec0\077\ufec0\100\ufec0\101\ufec0\102\ufec0\001\002\000" +
    "\004\067\u037c\001\002\000\054\003\064\004\051\006\060" +
    "\007\066\010\075\011\136\012\103\020\106\021\074\022" +
    "\055\036\070\037\071\041\102\042\107\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\144\001\002\000" +
    "\056\003\064\004\051\006\060\007\066\010\075\011\256" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\070\u037e\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\144\001\002\000\062\003\ufebd\004" +
    "\ufebd\006\ufebd\007\ufebd\010\ufebd\011\ufebd\012\ufebd\020\ufebd" +
    "\021\ufebd\022\ufebd\026\ufebd\036\ufebd\037\ufebd\041\ufebd\042" +
    "\ufebd\043\ufebd\070\ufebd\074\ufebd\075\ufebd\076\ufebd\077\ufebd" +
    "\100\ufebd\101\ufebd\102\ufebd\001\002\000\056\003\064\004" +
    "\051\006\060\007\066\010\075\011\256\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\070" +
    "\u0380\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\066\003\ufec4\004\ufec4\005\u0381\006" +
    "\ufec4\007\ufec4\010\ufec4\011\ufec4\012\ufec4\020\ufec4\021\ufec4" +
    "\022\ufec4\026\ufec4\036\ufec4\037\ufec4\041\ufec4\042\ufec4\043" +
    "\ufec4\067\u0382\070\ufec4\074\ufec4\075\ufec4\076\ufec4\077\ufec4" +
    "\100\ufec4\101\ufec4\102\ufec4\001\002\000\056\003\064\004" +
    "\051\006\060\007\066\010\075\011\136\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\067" +
    "\u0385\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\054\003\064\004\051\006\060\007" +
    "\066\010\075\011\136\012\103\020\106\021\074\022\055" +
    "\036\070\037\071\041\102\042\107\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\144\001\002\000\056" +
    "\003\064\004\051\006\060\007\066\010\075\011\256\012" +
    "\103\020\106\021\074\022\055\036\070\037\071\041\102" +
    "\042\107\070\u0384\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\102\144\001\002\000\062\003\ufebb\004\ufebb" +
    "\006\ufebb\007\ufebb\010\ufebb\011\ufebb\012\ufebb\020\ufebb\021" +
    "\ufebb\022\ufebb\026\ufebb\036\ufebb\037\ufebb\041\ufebb\042\ufebb" +
    "\043\ufebb\070\ufebb\074\ufebb\075\ufebb\076\ufebb\077\ufebb\100" +
    "\ufebb\101\ufebb\102\ufebb\001\002\000\054\003\064\004\051" +
    "\006\060\007\066\010\075\011\136\012\103\020\106\021" +
    "\074\022\055\036\070\037\071\041\102\042\107\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\102\144\001" +
    "\002\000\056\003\064\004\051\006\060\007\066\010\075" +
    "\011\256\012\103\020\106\021\074\022\055\036\070\037" +
    "\071\041\102\042\107\070\u0387\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\062\003" +
    "\ufebc\004\ufebc\006\ufebc\007\ufebc\010\ufebc\011\ufebc\012\ufebc" +
    "\020\ufebc\021\ufebc\022\ufebc\026\ufebc\036\ufebc\037\ufebc\041" +
    "\ufebc\042\ufebc\043\ufebc\070\ufebc\074\ufebc\075\ufebc\076\ufebc" +
    "\077\ufebc\100\ufebc\101\ufebc\102\ufebc\001\002\000\056\003" +
    "\064\004\051\006\060\007\066\010\075\011\256\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\070\u0389\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\144\001\002\000\062\003\ufec3\004\ufec3\006" +
    "\ufec3\007\ufec3\010\ufec3\011\ufec3\012\ufec3\020\ufec3\021\ufec3" +
    "\022\ufec3\026\ufec3\036\ufec3\037\ufec3\041\ufec3\042\ufec3\043" +
    "\ufec3\070\ufec3\074\ufec3\075\ufec3\076\ufec3\077\ufec3\100\ufec3" +
    "\101\ufec3\102\ufec3\001\002\000\026\022\ufed5\066\ufed5\067" +
    "\ufed5\074\ufed5\075\ufed5\076\ufed5\077\ufed5\100\ufed5\101\ufed5" +
    "\104\ufed5\001\002\000\026\022\ufed3\066\ufed3\067\ufed3\074" +
    "\ufed3\075\ufed3\076\ufed3\077\ufed3\100\ufed3\101\ufed3\104\ufed3" +
    "\001\002\000\030\022\ufed0\046\u038d\066\ufed0\067\ufed0\074" +
    "\ufed0\075\ufed0\076\ufed0\077\ufed0\100\ufed0\101\ufed0\104\ufed0" +
    "\001\002\000\012\003\165\102\157\103\162\105\163\001" +
    "\002\000\026\022\ufecf\066\ufecf\067\ufecf\074\ufecf\075\ufecf" +
    "\076\ufecf\077\ufecf\100\ufecf\101\ufecf\104\ufecf\001\002\000" +
    "\006\065\u03c0\102\u03c1\001\002\000\004\065\u03bd\001\002" +
    "\000\004\102\u03ba\001\002\000\020\014\u03ab\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\001\002\000\004" +
    "\065\u03a3\001\002\000\004\065\u039e\001\002\000\004\065" +
    "\u0396\001\002\000\004\102\u0397\001\002\000\004\104\u0398" +
    "\001\002\000\004\103\u0399\001\002\000\006\066\u039a\104" +
    "\u039b\001\002\000\026\022\ufec6\066\ufec6\067\ufec6\074\ufec6" +
    "\075\ufec6\076\ufec6\077\ufec6\100\ufec6\101\ufec6\104\ufec6\001" +
    "\002\000\004\103\u039c\001\002\000\004\066\u039d\001\002" +
    "\000\026\022\ufec5\066\ufec5\067\ufec5\074\ufec5\075\ufec5\076" +
    "\ufec5\077\ufec5\100\ufec5\101\ufec5\104\ufec5\001\002\000\004" +
    "\102\u039f\001\002\000\004\104\u03a0\001\002\000\010\003" +
    "\u0323\016\u0324\017\u0326\001\002\000\004\066\u03a2\001\002" +
    "\000\026\022\ufec8\066\ufec8\067\ufec8\074\ufec8\075\ufec8\076" +
    "\ufec8\077\ufec8\100\ufec8\101\ufec8\104\ufec8\001\002\000\004" +
    "\102\u03a4\001\002\000\004\104\u03a5\001\002\000\004\103" +
    "\u03a6\001\002\000\004\104\u03a7\001\002\000\004\103\u03a8" +
    "\001\002\000\004\066\u03a9\001\002\000\026\022\ufec7\066" +
    "\ufec7\067\ufec7\074\ufec7\075\ufec7\076\ufec7\077\ufec7\100\ufec7" +
    "\101\ufec7\104\ufec7\001\002\000\004\102\u03b3\001\002\000" +
    "\004\102\u03ac\001\002\000\004\065\u03ad\001\002\000\022" +
    "\003\043\022\040\074\012\075\017\076\010\077\021\100" +
    "\014\101\023\001\002\000\024\022\040\066\u03af\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\104\045\001" +
    "\002\000\004\067\u03b0\001\002\000\054\003\064\004\051" +
    "\006\060\007\066\010\075\011\065\012\103\020\106\021" +
    "\074\022\055\036\070\037\071\041\102\042\107\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\102\101\001" +
    "\002\000\056\003\064\004\051\006\060\007\066\010\075" +
    "\011\u0136\012\103\020\106\021\074\022\055\036\070\037" +
    "\071\041\102\042\107\070\u03b2\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\101\001\002\000\026\022" +
    "\ufec9\066\ufec9\067\ufec9\074\ufec9\075\ufec9\076\ufec9\077\ufec9" +
    "\100\ufec9\101\ufec9\104\ufec9\001\002\000\004\065\u03b4\001" +
    "\002\000\022\003\043\022\040\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\001\002\000\024\022\040\066" +
    "\u03b6\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\104\045\001\002\000\004\067\u03b7\001\002\000\054\003" +
    "\064\004\051\006\060\007\066\010\075\011\065\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\101\001\002\000\056\003\064\004\051\006\060\007" +
    "\066\010\075\011\u0136\012\103\020\106\021\074\022\055" +
    "\036\070\037\071\041\102\042\107\070\u03b9\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\101\001\002" +
    "\000\026\022\ufeca\066\ufeca\067\ufeca\074\ufeca\075\ufeca\076" +
    "\ufeca\077\ufeca\100\ufeca\101\ufeca\104\ufeca\001\002\000\030" +
    "\022\ufed2\046\u03bb\066\ufed2\067\ufed2\074\ufed2\075\ufed2\076" +
    "\ufed2\077\ufed2\100\ufed2\101\ufed2\104\ufed2\001\002\000\012" +
    "\003\165\102\157\103\162\105\163\001\002\000\026\022" +
    "\ufed1\066\ufed1\067\ufed1\074\ufed1\075\ufed1\076\ufed1\077\ufed1" +
    "\100\ufed1\101\ufed1\104\ufed1\001\002\000\006\003\u034e\103" +
    "\u034d\001\002\000\004\066\u03bf\001\002\000\026\022\ufecb" +
    "\066\ufecb\067\ufecb\074\ufecb\075\ufecb\076\ufecb\077\ufecb\100" +
    "\ufecb\101\ufecb\104\ufecb\001\002\000\004\103\u03c4\001\002" +
    "\000\030\022\ufece\046\u03c2\066\ufece\067\ufece\074\ufece\075" +
    "\ufece\076\ufece\077\ufece\100\ufece\101\ufece\104\ufece\001\002" +
    "\000\012\003\165\102\157\103\162\105\163\001\002\000" +
    "\026\022\ufecd\066\ufecd\067\ufecd\074\ufecd\075\ufecd\076\ufecd" +
    "\077\ufecd\100\ufecd\101\ufecd\104\ufecd\001\002\000\004\104" +
    "\u03c5\001\002\000\004\102\u03c6\001\002\000\004\066\u03c7" +
    "\001\002\000\026\022\ufecc\066\ufecc\067\ufecc\074\ufecc\075" +
    "\ufecc\076\ufecc\077\ufecc\100\ufecc\101\ufecc\104\ufecc\001\002" +
    "\000\024\002\ufff8\013\015\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\102\033\001\002\000\024\002\ufff7" +
    "\013\015\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\033\001\002\000\012\046\u04a7\065\u04a6\102\u04a8" +
    "\103\u04a5\001\002\000\040\022\uffc0\030\uffc0\031\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\040\uffc0\045\uffc0\070\uffc0\074\uffc0" +
    "\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\001\002\000" +
    "\040\003\u03d7\022\055\030\u03ce\031\u03d5\034\u03cf\035\u03da" +
    "\036\070\040\u03d6\045\u03ca\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\001\002\000\040\022\uffcc\030\uffcc" +
    "\031\uffcc\034\uffcc\035\uffcc\036\uffcc\040\uffcc\045\uffcc\070" +
    "\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc" +
    "\001\002\000\006\065\u0482\102\u0483\001\002\000\006\065" +
    "\u0464\102\u0465\001\002\000\040\022\055\030\u03ce\031\u03d5" +
    "\034\u03cf\035\u03da\036\070\040\u03d6\045\u03ca\070\u045c\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\001\002" +
    "\000\040\022\uffca\030\uffca\031\uffca\034\uffca\035\uffca\036" +
    "\uffca\040\uffca\045\uffca\070\uffca\074\uffca\075\uffca\076\uffca" +
    "\077\uffca\100\uffca\101\uffca\001\002\000\040\022\uffc6\030" +
    "\uffc6\031\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6\045\uffc6" +
    "\070\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101" +
    "\uffc6\001\002\000\040\022\uffc4\030\uffc4\031\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\040\uffc4\045\uffc4\070\uffc4\074\uffc4\075" +
    "\uffc4\076\uffc4\077\uffc4\100\uffc4\101\uffc4\001\002\000\040" +
    "\022\uffc2\030\uffc2\031\uffc2\034\uffc2\035\uffc2\036\uffc2\040" +
    "\uffc2\045\uffc2\070\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2" +
    "\100\uffc2\101\uffc2\001\002\000\010\003\u034e\065\u0451\103" +
    "\u034d\001\002\000\010\065\u03f4\102\u0162\103\u015e\001\002" +
    "\000\004\064\u03f3\001\002\000\040\022\uffc8\030\uffc8\031" +
    "\uffc8\034\uffc8\035\uffc8\036\uffc8\040\uffc8\045\uffc8\070\uffc8" +
    "\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8\001" +
    "\002\000\040\022\uffbe\030\uffbe\031\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\040\uffbe\045\uffbe\070\uffbe\074\uffbe\075\uffbe\076" +
    "\uffbe\077\uffbe\100\uffbe\101\uffbe\001\002\000\006\065\u03dc" +
    "\103\u03db\001\002\000\006\065\u03eb\104\u03ec\001\002\000" +
    "\006\102\u03de\103\u03dd\001\002\000\006\066\u03e5\104\u03e6" +
    "\001\002\000\006\066\u03df\104\u03e0\001\002\000\004\064" +
    "\u03e4\001\002\000\004\103\u03e1\001\002\000\004\066\u03e2" +
    "\001\002\000\004\064\u03e3\001\002\000\040\022\uff68\030" +
    "\uff68\031\uff68\034\uff68\035\uff68\036\uff68\040\uff68\045\uff68" +
    "\070\uff68\074\uff68\075\uff68\076\uff68\077\uff68\100\uff68\101" +
    "\uff68\001\002\000\040\022\uff6a\030\uff6a\031\uff6a\034\uff6a" +
    "\035\uff6a\036\uff6a\040\uff6a\045\uff6a\070\uff6a\074\uff6a\075" +
    "\uff6a\076\uff6a\077\uff6a\100\uff6a\101\uff6a\001\002\000\004" +
    "\064\u03ea\001\002\000\004\102\u03e7\001\002\000\004\066" +
    "\u03e8\001\002\000\042\022\uff6b\030\uff6b\031\uff6b\034\uff6b" +
    "\035\uff6b\036\uff6b\040\uff6b\045\uff6b\064\u03e9\070\uff6b\074" +
    "\uff6b\075\uff6b\076\uff6b\077\uff6b\100\uff6b\101\uff6b\001\002" +
    "\000\040\022\uff6c\030\uff6c\031\uff6c\034\uff6c\035\uff6c\036" +
    "\uff6c\040\uff6c\045\uff6c\070\uff6c\074\uff6c\075\uff6c\076\uff6c" +
    "\077\uff6c\100\uff6c\101\uff6c\001\002\000\040\022\uff69\030" +
    "\uff69\031\uff69\034\uff69\035\uff69\036\uff69\040\uff69\045\uff69" +
    "\070\uff69\074\uff69\075\uff69\076\uff69\077\uff69\100\uff69\101" +
    "\uff69\001\002\000\004\104\u03f0\001\002\000\004\102\u03ed" +
    "\001\002\000\004\066\u03ee\001\002\000\004\064\u03ef\001" +
    "\002\000\040\022\uff67\030\uff67\031\uff67\034\uff67\035\uff67" +
    "\036\uff67\040\uff67\045\uff67\070\uff67\074\uff67\075\uff67\076" +
    "\uff67\077\uff67\100\uff67\101\uff67\001\002\000\004\102\u03f1" +
    "\001\002\000\004\064\u03f2\001\002\000\040\022\uff66\030" +
    "\uff66\031\uff66\034\uff66\035\uff66\036\uff66\040\uff66\045\uff66" +
    "\070\uff66\074\uff66\075\uff66\076\uff66\077\uff66\100\uff66\101" +
    "\uff66\001\002\000\040\022\uffbc\030\uffbc\031\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\040\uffbc\045\uffbc\070\uffbc\074\uffbc\075" +
    "\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\001\002\000\010" +
    "\102\u0162\103\u015e\105\u0405\001\002\000\004\104\u03f6\001" +
    "\002\000\006\102\u0162\103\u015e\001\002\000\010\064\u03f9" +
    "\066\u03f8\104\u03fa\001\002\000\004\064\u0404\001\002\000" +
    "\040\022\ufef0\030\ufef0\031\ufef0\034\ufef0\035\ufef0\036\ufef0" +
    "\040\ufef0\045\ufef0\070\ufef0\074\ufef0\075\ufef0\076\ufef0\077" +
    "\ufef0\100\ufef0\101\ufef0\001\002\000\006\102\u0162\103\u015e" +
    "\001\002\000\010\064\u03fd\066\u03fc\104\u03fe\001\002\000" +
    "\004\064\u0403\001\002\000\040\022\ufeed\030\ufeed\031\ufeed" +
    "\034\ufeed\035\ufeed\036\ufeed\040\ufeed\045\ufeed\070\ufeed\074" +
    "\ufeed\075\ufeed\076\ufeed\077\ufeed\100\ufeed\101\ufeed\001\002" +
    "\000\006\102\u0162\103\u015e\001\002\000\006\064\u0401\066" +
    "\u0400\001\002\000\004\064\u0402\001\002\000\040\022\ufeea" +
    "\030\ufeea\031\ufeea\034\ufeea\035\ufeea\036\ufeea\040\ufeea\045" +
    "\ufeea\070\ufeea\074\ufeea\075\ufeea\076\ufeea\077\ufeea\100\ufeea" +
    "\101\ufeea\001\002\000\040\022\ufeeb\030\ufeeb\031\ufeeb\034" +
    "\ufeeb\035\ufeeb\036\ufeeb\040\ufeeb\045\ufeeb\070\ufeeb\074\ufeeb" +
    "\075\ufeeb\076\ufeeb\077\ufeeb\100\ufeeb\101\ufeeb\001\002\000" +
    "\040\022\ufeee\030\ufeee\031\ufeee\034\ufeee\035\ufeee\036\ufeee" +
    "\040\ufeee\045\ufeee\070\ufeee\074\ufeee\075\ufeee\076\ufeee\077" +
    "\ufeee\100\ufeee\101\ufeee\001\002\000\040\022\ufef1\030\ufef1" +
    "\031\ufef1\034\ufef1\035\ufef1\036\ufef1\040\ufef1\045\ufef1\070" +
    "\ufef1\074\ufef1\075\ufef1\076\ufef1\077\ufef1\100\ufef1\101\ufef1" +
    "\001\002\000\004\104\u0445\001\002\000\010\102\u0162\103" +
    "\u015e\104\u0408\001\002\000\012\066\u0431\102\u0162\103\u015e" +
    "\104\u0432\001\002\000\010\102\u0162\103\u015e\105\u0409\001" +
    "\002\000\006\066\u0427\104\u0428\001\002\000\014\064\u040c" +
    "\066\u040b\102\u0162\103\u015e\104\u040e\001\002\000\042\022" +
    "\ufefe\030\ufefe\031\ufefe\034\ufefe\035\ufefe\036\ufefe\040\ufefe" +
    "\045\ufefe\064\u0426\070\ufefe\074\ufefe\075\ufefe\076\ufefe\077" +
    "\ufefe\100\ufefe\101\ufefe\001\002\000\040\022\ufef2\030\ufef2" +
    "\031\ufef2\034\ufef2\035\ufef2\036\ufef2\040\ufef2\045\ufef2\070" +
    "\ufef2\074\ufef2\075\ufef2\076\ufef2\077\ufef2\100\ufef2\101\ufef2" +
    "\001\002\000\012\066\u041d\102\u0162\103\u015e\104\u041e\001" +
    "\002\000\010\102\u0162\103\u015e\105\u040f\001\002\000\004" +
    "\104\u0419\001\002\000\010\064\u0412\066\u0411\104\u0413\001" +
    "\002\000\042\022\ufefd\030\ufefd\031\ufefd\034\ufefd\035\ufefd" +
    "\036\ufefd\040\ufefd\045\ufefd\064\u0418\070\ufefd\074\ufefd\075" +
    "\ufefd\076\ufefd\077\ufefd\100\ufefd\101\ufefd\001\002\000\040" +
    "\022\ufeef\030\ufeef\031\ufeef\034\ufeef\035\ufeef\036\ufeef\040" +
    "\ufeef\045\ufeef\070\ufeef\074\ufeef\075\ufeef\076\ufeef\077\ufeef" +
    "\100\ufeef\101\ufeef\001\002\000\006\102\u0162\103\u015e\001" +
    "\002\000\006\064\u0416\066\u0415\001\002\000\042\022\ufefc" +
    "\030\ufefc\031\ufefc\034\ufefc\035\ufefc\036\ufefc\040\ufefc\045" +
    "\ufefc\064\u0417\070\ufefc\074\ufefc\075\ufefc\076\ufefc\077\ufefc" +
    "\100\ufefc\101\ufefc\001\002\000\040\022\ufeec\030\ufeec\031" +
    "\ufeec\034\ufeec\035\ufeec\036\ufeec\040\ufeec\045\ufeec\070\ufeec" +
    "\074\ufeec\075\ufeec\076\ufeec\077\ufeec\100\ufeec\101\ufeec\001" +
    "\002\000\040\022\ufeff\030\ufeff\031\ufeff\034\ufeff\035\ufeff" +
    "\036\ufeff\040\ufeff\045\ufeff\070\ufeff\074\ufeff\075\ufeff\076" +
    "\ufeff\077\ufeff\100\ufeff\101\ufeff\001\002\000\040\022\uff00" +
    "\030\uff00\031\uff00\034\uff00\035\uff00\036\uff00\040\uff00\045" +
    "\uff00\070\uff00\074\uff00\075\uff00\076\uff00\077\uff00\100\uff00" +
    "\101\uff00\001\002\000\006\102\u0162\103\u015e\001\002\000" +
    "\004\066\u041b\001\002\000\004\064\u041c\001\002\000\040" +
    "\022\ufee3\030\ufee3\031\ufee3\034\ufee3\035\ufee3\036\ufee3\040" +
    "\ufee3\045\ufee3\070\ufee3\074\ufee3\075\ufee3\076\ufee3\077\ufee3" +
    "\100\ufee3\101\ufee3\001\002\000\004\064\u0425\001\002\000" +
    "\006\102\u0162\103\u015e\001\002\000\004\066\u0420\001\002" +
    "\000\004\064\u0421\001\002\000\040\022\ufef3\030\ufef3\031" +
    "\ufef3\034\ufef3\035\ufef3\036\ufef3\040\ufef3\045\ufef3\070\ufef3" +
    "\074\ufef3\075\ufef3\076\ufef3\077\ufef3\100\ufef3\101\ufef3\001" +
    "\002\000\004\066\u0423\001\002\000\004\064\u0424\001\002" +
    "\000\040\022\ufef4\030\ufef4\031\ufef4\034\ufef4\035\ufef4\036" +
    "\ufef4\040\ufef4\045\ufef4\070\ufef4\074\ufef4\075\ufef4\076\ufef4" +
    "\077\ufef4\100\ufef4\101\ufef4\001\002\000\040\022\ufef8\030" +
    "\ufef8\031\ufef8\034\ufef8\035\ufef8\036\ufef8\040\ufef8\045\ufef8" +
    "\070\ufef8\074\ufef8\075\ufef8\076\ufef8\077\ufef8\100\ufef8\101" +
    "\ufef8\001\002\000\040\022\uff01\030\uff01\031\uff01\034\uff01" +
    "\035\uff01\036\uff01\040\uff01\045\uff01\070\uff01\074\uff01\075" +
    "\uff01\076\uff01\077\uff01\100\uff01\101\uff01\001\002\000\004" +
    "\064\u0430\001\002\000\006\102\u0162\103\u015e\001\002\000" +
    "\006\066\u042a\104\u042b\001\002\000\004\064\u042f\001\002" +
    "\000\006\102\u0162\103\u015e\001\002\000\004\066\u042d\001" +
    "\002\000\004\064\u042e\001\002\000\040\022\ufee4\030\ufee4" +
    "\031\ufee4\034\ufee4\035\ufee4\036\ufee4\040\ufee4\045\ufee4\070" +
    "\ufee4\074\ufee4\075\ufee4\076\ufee4\077\ufee4\100\ufee4\101\ufee4" +
    "\001\002\000\040\022\ufee6\030\ufee6\031\ufee6\034\ufee6\035" +
    "\ufee6\036\ufee6\040\ufee6\045\ufee6\070\ufee6\074\ufee6\075\ufee6" +
    "\076\ufee6\077\ufee6\100\ufee6\101\ufee6\001\002\000\040\022" +
    "\ufee8\030\ufee8\031\ufee8\034\ufee8\035\ufee8\036\ufee8\040\ufee8" +
    "\045\ufee8\070\ufee8\074\ufee8\075\ufee8\076\ufee8\077\ufee8\100" +
    "\ufee8\101\ufee8\001\002\000\004\064\u0444\001\002\000\006" +
    "\102\u0162\103\u015e\001\002\000\012\066\u0434\102\u0162\103" +
    "\u015e\104\u0435\001\002\000\004\064\u043c\001\002\000\006" +
    "\102\u0162\103\u015e\001\002\000\004\066\u0437\001\002\000" +
    "\004\064\u0438\001\002\000\040\022\ufef5\030\ufef5\031\ufef5" +
    "\034\ufef5\035\ufef5\036\ufef5\040\ufef5\045\ufef5\070\ufef5\074" +
    "\ufef5\075\ufef5\076\ufef5\077\ufef5\100\ufef5\101\ufef5\001\002" +
    "\000\004\066\u043a\001\002\000\004\064\u043b\001\002\000" +
    "\040\022\ufef6\030\ufef6\031\ufef6\034\ufef6\035\ufef6\036\ufef6" +
    "\040\ufef6\045\ufef6\070\ufef6\074\ufef6\075\ufef6\076\ufef6\077" +
    "\ufef6\100\ufef6\101\ufef6\001\002\000\040\022\ufef9\030\ufef9" +
    "\031\ufef9\034\ufef9\035\ufef9\036\ufef9\040\ufef9\045\ufef9\070" +
    "\ufef9\074\ufef9\075\ufef9\076\ufef9\077\ufef9\100\ufef9\101\ufef9" +
    "\001\002\000\006\066\u043e\104\u043f\001\002\000\004\064" +
    "\u0443\001\002\000\006\102\u0162\103\u015e\001\002\000\004" +
    "\066\u0441\001\002\000\004\064\u0442\001\002\000\040\022" +
    "\ufef7\030\ufef7\031\ufef7\034\ufef7\035\ufef7\036\ufef7\040\ufef7" +
    "\045\ufef7\070\ufef7\074\ufef7\075\ufef7\076\ufef7\077\ufef7\100" +
    "\ufef7\101\ufef7\001\002\000\040\022\ufefa\030\ufefa\031\ufefa" +
    "\034\ufefa\035\ufefa\036\ufefa\040\ufefa\045\ufefa\070\ufefa\074" +
    "\ufefa\075\ufefa\076\ufefa\077\ufefa\100\ufefa\101\ufefa\001\002" +
    "\000\040\022\ufefb\030\ufefb\031\ufefb\034\ufefb\035\ufefb\036" +
    "\ufefb\040\ufefb\045\ufefb\070\ufefb\074\ufefb\075\ufefb\076\ufefb" +
    "\077\ufefb\100\ufefb\101\ufefb\001\002\000\006\102\u0162\103" +
    "\u015e\001\002\000\006\066\u0447\104\u0448\001\002\000\004" +
    "\064\u0450\001\002\000\006\102\u0162\103\u015e\001\002\000" +
    "\006\066\u044a\104\u044b\001\002\000\004\064\u044f\001\002" +
    "\000\006\102\u0162\103\u015e\001\002\000\004\066\u044d\001" +
    "\002\000\004\064\u044e\001\002\000\040\022\ufee5\030\ufee5" +
    "\031\ufee5\034\ufee5\035\ufee5\036\ufee5\040\ufee5\045\ufee5\070" +
    "\ufee5\074\ufee5\075\ufee5\076\ufee5\077\ufee5\100\ufee5\101\ufee5" +
    "\001\002\000\040\022\ufee7\030\ufee7\031\ufee7\034\ufee7\035" +
    "\ufee7\036\ufee7\040\ufee7\045\ufee7\070\ufee7\074\ufee7\075\ufee7" +
    "\076\ufee7\077\ufee7\100\ufee7\101\ufee7\001\002\000\040\022" +
    "\ufee9\030\ufee9\031\ufee9\034\ufee9\035\ufee9\036\ufee9\040\ufee9" +
    "\045\ufee9\070\ufee9\074\ufee9\075\ufee9\076\ufee9\077\ufee9\100" +
    "\ufee9\101\ufee9\001\002\000\010\003\u034e\066\u0455\103\u034d" +
    "\001\002\000\004\066\u0453\001\002\000\004\064\u0454\001" +
    "\002\000\040\022\uff62\030\uff62\031\uff62\034\uff62\035\uff62" +
    "\036\uff62\040\uff62\045\uff62\070\uff62\074\uff62\075\uff62\076" +
    "\uff62\077\uff62\100\uff62\101\uff62\001\002\000\004\064\u045a" +
    "\001\002\000\006\064\u0458\066\u0457\001\002\000\042\022" +
    "\uff64\030\uff64\031\uff64\034\uff64\035\uff64\036\uff64\040\uff64" +
    "\045\uff64\064\u0459\070\uff64\074\uff64\075\uff64\076\uff64\077" +
    "\uff64\100\uff64\101\uff64\001\002\000\040\022\uff61\030\uff61" +
    "\031\uff61\034\uff61\035\uff61\036\uff61\040\uff61\045\uff61\070" +
    "\uff61\074\uff61\075\uff61\076\uff61\077\uff61\100\uff61\101\uff61" +
    "\001\002\000\040\022\uff65\030\uff65\031\uff65\034\uff65\035" +
    "\uff65\036\uff65\040\uff65\045\uff65\070\uff65\074\uff65\075\uff65" +
    "\076\uff65\077\uff65\100\uff65\101\uff65\001\002\000\040\022" +
    "\uff63\030\uff63\031\uff63\034\uff63\035\uff63\036\uff63\040\uff63" +
    "\045\uff63\070\uff63\074\uff63\075\uff63\076\uff63\077\uff63\100" +
    "\uff63\101\uff63\001\002\000\040\022\uffbf\030\uffbf\031\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\040\uffbf\045\uffbf\070\uffbf\074" +
    "\uffbf\075\uffbf\076\uffbf\077\uffbf\100\uffbf\101\uffbf\001\002" +
    "\000\026\002\uffd3\013\uffd3\025\uffd3\074\uffd3\075\uffd3\076" +
    "\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\001\002\000\040" +
    "\022\uffcb\030\uffcb\031\uffcb\034\uffcb\035\uffcb\036\uffcb\040" +
    "\uffcb\045\uffcb\070\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb" +
    "\100\uffcb\101\uffcb\001\002\000\040\022\uffc9\030\uffc9\031" +
    "\uffc9\034\uffc9\035\uffc9\036\uffc9\040\uffc9\045\uffc9\070\uffc9" +
    "\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\001" +
    "\002\000\040\022\uffc5\030\uffc5\031\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\040\uffc5\045\uffc5\070\uffc5\074\uffc5\075\uffc5\076" +
    "\uffc5\077\uffc5\100\uffc5\101\uffc5\001\002\000\040\022\uffc3" +
    "\030\uffc3\031\uffc3\034\uffc3\035\uffc3\036\uffc3\040\uffc3\045" +
    "\uffc3\070\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3" +
    "\101\uffc3\001\002\000\040\022\uffc1\030\uffc1\031\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\040\uffc1\045\uffc1\070\uffc1\074\uffc1" +
    "\075\uffc1\076\uffc1\077\uffc1\100\uffc1\101\uffc1\001\002\000" +
    "\040\022\uffc7\030\uffc7\031\uffc7\034\uffc7\035\uffc7\036\uffc7" +
    "\040\uffc7\045\uffc7\070\uffc7\074\uffc7\075\uffc7\076\uffc7\077" +
    "\uffc7\100\uffc7\101\uffc7\001\002\000\040\022\uffbd\030\uffbd" +
    "\031\uffbd\034\uffbd\035\uffbd\036\uffbd\040\uffbd\045\uffbd\070" +
    "\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101\uffbd" +
    "\001\002\000\006\102\u046d\103\u046c\001\002\000\004\104" +
    "\u0466\001\002\000\004\103\u0467\001\002\000\004\104\u0468" +
    "\001\002\000\004\103\u0469\001\002\000\004\066\u046a\001" +
    "\002\000\004\064\u046b\001\002\000\040\022\uff41\030\uff41" +
    "\031\uff41\034\uff41\035\uff41\036\uff41\040\uff41\045\uff41\070" +
    "\uff41\074\uff41\075\uff41\076\uff41\077\uff41\100\uff41\101\uff41" +
    "\001\002\000\004\104\u0477\001\002\000\004\104\u046e\001" +
    "\002\000\004\103\u046f\001\002\000\006\066\u0470\104\u0471" +
    "\001\002\000\004\064\u0476\001\002\000\004\103\u0472\001" +
    "\002\000\006\064\u0474\066\u0473\001\002\000\042\022\uff46" +
    "\030\uff46\031\uff46\034\uff46\035\uff46\036\uff46\040\uff46\045" +
    "\uff46\064\u0475\070\uff46\074\uff46\075\uff46\076\uff46\077\uff46" +
    "\100\uff46\101\uff46\001\002\000\040\022\uff40\030\uff40\031" +
    "\uff40\034\uff40\035\uff40\036\uff40\040\uff40\045\uff40\070\uff40" +
    "\074\uff40\075\uff40\076\uff40\077\uff40\100\uff40\101\uff40\001" +
    "\002\000\040\022\uff47\030\uff47\031\uff47\034\uff47\035\uff47" +
    "\036\uff47\040\uff47\045\uff47\070\uff47\074\uff47\075\uff47\076" +
    "\uff47\077\uff47\100\uff47\101\uff47\001\002\000\040\022\uff44" +
    "\030\uff44\031\uff44\034\uff44\035\uff44\036\uff44\040\uff44\045" +
    "\uff44\070\uff44\074\uff44\075\uff44\076\uff44\077\uff44\100\uff44" +
    "\101\uff44\001\002\000\006\102\u0479\103\u0478\001\002\000" +
    "\006\066\u047c\104\u047d\001\002\000\004\066\u047a\001\002" +
    "\000\004\064\u047b\001\002\000\040\022\uff42\030\uff42\031" +
    "\uff42\034\uff42\035\uff42\036\uff42\040\uff42\045\uff42\070\uff42" +
    "\074\uff42\075\uff42\076\uff42\077\uff42\100\uff42\101\uff42\001" +
    "\002\000\004\064\u0481\001\002\000\004\102\u047e\001\002" +
    "\000\004\066\u047f\001\002\000\004\064\u0480\001\002\000" +
    "\040\022\uff43\030\uff43\031\uff43\034\uff43\035\uff43\036\uff43" +
    "\040\uff43\045\uff43\070\uff43\074\uff43\075\uff43\076\uff43\077" +
    "\uff43\100\uff43\101\uff43\001\002\000\040\022\uff45\030\uff45" +
    "\031\uff45\034\uff45\035\uff45\036\uff45\040\uff45\045\uff45\070" +
    "\uff45\074\uff45\075\uff45\076\uff45\077\uff45\100\uff45\101\uff45" +
    "\001\002\000\016\003\u0323\016\u0324\017\u0326\066\u048a\102" +
    "\u048b\103\u0489\001\002\000\004\104\u0484\001\002\000\010" +
    "\003\u0323\016\u0324\017\u0326\001\002\000\006\064\u0487\066" +
    "\u0486\001\002\000\004\064\u0488\001\002\000\040\022\uff53" +
    "\030\uff53\031\uff53\034\uff53\035\uff53\036\uff53\040\uff53\045" +
    "\uff53\070\uff53\074\uff53\075\uff53\076\uff53\077\uff53\100\uff53" +
    "\101\uff53\001\002\000\040\022\uff55\030\uff55\031\uff55\034" +
    "\uff55\035\uff55\036\uff55\040\uff55\045\uff55\070\uff55\074\uff55" +
    "\075\uff55\076\uff55\077\uff55\100\uff55\101\uff55\001\002\000" +
    "\004\104\u049f\001\002\000\004\064\u049e\001\002\000\012" +
    "\003\u0323\016\u0324\017\u0326\104\u048f\001\002\000\004\066" +
    "\u048d\001\002\000\004\064\u048e\001\002\000\040\022\uff51" +
    "\030\uff51\031\uff51\034\uff51\035\uff51\036\uff51\040\uff51\045" +
    "\uff51\070\uff51\074\uff51\075\uff51\076\uff51\077\uff51\100\uff51" +
    "\101\uff51\001\002\000\014\003\u0323\016\u0324\017\u0326\102" +
    "\u0162\103\u015e\001\002\000\004\066\u0491\001\002\000\004" +
    "\064\u0492\001\002\000\040\022\uff52\030\uff52\031\uff52\034" +
    "\uff52\035\uff52\036\uff52\040\uff52\045\uff52\070\uff52\074\uff52" +
    "\075\uff52\076\uff52\077\uff52\100\uff52\101\uff52\001\002\000" +
    "\004\066\u049c\001\002\000\010\064\u0496\066\u0495\104\u0497" +
    "\001\002\000\042\022\uff56\030\uff56\031\uff56\034\uff56\035" +
    "\uff56\036\uff56\040\uff56\045\uff56\064\u049b\070\uff56\074\uff56" +
    "\075\uff56\076\uff56\077\uff56\100\uff56\101\uff56\001\002\000" +
    "\040\022\uff54\030\uff54\031\uff54\034\uff54\035\uff54\036\uff54" +
    "\040\uff54\045\uff54\070\uff54\074\uff54\075\uff54\076\uff54\077" +
    "\uff54\100\uff54\101\uff54\001\002\000\004\103\u0498\001\002" +
    "\000\004\066\u0499\001\002\000\004\064\u049a\001\002\000" +
    "\040\022\uff4d\030\uff4d\031\uff4d\034\uff4d\035\uff4d\036\uff4d" +
    "\040\uff4d\045\uff4d\070\uff4d\074\uff4d\075\uff4d\076\uff4d\077" +
    "\uff4d\100\uff4d\101\uff4d\001\002\000\040\022\uff57\030\uff57" +
    "\031\uff57\034\uff57\035\uff57\036\uff57\040\uff57\045\uff57\070" +
    "\uff57\074\uff57\075\uff57\076\uff57\077\uff57\100\uff57\101\uff57" +
    "\001\002\000\004\064\u049d\001\002\000\040\022\uff50\030" +
    "\uff50\031\uff50\034\uff50\035\uff50\036\uff50\040\uff50\045\uff50" +
    "\070\uff50\074\uff50\075\uff50\076\uff50\077\uff50\100\uff50\101" +
    "\uff50\001\002\000\040\022\uff4f\030\uff4f\031\uff4f\034\uff4f" +
    "\035\uff4f\036\uff4f\040\uff4f\045\uff4f\070\uff4f\074\uff4f\075" +
    "\uff4f\076\uff4f\077\uff4f\100\uff4f\101\uff4f\001\002\000\010" +
    "\003\u0323\016\u0324\017\u0326\001\002\000\004\066\u04a1\001" +
    "\002\000\004\064\u04a2\001\002\000\040\022\uff4e\030\uff4e" +
    "\031\uff4e\034\uff4e\035\uff4e\036\uff4e\040\uff4e\045\uff4e\070" +
    "\uff4e\074\uff4e\075\uff4e\076\uff4e\077\uff4e\100\uff4e\101\uff4e" +
    "\001\002\000\040\022\055\030\u03ce\031\u03d5\034\u03cf\035" +
    "\u03da\036\070\040\u03d6\045\u03ca\070\u04a4\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\001\002\000\026\002" +
    "\uffd4\013\uffd4\025\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4" +
    "\100\uffd4\101\uffd4\102\uffd4\001\002\000\004\066\u04bc\001" +
    "\002\000\010\102\u04b3\103\u04b1\105\u04b2\001\002\000\010" +
    "\065\u04ab\102\u0162\103\u015e\001\002\000\004\066\u04a9\001" +
    "\002\000\004\064\u04aa\001\002\000\040\022\uff2a\030\uff2a" +
    "\031\uff2a\034\uff2a\035\uff2a\036\uff2a\040\uff2a\045\uff2a\070" +
    "\uff2a\074\uff2a\075\uff2a\076\uff2a\077\uff2a\100\uff2a\101\uff2a" +
    "\001\002\000\006\102\u0162\103\u015e\001\002\000\004\064" +
    "\u04ad\001\002\000\040\022\uff25\030\uff25\031\uff25\034\uff25" +
    "\035\uff25\036\uff25\040\uff25\045\uff25\070\uff25\074\uff25\075" +
    "\uff25\076\uff25\077\uff25\100\uff25\101\uff25\001\002\000\004" +
    "\066\u04af\001\002\000\004\064\u04b0\001\002\000\040\022" +
    "\uff24\030\uff24\031\uff24\034\uff24\035\uff24\036\uff24\040\uff24" +
    "\045\uff24\070\uff24\074\uff24\075\uff24\076\uff24\077\uff24\100" +
    "\uff24\101\uff24\001\002\000\006\064\u04ba\066\u04b9\001\002" +
    "\000\004\066\u04b7\001\002\000\006\064\u04b5\066\u04b4\001" +
    "\002\000\042\022\uff2c\030\uff2c\031\uff2c\034\uff2c\035\uff2c" +
    "\036\uff2c\040\uff2c\045\uff2c\064\u04b6\070\uff2c\074\uff2c\075" +
    "\uff2c\076\uff2c\077\uff2c\100\uff2c\101\uff2c\001\002\000\040" +
    "\022\uff29\030\uff29\031\uff29\034\uff29\035\uff29\036\uff29\040" +
    "\uff29\045\uff29\070\uff29\074\uff29\075\uff29\076\uff29\077\uff29" +
    "\100\uff29\101\uff29\001\002\000\040\022\uff2e\030\uff2e\031" +
    "\uff2e\034\uff2e\035\uff2e\036\uff2e\040\uff2e\045\uff2e\070\uff2e" +
    "\074\uff2e\075\uff2e\076\uff2e\077\uff2e\100\uff2e\101\uff2e\001" +
    "\002\000\004\064\u04b8\001\002\000\040\022\uff26\030\uff26" +
    "\031\uff26\034\uff26\035\uff26\036\uff26\040\uff26\045\uff26\070" +
    "\uff26\074\uff26\075\uff26\076\uff26\077\uff26\100\uff26\101\uff26" +
    "\001\002\000\042\022\uff2b\030\uff2b\031\uff2b\034\uff2b\035" +
    "\uff2b\036\uff2b\040\uff2b\045\uff2b\064\u04bb\070\uff2b\074\uff2b" +
    "\075\uff2b\076\uff2b\077\uff2b\100\uff2b\101\uff2b\001\002\000" +
    "\040\022\uff27\030\uff27\031\uff27\034\uff27\035\uff27\036\uff27" +
    "\040\uff27\045\uff27\070\uff27\074\uff27\075\uff27\076\uff27\077" +
    "\uff27\100\uff27\101\uff27\001\002\000\040\022\uff2d\030\uff2d" +
    "\031\uff2d\034\uff2d\035\uff2d\036\uff2d\040\uff2d\045\uff2d\070" +
    "\uff2d\074\uff2d\075\uff2d\076\uff2d\077\uff2d\100\uff2d\101\uff2d" +
    "\001\002\000\004\064\u04bd\001\002\000\040\022\uff28\030" +
    "\uff28\031\uff28\034\uff28\035\uff28\036\uff28\040\uff28\045\uff28" +
    "\070\uff28\074\uff28\075\uff28\076\uff28\077\uff28\100\uff28\101" +
    "\uff28\001\002\000\004\065\u04bf\001\002\000\022\003\043" +
    "\022\040\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\001\002\000\024\022\040\066\u04c1\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\104\045\001\002\000" +
    "\004\067\u04c2\001\002\000\054\003\064\004\051\006\060" +
    "\007\066\010\075\011\065\012\103\020\106\021\074\022" +
    "\055\036\070\037\071\041\102\042\107\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\101\001\002\000" +
    "\056\003\064\004\051\006\060\007\066\010\075\011\u0136" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\070\u04c4\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\102\101\001\002\000\032\002\uffdf\003" +
    "\uffdf\013\uffdf\025\uffdf\033\uffdf\074\uffdf\075\uffdf\076\uffdf" +
    "\077\uffdf\100\uffdf\101\uffdf\102\uffdf\001\002\000\004\002" +
    "\ufffe\001\002\000\024\002\uffeb\013\015\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\033\001\002\000" +
    "\004\002\ufff2\001\002\000\026\002\uffd2\013\uffd2\025\uffd2" +
    "\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101\uffd2\102" +
    "\uffd2\001\002\000\026\002\uffd1\013\uffd1\025\uffd1\074\uffd1" +
    "\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\001" +
    "\002\000\056\003\064\004\051\006\060\007\066\010\075" +
    "\011\256\012\103\020\106\021\074\022\055\026\u04cf\036" +
    "\070\037\071\041\102\042\107\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\144\001\002\000\054\003" +
    "\064\004\051\006\060\007\066\010\075\011\136\012\103" +
    "\020\106\021\074\022\055\036\070\037\071\041\102\042" +
    "\107\074\012\075\017\076\010\077\021\100\014\101\023" +
    "\102\144\001\002\000\056\003\064\004\051\006\060\007" +
    "\066\010\075\011\256\012\103\020\106\021\074\022\055" +
    "\026\u04cd\036\070\037\071\041\102\042\107\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\144\001\002" +
    "\000\032\002\uffce\003\uffce\013\uffce\033\uffce\064\u04ce\074" +
    "\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce\102\uffce" +
    "\001\002\000\030\002\uffd0\003\uffd0\013\uffd0\033\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0" +
    "\001\002\000\032\002\uffcf\003\uffcf\013\uffcf\033\uffcf\064" +
    "\u04d0\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf" +
    "\102\uffcf\001\002\000\030\002\uffcd\003\uffcd\013\uffcd\033" +
    "\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd" +
    "\102\uffcd\001\002\000\022\003\043\022\040\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\001\002\000\006" +
    "\065\u04e6\102\u04e7\001\002\000\004\065\u04e0\001\002\000" +
    "\004\102\u04d5\001\002\000\004\065\u04d6\001\002\000\024" +
    "\003\043\022\040\066\u04d7\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\001\002\000\004\067\u04dd\001\002" +
    "\000\024\022\040\066\u04d9\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\104\045\001\002\000\004\067\u04da" +
    "\001\002\000\054\003\064\004\051\006\060\007\066\010" +
    "\075\011\065\012\103\020\106\021\074\022\055\036\070" +
    "\037\071\041\102\042\107\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\102\101\001\002\000\056\003\064" +
    "\004\051\006\060\007\066\010\075\011\u0136\012\103\020" +
    "\106\021\074\022\055\036\070\037\071\041\102\042\107" +
    "\070\u04dc\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\101\001\002\000\032\002\uffe7\003\uffe7\013\uffe7" +
    "\025\uffe7\033\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\100" +
    "\uffe7\101\uffe7\102\uffe7\001\002\000\054\003\064\004\051" +
    "\006\060\007\066\010\075\011\065\012\103\020\106\021" +
    "\074\022\055\036\070\037\071\041\102\042\107\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\102\101\001" +
    "\002\000\056\003\064\004\051\006\060\007\066\010\075" +
    "\011\u0136\012\103\020\106\021\074\022\055\036\070\037" +
    "\071\041\102\042\107\070\u04df\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\101\001\002\000\032\002" +
    "\uffe6\003\uffe6\013\uffe6\025\uffe6\033\uffe6\074\uffe6\075\uffe6" +
    "\076\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6\001\002\000" +
    "\022\003\043\022\040\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\001\002\000\024\022\040\066\u04e2\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\104\045" +
    "\001\002\000\004\067\u04e3\001\002\000\054\003\064\004" +
    "\051\006\060\007\066\010\075\011\065\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\101" +
    "\001\002\000\056\003\064\004\051\006\060\007\066\010" +
    "\075\011\u0136\012\103\020\106\021\074\022\055\036\070" +
    "\037\071\041\102\042\107\070\u04e5\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\101\001\002\000\032" +
    "\002\uffe5\003\uffe5\013\uffe5\025\uffe5\033\uffe5\074\uffe5\075" +
    "\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\001\002" +
    "\000\022\003\043\022\040\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\001\002\000\024\003\043\022\040" +
    "\065\u04e8\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\001\002\000\022\003\043\022\040\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\001\002\000\026\022" +
    "\040\066\u04eb\067\u04ea\074\012\075\017\076\010\077\021" +
    "\100\014\101\023\104\045\001\002\000\054\003\064\004" +
    "\051\006\060\007\066\010\075\011\065\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\101" +
    "\001\002\000\004\067\u04ec\001\002\000\054\003\064\004" +
    "\051\006\060\007\066\010\075\011\065\012\103\020\106" +
    "\021\074\022\055\036\070\037\071\041\102\042\107\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\101" +
    "\001\002\000\056\003\064\004\051\006\060\007\066\010" +
    "\075\011\u0136\012\103\020\106\021\074\022\055\036\070" +
    "\037\071\041\102\042\107\070\u04ee\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\101\001\002\000\032" +
    "\002\uffe2\003\uffe2\013\uffe2\025\uffe2\033\uffe2\074\uffe2\075" +
    "\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\001\002" +
    "\000\056\003\064\004\051\006\060\007\066\010\075\011" +
    "\u0136\012\103\020\106\021\074\022\055\036\070\037\071" +
    "\041\102\042\107\070\u04f0\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\102\101\001\002\000\032\002\uffe0" +
    "\003\uffe0\013\uffe0\025\uffe0\033\uffe0\074\uffe0\075\uffe0\076" +
    "\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0\001\002\000\026" +
    "\022\040\066\u04f3\067\u04f2\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\104\045\001\002\000\054\003\064" +
    "\004\051\006\060\007\066\010\075\011\065\012\103\020" +
    "\106\021\074\022\055\036\070\037\071\041\102\042\107" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\101\001\002\000\056\003\064\004\051\006\060\007\066" +
    "\010\075\011\065\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\067\u04f4\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\101\001\002\000" +
    "\054\003\064\004\051\006\060\007\066\010\075\011\065" +
    "\012\103\020\106\021\074\022\055\036\070\037\071\041" +
    "\102\042\107\074\012\075\017\076\010\077\021\100\014" +
    "\101\023\102\101\001\002\000\056\003\064\004\051\006" +
    "\060\007\066\010\075\011\u0136\012\103\020\106\021\074" +
    "\022\055\036\070\037\071\041\102\042\107\070\u04f6\074" +
    "\012\075\017\076\010\077\021\100\014\101\023\102\101" +
    "\001\002\000\032\002\uffdd\003\uffdd\013\uffdd\025\uffdd\033" +
    "\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd" +
    "\102\uffdd\001\002\000\056\003\064\004\051\006\060\007" +
    "\066\010\075\011\u0136\012\103\020\106\021\074\022\055" +
    "\036\070\037\071\041\102\042\107\070\u04f8\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\101\001\002" +
    "\000\032\002\uffe8\003\uffe8\013\uffe8\025\uffe8\033\uffe8\074" +
    "\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8" +
    "\001\002\000\056\003\064\004\051\006\060\007\066\010" +
    "\075\011\u0136\012\103\020\106\021\074\022\055\036\070" +
    "\037\071\041\102\042\107\070\u04fa\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\101\001\002\000\032" +
    "\002\uffe1\003\uffe1\013\uffe1\025\uffe1\033\uffe1\074\uffe1\075" +
    "\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\001\002" +
    "\000\024\022\040\066\u04fc\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\104\045\001\002\000\004\067\u04fd" +
    "\001\002\000\054\003\064\004\051\006\060\007\066\010" +
    "\075\011\065\012\103\020\106\021\074\022\055\036\070" +
    "\037\071\041\102\042\107\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\102\101\001\002\000\056\003\064" +
    "\004\051\006\060\007\066\010\075\011\u0136\012\103\020" +
    "\106\021\074\022\055\036\070\037\071\041\102\042\107" +
    "\070\u04ff\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\101\001\002\000\032\002\uffe4\003\uffe4\013\uffe4" +
    "\025\uffe4\033\uffe4\074\uffe4\075\uffe4\076\uffe4\077\uffe4\100" +
    "\uffe4\101\uffe4\102\uffe4\001\002\000\024\022\040\066\u0501" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\104" +
    "\045\001\002\000\004\067\u0502\001\002\000\054\003\064" +
    "\004\051\006\060\007\066\010\075\011\065\012\103\020" +
    "\106\021\074\022\055\036\070\037\071\041\102\042\107" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\101\001\002\000\056\003\064\004\051\006\060\007\066" +
    "\010\075\011\u0136\012\103\020\106\021\074\022\055\036" +
    "\070\037\071\041\102\042\107\070\u0504\074\012\075\017" +
    "\076\010\077\021\100\014\101\023\102\101\001\002\000" +
    "\032\002\uffe3\003\uffe3\013\uffe3\025\uffe3\033\uffe3\074\uffe3" +
    "\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\001" +
    "\002\000\030\003\020\013\015\025\016\033\027\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\102\033\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\000\001\002" +
    "\000\026\002\uffee\013\015\025\016\074\012\075\017\076" +
    "\010\077\021\100\014\101\023\102\033\001\002\000\004" +
    "\002\uffec\001\002\000\024\013\015\025\016\074\012\075" +
    "\017\076\010\077\021\100\014\101\023\102\033\001\002" +
    "\000\024\002\ufffa\013\015\074\012\075\017\076\010\077" +
    "\021\100\014\101\023\102\033\001\002\000\024\002\ufff6" +
    "\013\015\074\012\075\017\076\010\077\021\100\014\101" +
    "\023\102\033\001\002\000\024\002\ufff5\013\015\074\012" +
    "\075\017\076\010\077\021\100\014\101\023\102\033\001" +
    "\002\000\024\002\ufff4\013\015\074\012\075\017\076\010" +
    "\077\021\100\014\101\023\102\033\001\002\000\004\002" +
    "\001\001\002\000\030\003\020\013\015\025\016\033\027" +
    "\074\012\075\017\076\010\077\021\100\014\101\023\102" +
    "\033\001\002\000\004\002\ufffd\001\002\000\004\002\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0510\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\025\005\010" +
    "\006\030\007\027\010\021\013\024\001\001\000\002\001" +
    "\001\000\012\006\035\007\u0507\010\u0508\013\024\001\001" +
    "\000\002\001\001\000\016\003\u0505\005\010\006\030\007" +
    "\027\010\021\013\024\001\001\000\002\001\001\000\004" +
    "\013\u04d1\001\001\000\044\004\137\011\u04c9\013\066\023" +
    "\140\024\144\026\130\030\141\031\136\033\132\035\133" +
    "\041\145\044\125\045\124\046\123\054\134\055\127\066" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\u04c5\006\030\007\u04c6\013\024\001" +
    "\001\000\002\001\001\000\016\003\u04c4\005\010\006\030" +
    "\007\027\010\021\013\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\004\u03cc\012\u03cf\013\066\015\u03d0" +
    "\016\u03d7\020\u03d1\022\u03d2\033\u03d3\034\u03ca\037\u03d8\001" +
    "\001\000\012\005\031\006\030\010\033\013\024\001\001" +
    "\000\002\001\001\000\010\006\035\010\u03c7\013\024\001" +
    "\001\000\002\001\001\000\010\005\034\006\030\013\024" +
    "\001\001\000\006\006\035\013\024\001\001\000\002\001" +
    "\001\000\010\013\040\014\043\065\041\001\001\000\004" +
    "\013\u0390\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\040\065\045\001\001\000\006" +
    "\013\040\065\u0389\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\072\013\066\023\075\024\103\026\056" +
    "\030\076\031\071\033\060\035\061\041\104\044\053\045" +
    "\052\046\051\054\062\055\055\056\077\001\001\000\010" +
    "\036\u0365\040\u0197\053\u01a2\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u0310\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\036\u02e2\040" +
    "\u0197\053\u01a2\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\137\011\u02d6\013\066\023\140\024\144\026\130" +
    "\030\141\031\136\033\132\035\133\041\145\044\125\045" +
    "\124\046\123\054\134\055\127\066\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\036\u0295\040\u0197\053" +
    "\u01a2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\u0137\013\066\023\u0138\024\u013a\026\u0130" +
    "\030\u0139\031\u0136\033\u0132\035\u0133\041\u013b\044\u012d\045" +
    "\u012c\046\u012b\054\u0134\055\u012f\001\001\000\002\001\001" +
    "\000\004\040\u0171\001\001\000\004\013\u016a\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u0160\001\001" +
    "\000\002\001\001\000\012\013\040\014\357\024\360\065" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\121\032\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\304\001\001\000\002" +
    "\001\001\000\004\027\240\001\001\000\044\004\137\011" +
    "\142\013\066\023\140\024\144\026\130\030\141\031\136" +
    "\033\132\035\133\041\145\044\125\045\124\046\123\054" +
    "\134\055\127\066\131\001\001\000\044\004\137\011\233" +
    "\013\066\023\140\024\144\026\130\030\141\031\136\033" +
    "\132\035\133\041\145\044\125\045\124\046\123\054\134" +
    "\055\127\066\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\223\013\066\023\224\024\226\026\214" +
    "\030\225\031\222\033\215\035\217\041\227\044\212\045" +
    "\211\046\210\054\220\055\213\066\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\051" +
    "\203\067\202\001\001\000\014\051\150\055\153\062\154" +
    "\063\152\064\155\001\001\000\002\001\001\000\012\051" +
    "\150\062\200\063\152\064\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\051\150\064\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\051\150\063\177\064\155\001" +
    "\001\000\010\051\150\063\172\064\155\001\001\000\002" +
    "\001\001\000\006\051\150\064\176\001\001\000\006\051" +
    "\150\064\175\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\137\011\231\013\066\023\140\024\144\026\130\030" +
    "\141\031\136\033\132\035\133\041\145\044\125\045\124" +
    "\046\123\054\134\055\127\066\131\001\001\000\042\004" +
    "\223\013\066\023\224\024\226\026\214\030\225\031\222" +
    "\033\215\035\217\041\227\044\212\045\211\046\210\054" +
    "\220\055\213\066\216\001\001\000\002\001\001\000\042" +
    "\004\223\013\066\023\224\024\226\026\214\030\225\031" +
    "\222\033\215\035\217\041\227\044\212\045\211\046\210" +
    "\054\220\055\213\066\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\257\001\001\000\002\001\001" +
    "\000\044\004\137\011\243\013\066\023\140\024\144\026" +
    "\130\030\141\031\136\033\132\035\133\041\145\044\125" +
    "\045\124\046\123\054\134\055\127\066\131\001\001\000" +
    "\044\004\137\011\250\013\066\023\140\024\144\026\130" +
    "\030\141\031\136\033\132\035\133\041\145\044\125\045" +
    "\124\046\123\054\134\055\127\066\131\001\001\000\002" +
    "\001\001\000\042\004\223\013\066\023\224\024\226\026" +
    "\214\030\225\031\222\033\215\035\217\041\227\044\212" +
    "\045\211\046\210\054\220\055\213\066\216\001\001\000" +
    "\002\001\001\000\044\004\137\011\246\013\066\023\140" +
    "\024\144\026\130\030\141\031\136\033\132\035\133\041" +
    "\145\044\125\045\124\046\123\054\134\055\127\066\131" +
    "\001\001\000\042\004\223\013\066\023\224\024\226\026" +
    "\214\030\225\031\222\033\215\035\217\041\227\044\212" +
    "\045\211\046\210\054\220\055\213\066\216\001\001\000" +
    "\002\001\001\000\042\004\223\013\066\023\224\024\226" +
    "\026\214\030\225\031\222\033\215\035\217\041\227\044" +
    "\212\045\211\046\210\054\220\055\213\066\216\001\001" +
    "\000\002\001\001\000\044\004\137\011\253\013\066\023" +
    "\140\024\144\026\130\030\141\031\136\033\132\035\133" +
    "\041\145\044\125\045\124\046\123\054\134\055\127\066" +
    "\131\001\001\000\042\004\223\013\066\023\224\024\226" +
    "\026\214\030\225\031\222\033\215\035\217\041\227\044" +
    "\212\045\211\046\210\054\220\055\213\066\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\137\011\262\013\066\023\140\024\144\026\130" +
    "\030\141\031\136\033\132\035\133\041\145\044\125\045" +
    "\124\046\123\054\134\055\127\066\131\001\001\000\044" +
    "\004\137\011\275\013\066\023\140\024\144\026\130\030" +
    "\141\031\136\033\132\035\133\041\145\044\125\045\124" +
    "\046\123\054\134\055\127\066\131\001\001\000\044\004" +
    "\137\011\266\013\066\023\140\024\144\026\130\030\141" +
    "\031\136\033\132\035\133\041\145\044\125\045\124\046" +
    "\123\054\134\055\127\066\131\001\001\000\042\004\223" +
    "\013\066\023\224\024\226\026\214\030\225\031\222\033" +
    "\215\035\217\041\227\044\212\045\211\046\210\054\220" +
    "\055\213\066\216\001\001\000\002\001\001\000\044\004" +
    "\137\011\273\013\066\023\140\024\144\026\130\030\141" +
    "\031\136\033\132\035\133\041\145\044\125\045\124\046" +
    "\123\054\134\055\127\066\131\001\001\000\044\004\137" +
    "\011\270\013\066\023\140\024\144\026\130\030\141\031" +
    "\136\033\132\035\133\041\145\044\125\045\124\046\123" +
    "\054\134\055\127\066\131\001\001\000\042\004\223\013" +
    "\066\023\224\024\226\026\214\030\225\031\222\033\215" +
    "\035\217\041\227\044\212\045\211\046\210\054\220\055" +
    "\213\066\216\001\001\000\002\001\001\000\042\004\223" +
    "\013\066\023\224\024\226\026\214\030\225\031\222\033" +
    "\215\035\217\041\227\044\212\045\211\046\210\054\220" +
    "\055\213\066\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\223\013\066\023\224\024\226\026\214" +
    "\030\225\031\222\033\215\035\217\041\227\044\212\045" +
    "\211\046\210\054\220\055\213\066\216\001\001\000\002" +
    "\001\001\000\042\004\223\013\066\023\224\024\226\026" +
    "\214\030\225\031\222\033\215\035\217\041\227\044\212" +
    "\045\211\046\210\054\220\055\213\066\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\137\011\301" +
    "\013\066\023\140\024\144\026\130\030\141\031\136\033" +
    "\132\035\133\041\145\044\125\045\124\046\123\054\134" +
    "\055\127\066\131\001\001\000\042\004\223\013\066\023" +
    "\224\024\226\026\214\030\225\031\222\033\215\035\217" +
    "\041\227\044\212\045\211\046\210\054\220\055\213\066" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\137\011\307\013\066\023\140\024\144\026\130\030" +
    "\141\031\136\033\132\035\133\041\145\044\125\045\124" +
    "\046\123\054\134\055\127\066\131\001\001\000\044\004" +
    "\137\011\321\013\066\023\140\024\144\026\130\030\141" +
    "\031\136\033\132\035\133\041\145\044\125\045\124\046" +
    "\123\054\134\055\127\066\131\001\001\000\044\004\137" +
    "\011\313\013\066\023\140\024\144\026\130\030\141\031" +
    "\136\033\132\035\133\041\145\044\125\045\124\046\123" +
    "\054\134\055\127\066\131\001\001\000\042\004\223\013" +
    "\066\023\224\024\226\026\214\030\225\031\222\033\215" +
    "\035\217\041\227\044\212\045\211\046\210\054\220\055" +
    "\213\066\216\001\001\000\002\001\001\000\044\004\137" +
    "\011\317\013\066\023\140\024\144\026\130\030\141\031" +
    "\136\033\132\035\133\041\145\044\125\045\124\046\123" +
    "\054\134\055\127\066\131\001\001\000\044\004\137\011" +
    "\315\013\066\023\140\024\144\026\130\030\141\031\136" +
    "\033\132\035\133\041\145\044\125\045\124\046\123\054" +
    "\134\055\127\066\131\001\001\000\042\004\223\013\066" +
    "\023\224\024\226\026\214\030\225\031\222\033\215\035" +
    "\217\041\227\044\212\045\211\046\210\054\220\055\213" +
    "\066\216\001\001\000\002\001\001\000\042\004\223\013" +
    "\066\023\224\024\226\026\214\030\225\031\222\033\215" +
    "\035\217\041\227\044\212\045\211\046\210\054\220\055" +
    "\213\066\216\001\001\000\002\001\001\000\042\004\223" +
    "\013\066\023\224\024\226\026\214\030\225\031\222\033" +
    "\215\035\217\041\227\044\212\045\211\046\210\054\220" +
    "\055\213\066\216\001\001\000\002\001\001\000\042\004" +
    "\223\013\066\023\224\024\226\026\214\030\225\031\222" +
    "\033\215\035\217\041\227\044\212\045\211\046\210\054" +
    "\220\055\213\066\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\137\011\325\013\066\023\140\024" +
    "\144\026\130\030\141\031\136\033\132\035\133\041\145" +
    "\044\125\045\124\046\123\054\134\055\127\066\131\001" +
    "\001\000\042\004\223\013\066\023\224\024\226\026\214" +
    "\030\225\031\222\033\215\035\217\041\227\044\212\045" +
    "\211\046\210\054\220\055\213\066\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\121\032\343" +
    "\001\001\000\004\027\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\004\137\011\347\013\066\023\140" +
    "\024\144\026\130\030\141\031\136\033\132\035\133\041" +
    "\145\044\125\045\124\046\123\054\134\055\127\066\131" +
    "\001\001\000\042\004\223\013\066\023\224\024\226\026" +
    "\214\030\225\031\222\033\215\035\217\041\227\044\212" +
    "\045\211\046\210\054\220\055\213\066\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\040\065\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\121\032\363\001\001\000" +
    "\004\027\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\137\011\367\013\066\023\140\024\144\026" +
    "\130\030\141\031\136\033\132\035\133\041\145\044\125" +
    "\045\124\046\123\054\134\055\127\066\131\001\001\000" +
    "\042\004\223\013\066\023\224\024\226\026\214\030\225" +
    "\031\222\033\215\035\217\041\227\044\212\045\211\046" +
    "\210\054\220\055\213\066\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\121\032\373\001\001\000" +
    "\004\027\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\137\011\377\013\066\023\140\024\144\026" +
    "\130\030\141\031\136\033\132\035\133\041\145\044\125" +
    "\045\124\046\123\054\134\055\127\066\131\001\001\000" +
    "\042\004\223\013\066\023\224\024\226\026\214\030\225" +
    "\031\222\033\215\035\217\041\227\044\212\045\211\046" +
    "\210\054\220\055\213\066\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\121\032\u0103\001\001\000" +
    "\004\027\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\137\011\u0107\013\066\023\140\024\144\026" +
    "\130\030\141\031\136\033\132\035\133\041\145\044\125" +
    "\045\124\046\123\054\134\055\127\066\131\001\001\000" +
    "\042\004\223\013\066\023\224\024\226\026\214\030\225" +
    "\031\222\033\215\035\217\041\227\044\212\045\211\046" +
    "\210\054\220\055\213\066\216\001\001\000\002\001\001" +
    "\000\006\027\121\032\u010a\001\001\000\004\027\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\137" +
    "\011\u010e\013\066\023\140\024\144\026\130\030\141\031" +
    "\136\033\132\035\133\041\145\044\125\045\124\046\123" +
    "\054\134\055\127\066\131\001\001\000\042\004\223\013" +
    "\066\023\224\024\226\026\214\030\225\031\222\033\215" +
    "\035\217\041\227\044\212\045\211\046\210\054\220\055" +
    "\213\066\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\121\032\u0112\001\001\000\004\027\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\137" +
    "\011\u0116\013\066\023\140\024\144\026\130\030\141\031" +
    "\136\033\132\035\133\041\145\044\125\045\124\046\123" +
    "\054\134\055\127\066\131\001\001\000\042\004\223\013" +
    "\066\023\224\024\226\026\214\030\225\031\222\033\215" +
    "\035\217\041\227\044\212\045\211\046\210\054\220\055" +
    "\213\066\216\001\001\000\002\001\001\000\006\027\121" +
    "\032\u0121\001\001\000\006\027\121\032\u011a\001\001\000" +
    "\004\027\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\004\137\011\u011e\013\066\023\140\024\144\026" +
    "\130\030\141\031\136\033\132\035\133\041\145\044\125" +
    "\045\124\046\123\054\134\055\127\066\131\001\001\000" +
    "\042\004\223\013\066\023\224\024\226\026\214\030\225" +
    "\031\222\033\215\035\217\041\227\044\212\045\211\046" +
    "\210\054\220\055\213\066\216\001\001\000\002\001\001" +
    "\000\046\004\072\013\066\023\075\024\103\026\056\027" +
    "\121\030\076\031\071\032\u0129\033\060\035\061\041\104" +
    "\044\053\045\052\046\051\054\062\055\055\056\u012a\001" +
    "\001\000\004\027\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\137\011\u0125\013\066\023\140\024" +
    "\144\026\130\030\141\031\136\033\132\035\133\041\145" +
    "\044\125\045\124\046\123\054\134\055\127\066\131\001" +
    "\001\000\042\004\223\013\066\023\224\024\226\026\214" +
    "\030\225\031\222\033\215\035\217\041\227\044\212\045" +
    "\211\046\210\054\220\055\213\066\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\240\001\001\000\040\004\u0137\013\066\023\u0138\024\u013a" +
    "\026\u0130\030\u0139\031\u0136\033\u0132\035\u0133\041\u013b\044" +
    "\u012d\045\u012c\046\u012b\054\u0134\055\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\137\011\u013d\013\066\023\140\024\144" +
    "\026\130\030\141\031\136\033\132\035\133\041\145\044" +
    "\125\045\124\046\123\054\134\055\127\066\131\001\001" +
    "\000\042\004\223\013\066\023\224\024\226\026\214\030" +
    "\225\031\222\033\215\035\217\041\227\044\212\045\211" +
    "\046\210\054\220\055\213\066\216\001\001\000\002\001" +
    "\001\000\044\004\137\011\u0148\013\066\023\140\024\144" +
    "\026\130\030\141\031\136\033\132\035\133\041\145\044" +
    "\125\045\124\046\123\054\134\055\127\066\131\001\001" +
    "\000\044\004\137\011\u0143\013\066\023\140\024\144\026" +
    "\130\030\141\031\136\033\132\035\133\041\145\044\125" +
    "\045\124\046\123\054\134\055\127\066\131\001\001\000" +
    "\002\001\001\000\044\004\137\011\u0146\013\066\023\140" +
    "\024\144\026\130\030\141\031\136\033\132\035\133\041" +
    "\145\044\125\045\124\046\123\054\134\055\127\066\131" +
    "\001\001\000\042\004\223\013\066\023\224\024\226\026" +
    "\214\030\225\031\222\033\215\035\217\041\227\044\212" +
    "\045\211\046\210\054\220\055\213\066\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\004\223\013\066" +
    "\023\224\024\226\026\214\030\225\031\222\033\215\035" +
    "\217\041\227\044\212\045\211\046\210\054\220\055\213" +
    "\066\216\001\001\000\002\001\001\000\042\004\223\013" +
    "\066\023\224\024\226\026\214\030\225\031\222\033\215" +
    "\035\217\041\227\044\212\045\211\046\210\054\220\055" +
    "\213\066\216\001\001\000\002\001\001\000\044\004\137" +
    "\011\u014b\013\066\023\140\024\144\026\130\030\141\031" +
    "\136\033\132\035\133\041\145\044\125\045\124\046\123" +
    "\054\134\055\127\066\131\001\001\000\042\004\223\013" +
    "\066\023\224\024\226\026\214\030\225\031\222\033\215" +
    "\035\217\041\227\044\212\045\211\046\210\054\220\055" +
    "\213\066\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\121\032\u014f\001\001\000\004\027\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\137" +
    "\011\u0153\013\066\023\140\024\144\026\130\030\141\031" +
    "\136\033\132\035\133\041\145\044\125\045\124\046\123" +
    "\054\134\055\127\066\131\001\001\000\042\004\223\013" +
    "\066\023\224\024\226\026\214\030\225\031\222\033\215" +
    "\035\217\041\227\044\212\045\211\046\210\054\220\055" +
    "\213\066\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\121\032\u0157\001\001\000\004\027\240\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\137" +
    "\011\u015b\013\066\023\140\024\144\026\130\030\141\031" +
    "\136\033\132\035\133\041\145\044\125\045\124\046\123" +
    "\054\134\055\127\066\131\001\001\000\042\004\223\013" +
    "\066\023\224\024\226\026\214\030\225\031\222\033\215" +
    "\035\217\041\227\044\212\045\211\046\210\054\220\055" +
    "\213\066\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u0165\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u0181\001\001\000\006\024\u0176\040\u0175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\u01e0\001\001\000\004\052\u018a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u0194\001\001\000\002\001\001" +
    "\000\010\036\u01a6\040\u0197\053\u01a2\001\001\000\010\036" +
    "\u01dc\040\u0197\053\u01a2\001\001\000\006\040\u01d8\053\u01d7" +
    "\001\001\000\010\036\u01d6\040\u0197\053\u01a2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\u01d3\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\036\u01d2\040\u0197\053\u01a2\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u01d0\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\u01aa\001" +
    "\001\000\004\040\u01ae\001\001\000\004\053\u01ac\001\001" +
    "\000\010\036\u01ad\040\u0197\053\u01a2\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\057\u01b2\060\u01b0\061\u01b1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\u01be\057\u01ba\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u01c4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u01c7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u01ca\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\137\011\u01ce\013\066\023\140\024\144\026\130\030" +
    "\141\031\136\033\132\035\133\041\145\044\125\045\124" +
    "\046\123\054\134\055\127\066\131\001\001\000\042\004" +
    "\223\013\066\023\224\024\226\026\214\030\225\031\222" +
    "\033\215\035\217\041\227\044\212\045\211\046\210\054" +
    "\220\055\213\066\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\u01d5\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\u01da\053\u01d9\001\001\000\002\001" +
    "\001\000\004\040\u01db\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\u0217\001\001\000\010\036\u01ff\040\u0197\053\u01a2\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\u01e3\001" +
    "\001\000\002\001\001\000\010\036\u01e5\040\u0197\053\u01a2" +
    "\001\001\000\002\001\001\000\010\057\u01b2\060\u01e7\061" +
    "\u01b1\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\137\011\u01ea\013\066\023\140\024\144\026\130\030" +
    "\141\031\136\033\132\035\133\041\145\044\125\045\124" +
    "\046\123\054\134\055\127\066\131\001\001\000\042\004" +
    "\223\013\066\023\224\024\226\026\214\030\225\031\222" +
    "\033\215\035\217\041\227\044\212\045\211\046\210\054" +
    "\220\055\213\066\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u01ef\001\001\000\010\036\u01f7\040" +
    "\u0197\053\u01a2\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\057\u01b2\060\u01f2\061\u01b1\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\137\011\u01f5\013\066" +
    "\023\140\024\144\026\130\030\141\031\136\033\132\035" +
    "\133\041\145\044\125\045\124\046\123\054\134\055\127" +
    "\066\131\001\001\000\042\004\223\013\066\023\224\024" +
    "\226\026\214\030\225\031\222\033\215\035\217\041\227" +
    "\044\212\045\211\046\210\054\220\055\213\066\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\057\u01b2" +
    "\060\u01f9\061\u01b1\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\137\011\u01fc\013\066\023\140\024\144" +
    "\026\130\030\141\031\136\033\132\035\133\041\145\044" +
    "\125\045\124\046\123\054\134\055\127\066\131\001\001" +
    "\000\042\004\223\013\066\023\224\024\226\026\214\030" +
    "\225\031\222\033\215\035\217\041\227\044\212\045\211" +
    "\046\210\054\220\055\213\066\216\001\001\000\002\001" +
    "\001\000\010\057\u01b2\060\u0212\061\u01b1\001\001\000\002" +
    "\001\001\000\010\057\u01b2\060\u0201\061\u01b1\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\137\011\u0204" +
    "\013\066\023\140\024\144\026\130\030\141\031\136\033" +
    "\132\035\133\041\145\044\125\045\124\046\123\054\134" +
    "\055\127\066\131\001\001\000\042\004\223\013\066\023" +
    "\224\024\226\026\214\030\225\031\222\033\215\035\217" +
    "\041\227\044\212\045\211\046\210\054\220\055\213\066" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\137\011\u020c\013\066\023\140\024\144\026\130\030" +
    "\141\031\136\033\132\035\133\041\145\044\125\045\124" +
    "\046\123\054\134\055\127\066\131\001\001\000\044\004" +
    "\137\011\u0209\013\066\023\140\024\144\026\130\030\141" +
    "\031\136\033\132\035\133\041\145\044\125\045\124\046" +
    "\123\054\134\055\127\066\131\001\001\000\042\004\223" +
    "\013\066\023\224\024\226\026\214\030\225\031\222\033" +
    "\215\035\217\041\227\044\212\045\211\046\210\054\220" +
    "\055\213\066\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\004\223\013\066\023\224\024\226\026\214" +
    "\030\225\031\222\033\215\035\217\041\227\044\212\045" +
    "\211\046\210\054\220\055\213\066\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\137\011\u0210\013" +
    "\066\023\140\024\144\026\130\030\141\031\136\033\132" +
    "\035\133\041\145\044\125\045\124\046\123\054\134\055" +
    "\127\066\131\001\001\000\042\004\223\013\066\023\224" +
    "\024\226\026\214\030\225\031\222\033\215\035\217\041" +
    "\227\044\212\045\211\046\210\054\220\055\213\066\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\137\011\u0215\013\066\023\140\024\144" +
    "\026\130\030\141\031\136\033\132\035\133\041\145\044" +
    "\125\045\124\046\123\054\134\055\127\066\131\001\001" +
    "\000\042\004\223\013\066\023\224\024\226\026\214\030" +
    "\225\031\222\033\215\035\217\041\227\044\212\045\211" +
    "\046\210\054\220\055\213\066\216\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\u0248\001\001\000\004" +
    "\040\u021b\001\001\000\004\040\u0225\001\001\000\002\001" +
    "\001\000\010\036\u021d\040\u0197\053\u01a2\001\001\000\002" +
    "\001\001\000\010\057\u01b2\060\u021f\061\u01b1\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\137\011\u0222" +
    "\013\066\023\140\024\144\026\130\030\141\031\136\033" +
    "\132\035\133\041\145\044\125\045\124\046\123\054\134" +
    "\055\127\066\131\001\001\000\042\004\223\013\066\023" +
    "\224\024\226\026\214\030\225\031\222\033\215\035\217" +
    "\041\227\044\212\045\211\046\210\054\220\055\213\066" +
    "\216\001\001\000\002\001\001\000\010\036\u0241\040\u0197" +
    "\053\u01a2\001\001\000\010\036\u0227\040\u0197\053\u01a2\001" +
    "\001\000\010\036\u022e\040\u0197\053\u01a2\001\001\000\002" +
    "\001\001\000\010\057\u01b2\060\u0229\061\u01b1\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\137\011\u022c" +
    "\013\066\023\140\024\144\026\130\030\141\031\136\033" +
    "\132\035\133\041\145\044\125\045\124\046\123\054\134" +
    "\055\127\066\131\001\001\000\042\004\223\013\066\023" +
    "\224\024\226\026\214\030\225\031\222\033\215\035\217" +
    "\041\227\044\212\045\211\046\210\054\220\055\213\066" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\057\u01b2\060\u0230\061\u01b1\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\004\137\011\u0233\013\066\023\140" +
    "\024\144\026\130\030\141\031\136\033\132\035\133\041" +
    "\145\044\125\045\124\046\123\054\134\055\127\066\131" +
    "\001\001\000\042\004\223\013\066\023\224\024\226\026" +
    "\214\030\225\031\222\033\215\035\217\041\227\044\212" +
    "\045\211\046\210\054\220\055\213\066\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\137\011\u023b" +
    "\013\066\023\140\024\144\026\130\030\141\031\136\033" +
    "\132\035\133\041\145\044\125\045\124\046\123\054\134" +
    "\055\127\066\131\001\001\000\044\004\137\011\u0238\013" +
    "\066\023\140\024\144\026\130\030\141\031\136\033\132" +
    "\035\133\041\145\044\125\045\124\046\123\054\134\055" +
    "\127\066\131\001\001\000\042\004\223\013\066\023\224" +
    "\024\226\026\214\030\225\031\222\033\215\035\217\041" +
    "\227\044\212\045\211\046\210\054\220\055\213\066\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\223\013\066\023\224\024\226\026\214\030\225\031\222" +
    "\033\215\035\217\041\227\044\212\045\211\046\210\054" +
    "\220\055\213\066\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\137\011\u023f\013\066\023\140\024" +
    "\144\026\130\030\141\031\136\033\132\035\133\041\145" +
    "\044\125\045\124\046\123\054\134\055\127\066\131\001" +
    "\001\000\042\004\223\013\066\023\224\024\226\026\214" +
    "\030\225\031\222\033\215\035\217\041\227\044\212\045" +
    "\211\046\210\054\220\055\213\066\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\057\u01b2\060\u0243\061" +
    "\u01b1\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\137\011\u0246\013\066\023\140\024\144\026\130\030" +
    "\141\031\136\033\132\035\133\041\145\044\125\045\124" +
    "\046\123\054\134\055\127\066\131\001\001\000\042\004" +
    "\223\013\066\023\224\024\226\026\214\030\225\031\222" +
    "\033\215\035\217\041\227\044\212\045\211\046\210\054" +
    "\220\055\213\066\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\036\u024a\040\u0197\053\u01a2\001\001\000" +
    "\002\001\001\000\010\057\u01b2\060\u024c\061\u01b1\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\004\137\011" +
    "\u024f\013\066\023\140\024\144\026\130\030\141\031\136" +
    "\033\132\035\133\041\145\044\125\045\124\046\123\054" +
    "\134\055\127\066\131\001\001\000\042\004\223\013\066" +
    "\023\224\024\226\026\214\030\225\031\222\033\215\035" +
    "\217\041\227\044\212\045\211\046\210\054\220\055\213" +
    "\066\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u0255\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\u0258\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\u0280\001\001\000\004\040\u0263\001\001\000\002\001" +
    "\001\000\004\040\u0267\001\001\000\002\001\001\000\004" +
    "\040\u0275\001\001\000\004\040\u026b\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\u026f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u027b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u0283\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\036" +
    "\u0298\040\u0197\053\u01a2\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\u02d3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\004\137\011\u02de\013\066" +
    "\023\140\024\144\026\130\030\141\031\136\033\132\035" +
    "\133\041\145\044\125\045\124\046\123\054\134\055\127" +
    "\066\131\001\001\000\042\004\223\013\066\023\224\024" +
    "\226\026\214\030\225\031\222\033\215\035\217\041\227" +
    "\044\212\045\211\046\210\054\220\055\213\066\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\036\u02da" +
    "\040\u0197\053\u01a2\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\004\223" +
    "\013\066\023\224\024\226\026\214\030\225\031\222\033" +
    "\215\035\217\041\227\044\212\045\211\046\210\054\220" +
    "\055\213\066\216\001\001\000\002\001\001\000\010\036" +
    "\u02e2\040\u0197\053\u01a2\001\001\000\010\036\u02e8\040\u0197" +
    "\053\u01a2\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\137\011\u02e5\013\066\023\140\024\144\026\130" +
    "\030\141\031\136\033\132\035\133\041\145\044\125\045" +
    "\124\046\123\054\134\055\127\066\131\001\001\000\042" +
    "\004\223\013\066\023\224\024\226\026\214\030\225\031" +
    "\222\033\215\035\217\041\227\044\212\045\211\046\210" +
    "\054\220\055\213\066\216\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\004\137\011\u02ee" +
    "\013\066\023\140\024\144\026\130\030\141\031\136\033" +
    "\132\035\133\041\145\044\125\045\124\046\123\054\134" +
    "\055\127\066\131\001\001\000\044\004\137\011\u02eb\013" +
    "\066\023\140\024\144\026\130\030\141\031\136\033\132" +
    "\035\133\041\145\044\125\045\124\046\123\054\134\055" +
    "\127\066\131\001\001\000\042\004\223\013\066\023\224" +
    "\024\226\026\214\030\225\031\222\033\215\035\217\041" +
    "\227\044\212\045\211\046\210\054\220\055\213\066\216" +
    "\001\001\000\002\001\001\000\044\004\137\011\u02f1\013" +
    "\066\023\140\024\144\026\130\030\141\031\136\033\132" +
    "\035\133\041\145\044\125\045\124\046\123\054\134\055" +
    "\127\066\131\001\001\000\042\004\223\013\066\023\224" +
    "\024\226\026\214\030\225\031\222\033\215\035\217\041" +
    "\227\044\212\045\211\046\210\054\220\055\213\066\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\004" +
    "\223\013\066\023\224\024\226\026\214\030\225\031\222" +
    "\033\215\035\217\041\227\044\212\045\211\046\210\054" +
    "\220\055\213\066\216\001\001\000\002\001\001\000\044" +
    "\004\137\011\u02f4\013\066\023\140\024\144\026\130\030" +
    "\141\031\136\033\132\035\133\041\145\044\125\045\124" +
    "\046\123\054\134\055\127\066\131\001\001\000\042\004" +
    "\223\013\066\023\224\024\226\026\214\030\225\031\222" +
    "\033\215\035\217\041\227\044\212\045\211\046\210\054" +
    "\220\055\213\066\216\001\001\000\002\001\001\000\010" +
    "\036\u0302\040\u0197\053\u01a2\001\001\000\010\036\u02f9\040" +
    "\u0197\053\u01a2\001\001\000\010\036\u02fd\040\u0197\053\u01a2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\036\u0307\040\u0197\053\u01a2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\036\u030c\040\u0197\053\u01a2\001\001\000" +
    "\002\001\001\000\044\004\137\011\u02ee\013\066\023\140" +
    "\024\144\026\130\030\141\031\136\033\132\035\133\041" +
    "\145\044\125\045\124\046\123\054\134\055\127\066\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\u0324\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\040\014\u0337\065\041\001\001\000\006\013\040\065\045" +
    "\001\001\000\002\001\001\000\042\004\072\013\066\023" +
    "\075\024\103\026\056\030\076\031\071\033\060\035\061" +
    "\041\104\044\053\045\052\046\051\054\062\055\055\056" +
    "\u033a\001\001\000\040\004\u0137\013\066\023\u0138\024\u013a" +
    "\026\u0130\030\u0139\031\u0136\033\u0132\035\u0133\041\u013b\044" +
    "\u012d\045\u012c\046\u012b\054\u0134\055\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\040\014\u033e\065" +
    "\041\001\001\000\006\013\040\065\045\001\001\000\002" +
    "\001\001\000\042\004\072\013\066\023\075\024\103\026" +
    "\056\030\076\031\071\033\060\035\061\041\104\044\053" +
    "\045\052\046\051\054\062\055\055\056\u0341\001\001\000" +
    "\040\004\u0137\013\066\023\u0138\024\u013a\026\u0130\030\u0139" +
    "\031\u0136\033\u0132\035\u0133\041\u013b\044\u012d\045\u012c\046" +
    "\u012b\054\u0134\055\u012f\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\051\u0346\066\u0348\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u034e\001" +
    "\001\000\004\017\u0352\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u0354\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\u035d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\036\u036e\040\u0197\053\u01a2\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\137\011\u0368\013\066\023" +
    "\140\024\144\026\130\030\141\031\136\033\132\035\133" +
    "\041\145\044\125\045\124\046\123\054\134\055\127\066" +
    "\131\001\001\000\042\004\223\013\066\023\224\024\226" +
    "\026\214\030\225\031\222\033\215\035\217\041\227\044" +
    "\212\045\211\046\210\054\220\055\213\066\216\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\004\137\011" +
    "\u036c\013\066\023\140\024\144\026\130\030\141\031\136" +
    "\033\132\035\133\041\145\044\125\045\124\046\123\054" +
    "\134\055\127\066\131\001\001\000\042\004\223\013\066" +
    "\023\224\024\226\026\214\030\225\031\222\033\215\035" +
    "\217\041\227\044\212\045\211\046\210\054\220\055\213" +
    "\066\216\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\137\011\u0378\013\066\023\140\024\144\026\130" +
    "\030\141\031\136\033\132\035\133\041\145\044\125\045" +
    "\124\046\123\054\134\055\127\066\131\001\001\000\044" +
    "\004\137\011\u0371\013\066\023\140\024\144\026\130\030" +
    "\141\031\136\033\132\035\133\041\145\044\125\045\124" +
    "\046\123\054\134\055\127\066\131\001\001\000\042\004" +
    "\223\013\066\023\224\024\226\026\214\030\225\031\222" +
    "\033\215\035\217\041\227\044\212\045\211\046\210\054" +
    "\220\055\213\066\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\004\137\011\u0375\013\066\023\140\024" +
    "\144\026\130\030\141\031\136\033\132\035\133\041\145" +
    "\044\125\045\124\046\123\054\134\055\127\066\131\001" +
    "\001\000\042\004\223\013\066\023\224\024\226\026\214" +
    "\030\225\031\222\033\215\035\217\041\227\044\212\045" +
    "\211\046\210\054\220\055\213\066\216\001\001\000\002" +
    "\001\001\000\044\004\137\011\u037e\013\066\023\140\024" +
    "\144\026\130\030\141\031\136\033\132\035\133\041\145" +
    "\044\125\045\124\046\123\054\134\055\127\066\131\001" +
    "\001\000\042\004\223\013\066\023\224\024\226\026\214" +
    "\030\225\031\222\033\215\035\217\041\227\044\212\045" +
    "\211\046\210\054\220\055\213\066\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\004\137\011\u037c\013" +
    "\066\023\140\024\144\026\130\030\141\031\136\033\132" +
    "\035\133\041\145\044\125\045\124\046\123\054\134\055" +
    "\127\066\131\001\001\000\042\004\223\013\066\023\224" +
    "\024\226\026\214\030\225\031\222\033\215\035\217\041" +
    "\227\044\212\045\211\046\210\054\220\055\213\066\216" +
    "\001\001\000\002\001\001\000\042\004\223\013\066\023" +
    "\224\024\226\026\214\030\225\031\222\033\215\035\217" +
    "\041\227\044\212\045\211\046\210\054\220\055\213\066" +
    "\216\001\001\000\002\001\001\000\044\004\137\011\u0385" +
    "\013\066\023\140\024\144\026\130\030\141\031\136\033" +
    "\132\035\133\041\145\044\125\045\124\046\123\054\134" +
    "\055\127\066\131\001\001\000\044\004\137\011\u0382\013" +
    "\066\023\140\024\144\026\130\030\141\031\136\033\132" +
    "\035\133\041\145\044\125\045\124\046\123\054\134\055" +
    "\127\066\131\001\001\000\042\004\223\013\066\023\224" +
    "\024\226\026\214\030\225\031\222\033\215\035\217\041" +
    "\227\044\212\045\211\046\210\054\220\055\213\066\216" +
    "\001\001\000\002\001\001\000\044\004\137\011\u0387\013" +
    "\066\023\140\024\144\026\130\030\141\031\136\033\132" +
    "\035\133\041\145\044\125\045\124\046\123\054\134\055" +
    "\127\066\131\001\001\000\042\004\223\013\066\023\224" +
    "\024\226\026\214\030\225\031\222\033\215\035\217\041" +
    "\227\044\212\045\211\046\210\054\220\055\213\066\216" +
    "\001\001\000\002\001\001\000\042\004\223\013\066\023" +
    "\224\024\226\026\214\030\225\031\222\033\215\035\217" +
    "\041\227\044\212\045\211\046\210\054\220\055\213\066" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u038d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\u03a9\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u03a0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\040\014\u03ad\065\041\001\001\000\006\013\040\065\045" +
    "\001\001\000\002\001\001\000\042\004\072\013\066\023" +
    "\075\024\103\026\056\030\076\031\071\033\060\035\061" +
    "\041\104\044\053\045\052\046\051\054\062\055\055\056" +
    "\u03b0\001\001\000\040\004\u0137\013\066\023\u0138\024\u013a" +
    "\026\u0130\030\u0139\031\u0136\033\u0132\035\u0133\041\u013b\044" +
    "\u012d\045\u012c\046\u012b\054\u0134\055\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\040\014\u03b4\065" +
    "\041\001\001\000\006\013\040\065\045\001\001\000\002" +
    "\001\001\000\042\004\072\013\066\023\075\024\103\026" +
    "\056\030\076\031\071\033\060\035\061\041\104\044\053" +
    "\045\052\046\051\054\062\055\055\056\u03b7\001\001\000" +
    "\040\004\u0137\013\066\023\u0138\024\u013a\026\u0130\030\u0139" +
    "\031\u0136\033\u0132\035\u0133\041\u013b\044\u012d\045\u012c\046" +
    "\u012b\054\u0134\055\u012f\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\u03bb\001\001\000\002\001\001\000" +
    "\004\017\u03bd\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\u03c2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\u03c8\006" +
    "\030\013\024\001\001\000\006\006\035\013\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\u03cc\012" +
    "\u04a2\013\066\015\u03d0\016\u03d7\020\u03d1\022\u03d2\033\u03d3" +
    "\034\u03ca\037\u03d8\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\u045c\013\066\015\u045d" +
    "\016\u0461\020\u045e\022\u045f\033\u0460\034\u045a\037\u0462\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\u0451\001\001\000\004\040" +
    "\u03f4\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u0405\001\001\000\002\001\001\000" +
    "\004\040\u03f6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u03fa\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u03fe" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\u0406\001\001\000\004\040" +
    "\u0432\001\001\000\004\040\u0409\001\001\000\002\001\001" +
    "\000\004\040\u040c\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u041e\001\001\000\004\040\u040f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u0413\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u0419\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\u0421\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u0428\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u042b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u043c\001\001" +
    "\000\004\040\u0435\001\001\000\002\001\001\000\004\040" +
    "\u0438\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u043f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\u0445\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u0448\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u044b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u0455\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\u048b\001\001\000\002" +
    "\001\001\000\004\021\u0484\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\u048f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\u0493\040\u0492\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u049f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\u045c\013\066\015" +
    "\u045d\016\u0461\020\u045e\022\u045f\033\u0460\034\u045a\037\u0462" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\u04ab\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u04ad\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\040\014\u04bf\065\041\001\001\000\006\013\040\065\045" +
    "\001\001\000\002\001\001\000\042\004\072\013\066\023" +
    "\075\024\103\026\056\030\076\031\071\033\060\035\061" +
    "\041\104\044\053\045\052\046\051\054\062\055\055\056" +
    "\u04c2\001\001\000\040\004\u0137\013\066\023\u0138\024\u013a" +
    "\026\u0130\030\u0139\031\u0136\033\u0132\035\u0133\041\u013b\044" +
    "\u012d\045\u012c\046\u012b\054\u0134\055\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\035\013\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\004\223\013\066\023\224\024\226\026\214\030" +
    "\225\031\222\033\215\035\217\041\227\044\212\045\211" +
    "\046\210\054\220\055\213\066\216\001\001\000\044\004" +
    "\137\011\u04cb\013\066\023\140\024\144\026\130\030\141" +
    "\031\136\033\132\035\133\041\145\044\125\045\124\046" +
    "\123\054\134\055\127\066\131\001\001\000\042\004\223" +
    "\013\066\023\224\024\226\026\214\030\225\031\222\033" +
    "\215\035\217\041\227\044\212\045\211\046\210\054\220" +
    "\055\213\066\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\040" +
    "\014\u04ff\065\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\040" +
    "\014\u04d7\065\041\001\001\000\002\001\001\000\006\013" +
    "\040\065\045\001\001\000\002\001\001\000\042\004\072" +
    "\013\066\023\075\024\103\026\056\030\076\031\071\033" +
    "\060\035\061\041\104\044\053\045\052\046\051\054\062" +
    "\055\055\056\u04da\001\001\000\040\004\u0137\013\066\023" +
    "\u0138\024\u013a\026\u0130\030\u0139\031\u0136\033\u0132\035\u0133" +
    "\041\u013b\044\u012d\045\u012c\046\u012b\054\u0134\055\u012f\001" +
    "\001\000\002\001\001\000\042\004\072\013\066\023\075" +
    "\024\103\026\056\030\076\031\071\033\060\035\061\041" +
    "\104\044\053\045\052\046\051\054\062\055\055\056\u04dd" +
    "\001\001\000\040\004\u0137\013\066\023\u0138\024\u013a\026" +
    "\u0130\030\u0139\031\u0136\033\u0132\035\u0133\041\u013b\044\u012d" +
    "\045\u012c\046\u012b\054\u0134\055\u012f\001\001\000\002\001" +
    "\001\000\010\013\040\014\u04e0\065\041\001\001\000\006" +
    "\013\040\065\045\001\001\000\002\001\001\000\042\004" +
    "\072\013\066\023\075\024\103\026\056\030\076\031\071" +
    "\033\060\035\061\041\104\044\053\045\052\046\051\054" +
    "\062\055\055\056\u04e3\001\001\000\040\004\u0137\013\066" +
    "\023\u0138\024\u013a\026\u0130\030\u0139\031\u0136\033\u0132\035" +
    "\u0133\041\u013b\044\u012d\045\u012c\046\u012b\054\u0134\055\u012f" +
    "\001\001\000\002\001\001\000\010\013\040\014\u04fa\065" +
    "\041\001\001\000\010\013\040\014\u04e8\065\041\001\001" +
    "\000\010\013\040\014\u04f0\065\041\001\001\000\006\013" +
    "\040\065\045\001\001\000\042\004\072\013\066\023\075" +
    "\024\103\026\056\030\076\031\071\033\060\035\061\041" +
    "\104\044\053\045\052\046\051\054\062\055\055\056\u04ee" +
    "\001\001\000\002\001\001\000\042\004\072\013\066\023" +
    "\075\024\103\026\056\030\076\031\071\033\060\035\061" +
    "\041\104\044\053\045\052\046\051\054\062\055\055\056" +
    "\u04ec\001\001\000\040\004\u0137\013\066\023\u0138\024\u013a" +
    "\026\u0130\030\u0139\031\u0136\033\u0132\035\u0133\041\u013b\044" +
    "\u012d\045\u012c\046\u012b\054\u0134\055\u012f\001\001\000\002" +
    "\001\001\000\040\004\u0137\013\066\023\u0138\024\u013a\026" +
    "\u0130\030\u0139\031\u0136\033\u0132\035\u0133\041\u013b\044\u012d" +
    "\045\u012c\046\u012b\054\u0134\055\u012f\001\001\000\002\001" +
    "\001\000\006\013\040\065\045\001\001\000\042\004\072" +
    "\013\066\023\075\024\103\026\056\030\076\031\071\033" +
    "\060\035\061\041\104\044\053\045\052\046\051\054\062" +
    "\055\055\056\u04f8\001\001\000\042\004\072\013\066\023" +
    "\075\024\103\026\056\030\076\031\071\033\060\035\061" +
    "\041\104\044\053\045\052\046\051\054\062\055\055\056" +
    "\u04f4\001\001\000\042\004\072\013\066\023\075\024\103" +
    "\026\056\030\076\031\071\033\060\035\061\041\104\044" +
    "\053\045\052\046\051\054\062\055\055\056\u04f6\001\001" +
    "\000\040\004\u0137\013\066\023\u0138\024\u013a\026\u0130\030" +
    "\u0139\031\u0136\033\u0132\035\u0133\041\u013b\044\u012d\045\u012c" +
    "\046\u012b\054\u0134\055\u012f\001\001\000\002\001\001\000" +
    "\040\004\u0137\013\066\023\u0138\024\u013a\026\u0130\030\u0139" +
    "\031\u0136\033\u0132\035\u0133\041\u013b\044\u012d\045\u012c\046" +
    "\u012b\054\u0134\055\u012f\001\001\000\002\001\001\000\040" +
    "\004\u0137\013\066\023\u0138\024\u013a\026\u0130\030\u0139\031" +
    "\u0136\033\u0132\035\u0133\041\u013b\044\u012d\045\u012c\046\u012b" +
    "\054\u0134\055\u012f\001\001\000\002\001\001\000\006\013" +
    "\040\065\045\001\001\000\002\001\001\000\042\004\072" +
    "\013\066\023\075\024\103\026\056\030\076\031\071\033" +
    "\060\035\061\041\104\044\053\045\052\046\051\054\062" +
    "\055\055\056\u04fd\001\001\000\040\004\u0137\013\066\023" +
    "\u0138\024\u013a\026\u0130\030\u0139\031\u0136\033\u0132\035\u0133" +
    "\041\u013b\044\u012d\045\u012c\046\u012b\054\u0134\055\u012f\001" +
    "\001\000\002\001\001\000\006\013\040\065\045\001\001" +
    "\000\002\001\001\000\042\004\072\013\066\023\075\024" +
    "\103\026\056\030\076\031\071\033\060\035\061\041\104" +
    "\044\053\045\052\046\051\054\062\055\055\056\u0502\001" +
    "\001\000\040\004\u0137\013\066\023\u0138\024\u013a\026\u0130" +
    "\030\u0139\031\u0136\033\u0132\035\u0133\041\u013b\044\u012d\045" +
    "\u012c\046\u012b\054\u0134\055\u012f\001\001\000\002\001\001" +
    "\000\016\003\u0506\005\010\006\030\007\027\010\021\013" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\u0509\006\030\010\u050a\013\024\001\001\000\002\001" +
    "\001\000\010\006\035\010\u050c\013\024\001\001\000\010" +
    "\005\u050b\006\030\013\024\001\001\000\006\006\035\013" +
    "\024\001\001\000\010\005\u050d\006\030\013\024\001\001" +
    "\000\006\006\035\013\024\001\001\000\002\001\001\000" +
    "\016\003\u0510\005\010\006\030\007\027\010\021\013\024" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    public void syntax_error(Symbol s){
       //pnlSalida.textPane.setText(pnlSalida.textPane.getText()+"Error sintáctico en la línea "+(s.right +1)+": "+ s.value+"\n");
       //System.out.println("Error R de sintaxis: "+ s.value +" en la Linea "+(s.right+1) );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //pnlSalida.textPane.setText(pnlSalida.textPane.getText()+"Error NR de sintaxis: "+ s.value +" en la Linea " +  (s.left+1)+"\n");
        //System.out.println("Error NR de sintaxis: "+ s.value +" en la Linea " + (s.left+1));
    }

    public ArrayList getvar_identificador() { return action_obj.var_identificador; }
    public ArrayList getvar_tipo_dato() { return action_obj.var_tipo_dato; }
    public ArrayList getvar_valor() { return action_obj.var_valor; }
    public ArrayList getvar_err_linea() { return action_obj.err_linea; }
    public ArrayList getvar_err_msj() { return action_obj.err_msj; }
    public ArrayList getvar_err_gramatica() { return action_obj.err_gramatica; }
    public ArrayList getvar_idSemantico() { return action_obj.var_idSem; }
                //Lineas de inicio y fin Config y Startup
    public ArrayList getvar_inicioConfig() { return action_obj.var_inicioConfig; }
    public ArrayList getvar_finConfig() { return action_obj.var_finConfig; }
    public ArrayList getvar_inicioStart() { return action_obj.var_inicioStart; }
    public ArrayList getvar_finStart() { return action_obj.var_finStart; }
                //ArrayList Para llenar la tabla de Simbolos
    public ArrayList getvar_idSimb() { return action_obj.var_idSimb; }
    public ArrayList getvar_rollSimb() { return action_obj.var_rollSimb; }
    public ArrayList getvar_tipoSimb() { return action_obj.var_tipoSimb; }
    public ArrayList getvar_lStartSimb() { return action_obj.var_lStartSimb; }
    public ArrayList getvar_lEndSimb() { return action_obj.var_lEndSimb; }
    public ArrayList getvar_linExp() { return action_obj.var_linExp; }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {

//Codigo de acciones vamos a simular atributos heredados con variables globales
    String heredado="";
    String aux="";
    Stack<Display> display = new Stack<>();
    Display tmp;

    // para la tabla de simbolos
    public ArrayList var_inicioConfig = new ArrayList();
    public ArrayList var_finConfig = new ArrayList();
    public ArrayList var_inicioStart = new ArrayList();
    public ArrayList var_finStart = new ArrayList();
    // para el semantico
    public ArrayList var_idSem = new ArrayList();
    // para la tabla de variables
    public ArrayList var_identificador = new ArrayList();
    public ArrayList var_tipo_dato = new ArrayList();
    public ArrayList var_valor = new ArrayList();
    // para los errores
    public ArrayList err_linea = new ArrayList();
    public ArrayList err_lexema = new ArrayList();
    public ArrayList err_msj = new ArrayList();
    public ArrayList err_gramatica = new ArrayList();
    // Para la tabla de Simbolos
    public ArrayList var_idSimb = new ArrayList();
    public ArrayList var_rollSimb = new ArrayList();
    public ArrayList var_tipoSimb = new ArrayList();
    public ArrayList var_lStartSimb = new ArrayList();
    public ArrayList var_lEndSimb = new ArrayList();
    public ArrayList var_linExp = new ArrayList();

    public void rollist(Object identificador, String roll, Object tipo, int linStart, int linEnd) {
        var_idSimb.add((String)identificador);
        var_rollSimb.add(roll);
        var_tipoSimb.add((String)tipo);
        var_lStartSimb.add(linStart);
        var_lEndSimb.add(linEnd);
    }

    public boolean idExiste(String a) {// comprobar id si existen en la tabla de simbolo
        for (int i = 0; i < var_identificador.size(); i++) {
            if (var_identificador.get(i).equals(a)) {
                return true;
            }
        }
        return false;
    }

    public void errores_gramatica (int error){ 
        /*Pedro Id: 3
          Brad Id:  7
          Jacobo:   4    
        */
        switch (error)
        {
        case 71:
            err_gramatica.add(" res_pin par_abre Numero coma Identificador par_cierra <p color=\"#FF0042\">sig_punto_coma</p>");
            break;
        //GRAMATICAS FUNCTION
        case 41:
            err_gramatica.add("res_name Identificador <span color=\"#FF0042\">sig_punto_coma</span><br>ESTRUCTURA_BASICA");
            break;
        case 42:
            err_gramatica.add("res_name <span color=\"#FF0042\">Identificador</span> sig_punto_coma<br>ESTRUCTURA_BASICA");
            break;
        case 43:
            err_gramatica.add("<span color=\"#FF0042\">res_name</span> Identificador sig_punto_coma<br>ESTRUCTURA_BASICA");
            break;
        case 44:
            err_gramatica.add("res_name <span color=\"#FF0042\">Identificador sig_punto_coma</span><br>ESTRUCTURA_BASICA");
            break;
        case 45:
            err_gramatica.add("res_function <span color=\"#FF0042\">TIPO_DATO</span> Identificador par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 46:
            err_gramatica.add("res_function TIPO_DATO <span color=\"#FF0042\">Identificador</span> par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 47:
            err_gramatica.add("res_function <span color=\"#FF0042\">TIPO_DATO Identificador</span> par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 48:
            err_gramatica.add("res_function TIPO_DATO Identificador <span color=\"#FF0042\">par_abre</span> PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 49:
            err_gramatica.add("res_function TIPO_DATO Identificador par_abre PARAMETRO <span color=\"#FF0042\">par_cierra</span> llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 401:
            err_gramatica.add("res_function TIPO_DATO Identificador <span color=\"#FF0042\">par_abre</span> PARAMETRO <span color=\"#FF0042\">par_cierra</span> llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 402:
            err_gramatica.add("<span color=\"#FF0042\">res_function</span> TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 403:
            err_gramatica.add("<span color=\"#FF0042\">res_function TIPO_DATO</span> Identificador par_abre PARAMETRO par_cierra llave_abre <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        case 404:
            err_gramatica.add("res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra <span color=\"#FF0042\">llave_abre</span> <br>SENTENCIA_FUNCION <br>llave_cierra");
            break;
        //GRAMATICAS STARTUP
        case 405:
            err_gramatica.add("res_start <span color=\"#FF0042\">sig_punto_coma</span><br>SENTENCIA_STARTUP<br>res_end <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 406:
            err_gramatica.add("res_start sig_punto_coma<br>SENTENCIA_STARTUP<br>res_end <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 407:
            err_gramatica.add("<span color=\"#FF0042\">res_start</span> sig_punto_coma<br>SENTENCIA_STARTUP<br>res_end sig_punto_coma");
            break;
        //GRAMATICAS DISPLAY
        case 408:
            err_gramatica.add("res_display par_abre DISPLAY_PARAMS par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 409:
            err_gramatica.add("res_display par_abre <span color=\"#FF0042\">DISPLAY_PARAMS</span> par_cierra sig_punto_coma");
            break;
        case 410:
            err_gramatica.add("res_display <span color=\"#FF0042\">par_abre</span> DISPLAY_PARAMS par_cierra sig_punto_coma");
            break;
        case 411:
            err_gramatica.add("res_display par_abre DISPLAY_PARAMS <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        //GRAMATICAS TYPE_IO
        case 412:
            err_gramatica.add("res_type par_abre Identificador coma <span color=\"#FF0042\">TYPE_IO</span> par_cierra sig_punto_coma");
            break;
        //GRAMATICAS MAX_VOLT
        case 413:
            err_gramatica.add("res_max_volt par_abre Identificador par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 414:
            err_gramatica.add("res_max_volt par_abre Numero par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 415:
            err_gramatica.add("res_max_volt <span color=\"#FF0042\">par_abre</span> Identificador par_cierra sig_punto_coma");
            break;
        case 416:
            err_gramatica.add("res_max_volt par_abre Identificador <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 417:
            err_gramatica.add("res_max_volt <span color=\"#FF0042\">par_abre</span> Numero par_cierra sig_punto_coma");
            break;
        case 418:
            err_gramatica.add("res_max_volt par_abre Numero <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 419:
            err_gramatica.add("res_max_volt par_abre <span color=\"#FF0042\">Numero</span> par_cierra sig_punto_coma");
            break;
        case 420:
            err_gramatica.add("res_max_volt <span color=\"#FF0042\">par_abre Numero par_cierra sig_punto_coma</span>");
            break;
        //GRAMATICAS OPERADOR CONDICIONAL
        case 421:
            err_gramatica.add("CONDICION ::=<br>VALOR_NUMERICO <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> VALOR_NUMERICO | <br> log_not Identificador <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> CONDICION");
            break;
        //GRAMATICAS IF
        case 422:
            err_gramatica.add(" IF ::=<br>res_if <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 423:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 424:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION par_cierra <span color=\"#FF0042\">llave_abre</span><br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 425:
            err_gramatica.add(" IF ::=<br>res_if <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra res_else llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 426:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra res_else llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 427:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION par_cierra <span color=\"#FF0042\">llave_abre</span><br>SENTENCIA_STARTUP<br>llave_cierra res_else llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 428:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION par_cierra llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra res_else <span color=\"#FF0042\">llave_abre</span><br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        case 429:
            err_gramatica.add(" IF ::=<br>res_if par_abre CONDICION par_cierra llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra <span color=\"#FF0042\">res_else</span> llave_abre<br>SENTENCIA_STARTUP<br>llave_cierra");
            break;
        //GRAMATICAS CASO
        case 430:
            err_gramatica.add("SWITCH_ENTRADAS ::=<br>rel_menor <span color=\"#FF0042\">CASO</span>rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        //GRAMATICAS OPERACION_CONTRACCION
        case 31:
            err_gramatica.add("OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO <span color=\"#FF0042\">sig_punto_coma<span color=\"#FF0042\">");
            break;
        case 32:
            err_gramatica.add("OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> sig_punto_coma");
            break;
        case 33:
            err_gramatica.add("OPERACION_CONTRACCION ::= cIdentificador OPERADOR_ARITMETICO <span color=\"#FF0042\">asi_asignacion<span color=\"#FF0042\"> VALOR_NUMERICO sig_punto_coma");
            break;
        case 34:
            err_gramatica.add("OPERACION_CONTRACCION ::= <span color=\"#FF0042\">Identificador <span color=\"#FF0042\">OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO sig_punto_coma");
            break;
        case 35:
            err_gramatica.add("OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO sig_punto_coma");
            break;
        case 36:
            err_gramatica.add("INCREMENTO ::= ari_suma ari_suma | ari_resta ari_resta");
            break;
        // GRAMATICAS TIPO_DATO_FOR
        case 37:
            err_gramatica.add("TIPO_DATO_FOR ::= tip_int | tip_float | tip_double | tip_tinyint | <span color=\"#FF0042\">tip_boolean<span color=\"#FF0042\"> ");
            break;
        case 38:
            err_gramatica.add("TIPO_DATO_FOR ::= tip_int | tip_float | tip_double | tip_tinyint | <span color=\"#FF0042\">tip_char<span color=\"#FF0042\"> ");
            break;
        // GRAMATICAS FOR
        case 39:
            err_gramatica.add("FOR ::= FOR ::= res_for <span color=\"#FF0042\">par_abre<span color=\"#FF0042\"> res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 310:
            err_gramatica.add("FOR ::= res_for par_abre <span color=\"#FF0042\">TIPO_DATO_FOR<span color=\"#FF0042\"> Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 311:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR <span color=\"#FF0042\">Identificador<span color=\"#FF0042\"> asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 312:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador <span color=\"#FF0042\">asi_asignacion<span color=\"#FF0042\"> VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 313:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 314:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO <span color=\"#FF0042\">sig_punto_coma<span color=\"#FF0042\"> CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 315:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma <span color=\"#FF0042\">CONDICION<span color=\"#FF0042\"> sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 316:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma <span color=\"#FF0042\">METODO_INCREMENTO<span color=\"#FF0042\"> par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 317:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"><br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 318:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "<span color=\"#FF0042\">llave_abre<span color=\"#FF0042\"><br>"+ 
                "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+ 
                "llave_cierra"); 
            break;
        case 319:
            err_gramatica.add("FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+ 
                "llave_abre<br>"+ 
                "&nbsp&nbsp&nbsp&nbsp <span color=\"#FF0042\">SENTENCIA_STARTUP<span color=\"#FF0042\"><br>"+ 
                "llave_cierra"); 
            break;
        case 320:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma <span color=\"#FF0042\">CONDICION<span color=\"#FF0042\"> sig_punto_coma METODO_INCREMENTO par_cierra<br>"+
            "llave_abre<br>"+ 
            "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+
            "llave_cierra"); 
            break;
        case 321:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma <span color=\"#FF0042\">METODO_INCREMENTO<span color=\"#FF0042\"> par_cierra<br>"+
            "llave_abre<br>"+ 
            "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+
            "llave_cierra"); 
            break;
        case 322:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"><br>"+
            "llave_abre<br>"+ 
            "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+
            "llave_cierra"); 
            break;
        case 323:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+
            "<span color=\"#FF0042\">llave_abre<span color=\"#FF0042\"><br>"+ 
            "&nbsp&nbsp&nbsp&nbsp SENTENCIA_STARTUP<br>"+
            "llave_cierra"); 
            break; 
        case 324:
            err_gramatica.add("FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra<br>"+
            "llave_abre<br>"+ 
            "&nbsp&nbsp&nbsp&nbsp <span color=\"#FF0042\">SENTENCIA_STARTUP<span color=\"#FF0042\"><br>"+
            "llave_cierra"); 
            break;   
        //GRAMATICA SLEEP    
        case 325:
            err_gramatica.add("SLEEP ::= res_sleep par_abre VALOR_NUMERICO par_cierra <span color=\"#FF0042\">sig_punto_coma<span color=\"#FF0042\">"); 
            break; 
        case 326:
            err_gramatica.add("SLEEP ::= res_sleep par_abre VALOR_NUMERICO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"> sig_punto_coma"); 
            break; 
        case 327:
            err_gramatica.add("SLEEP ::= res_sleep par_abre <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> par_cierra sig_punto_coma"); 
            break; 
        case 328:
            err_gramatica.add("SLEEP ::= res_sleep <span color=\"#FF0042\">par_abre<span color=\"#FF0042\"> VALOR_NUMERICO par_cierra sig_punto_coma"); 
            break; 
        case 329:
            err_gramatica.add("SLEEP ::= res_sleep <span color=\"#FF0042\">par_abre<span color=\"#FF0042\"> VALOR_NUMERICO par_cierra sig_punto_coma"); 
            break; 
        case 330:
            err_gramatica.add("SLEEP ::= res_sleep <span color=\"#FF0042\">par_abre<span color=\"#FF0042\"> VALOR_NUMERICO par_cierra sig_punto_coma"); 
            break;     
        case 331:
            err_gramatica.add("SLEEP ::= res_sleep par_abre <span color=\"#FF0042\">(VALOR_NUMERICO | EXPRESION)<span color=\"#FF0042\"> par_cierra sig_punto_coma"); 
            break; 
        case 332:
            err_gramatica.add("SLEEP ::= res_sleep par_abre VALOR_NUMERICO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"> sig_punto_coma"); 
            break; 
        case 333:
            err_gramatica.add("SLEEP ::= res_sleep par_abre <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> par_cierra sig_punto_coma"); 
            break;     
        case 334:
            err_gramatica.add("SLEEP ::= res_sleep par_abre <span color=\"#FF0042\">VALOR_NUMERICO<span color=\"#FF0042\"> par_cierra sig_punto_coma"); 
            break; 
        case 335:
            err_gramatica.add("SLEEP ::= res_sleep par_abre VALOR_NUMERICO <span color=\"#FF0042\">par_cierra<span color=\"#FF0042\"> sig_punto_coma"); 
            break; 
// GRAMATICA VOLT    
        case 337:
            err_gramatica.add("VOLT ::= res_volt par_abre Identificador coma Numero par_cierra <span color=\"#FF0042\">sig_punto_coma</span>"); 
            break; 
        case 338:
            err_gramatica.add("VOLT ::= res_volt par_abre Identificador coma Numero coma Numero par_cierra <span color=\"#FF0042\">sig_punto_coma</span>"); 
            break; 
        case 339:
            err_gramatica.add("VOLT ::= res_volt par_abre <span color=\"#FF0042\">Identificador</span> coma Numero par_cierra sig_punto_coma"); 
            break;     
        case 340:
            err_gramatica.add("VOLT ::= res_volt par_abre <span color=\"#FF0042\">Identificador</span> coma Numero coma Numero par_cierra sig_punto_coma"); 
            break;     
        case 341:
            err_gramatica.add("VOLT ::= res_volt par_abre Identificador <span color=\"#FF0042\">coma</span> Numero par_cierra sig_punto_coma"); 
            break;     
        case 342:
            err_gramatica.add("VOLT ::= res_volt par_abre <span color=\"#FF0042\">Identificador coma Numero coma Numero</span> par_cierra sig_punto_coma"); 
            break;   
        case 343:
            err_gramatica.add("VOLT ::= res_volt <span color=\"#FF0042\">par_abre</span> Identificador coma Numero par_cierra sig_punto_coma"); 
            break;   
        case 344:
            err_gramatica.add("VOLT ::= res_volt par_abre Identificador coma Numero par_cierra <span color=\"#FF0042\">sig_punto_coma</span>"); 
            break;      
        case 345:
            err_gramatica.add("VOLT ::= res_volt <span color=\"#FF0042\">par_abre</span> Identificador coma Numero coma Numero par_cierra sig_punto_coma"); 
            break;  
        case 346:
            err_gramatica.add("VOLT ::= res_volt par_abre Identificador coma Numero coma Numero <span color=\"#FF0042\">par_cierra</span> sig_punto_coma"); 
            break; 
        case 347:
            err_gramatica.add("VOLT ::= res_volt par_abre Identificador coma Numero <span color=\"#FF0042\">par_cierra</span> sig_punto_coma"); 
            break; 
        case 348:
            err_gramatica.add("VOLT ::= res_volt par_abre <span color=\"#FF0042\">Identificador</span> coma Numero par_cierra sig_punto_coma"); 
            break;            

        // GRAMÁTICA: OUT   

        case 744:
            err_gramatica.add("OUT res_out par_abre Identificador coma VALOR_NUMERICO           <span color=\"#FF0042\">par_cierra sig_punto_coma</span> ");
            break;
        case 745:
            err_gramatica.add("OUT res_out par_abre Identificador coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma ");
            break;
        case 746:
            err_gramatica.add("OUT res_out par_abre Identificador coma <span color=\"#FF0042\">VALOR_NUMERICO</span> par_cierra sig_punto_coma ");
            break;
        case 747:
            err_gramatica.add("OUT res_out par_abre Identificador <span color=\"#FF0042\">coma</span> VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 748:
            err_gramatica.add("OUT res_out par_abre <span color=\"#FF0042\">Identificador</span> coma VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 749:
            err_gramatica.add("OUT res_out <span color=\"#FF0042\">par_abre</span> Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 750:
            err_gramatica.add("OUT <span color=\"#FF0042\">res_out par_abre Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma</span> ");
            break;
        case 751:
            err_gramatica.add("OUT res_out par_abre Identificador coma VALOR_NUMERICO par_cierra <span color=\"#FF0042\">sig_punto_coma</span> ");
            break;
        case 752:
            err_gramatica.add("OUT res_out par_abre Identificador coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma ");
            break;    
        case 753:
            err_gramatica.add("OUT res_out par_abre Identificador coma <span color=\"#FF0042\">VALOR_NUMERICO</span> par_cierra sig_punto_coma ");
            break;
        case 754:
            err_gramatica.add("OUT res_out par_abre Identificador coma VALOR_NUMERICO <span color=\"#FF0042\">coma</span> VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 755:
            err_gramatica.add("OUT res_out par_abre Identificador <span color=\"#FF0042\">coma VALOR_NUMERICO coma VALOR_NUMERICO</span> par_cierra sig_punto_coma ");
            break;
        case 756:
            err_gramatica.add("OUT res_out par_abre Identificador <span color=\"#FF0042\">coma</span> VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 757:
            err_gramatica.add("OUT res_out par_abre <span color=\"#FF0042\">Identificador</span> coma VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 758:
            err_gramatica.add("OUT res_out <span color=\"#FF0042\">par_abre</span>Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma ");
            break;
        case 759:
            err_gramatica.add("OUT res_out par_abre res_display coma cadena_caracter par_cierre <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 760:
            err_gramatica.add("OUT res_out par_abre res_display coma cadena_caracter <span color=\"#FF0042\">par_cierre</span> sig_punto_coma");
            break;
        case 761:
            err_gramatica.add("OUT res_out par_abre res_display <span color=\"#FF0042\">coma cadena_caracter</span> par_cierre sig_punto_coma");
            break;
        case 762:
            err_gramatica.add("OUT res_out par_abre res_display <span color=\"#FF0042\">coma</span> cadena_caracter par_cierre sig_punto_coma");
            break;
        case 763:
            err_gramatica.add("OUT res_out par_abre <span color=\"#FF0042\">res_display</span> coma cadena_caracter par_cierre sig_punto_coma");
            break;
        case 764:
            err_gramatica.add("OUT res_out <span color=\"#FF0042\">par_abre</span> res_display coma cadena_caracter par_cierre sig_punto_coma");
            break;   

        // GRAMÁTICA: IN   

        case 765:
            err_gramatica.add("IN res_in par_abre VALOR_NUMERICO par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 766:
            err_gramatica.add("IN res_in par_abre VALOR_NUMERICO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 767:
            err_gramatica.add("IN res_in par_abre <span color=\"#FF0042\">VALOR_NUMERICO</span> par_cierra sig_punto_coma");
            break;
        case 768:
            err_gramatica.add("IN res_in <span color=\"#FF0042\">par_abre</span> VALOR_NUMERICO par_cierra sig_punto_coma");
            break;
        case 769:
            err_gramatica.add("IN res_in <span color=\"#FF0042\">par_abre</span> VALOR_NUMERICO par_cierra sig_punto_coma");
            break;

        // GRAMÁTICA: OPERACIÓN

        case 770:
            err_gramatica.add("OPERACION <span color=\"#FF0042\">VALOR</span> OPERADOR VALOR");
            break;
        case 771:
            err_gramatica.add("OPERACION <span color=\"#FF0042\">par_cierra</span> OPERACION <span color=\"#FF0042\">par_abre</span>");
            break;
        case 772:
            err_gramatica.add("OPERACION <span color=\"#FF0042\">par_cierra</span> OPERACION <span color=\"#FF0042\">par_cierra</span>");
            break;
        case 773:
            err_gramatica.add("OPERACION <span color=\"#FF0042\">par_abre</span> OPERACION <span color=\"#FF0042\">par_abre</span>");
            break;

        // GRAMÁTICA: DOWHILE
        case 774:
            err_gramatica.add("DOWHILE res_do llave_abre   <br>SENTENCIA_STARTUP<br> llave_cierra res_while par_abre CONDICION par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;

        // GRAMÁTICA: WHILE
        case 775:
            err_gramatica.add("WHILE res_while <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra");
            break;
        case 776:
            err_gramatica.add("WHILE res_while par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> llave_abre SENTENCIA_STARTUP llave_cierra");
            break;
        case 777:
            err_gramatica.add("WHILE res_while par_abre CONDICION par_cierra <span color=\"#FF0042\">llave_abre</span> SENTENCIA_STARTUP llave_cierra");
            break;
        case 778:
            err_gramatica.add("WHILE res_while par_abre <span color=\"#FF0042\">CONDICION</span> par_cierra llave_abre SENTENCIA_STARTUP llave_cierra");
            break;
        

        // GRAMÁTICA: SWITCH_ENTRADAS

        case 786:
            err_gramatica.add("SWITCH_ENTRADAS <span color=\"#FF0042\">rel_menor</span> CASO <span color=\"#FF0042\">rel_mayor</span> sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 787:
            err_gramatica.add("SWITCH_ENTRADAS <span color=\"#FF0042\">rel_menor</span> CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 788:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO <span color=\"#FF0042\">rel_mayor</span> sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 789:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO rel_mayor <span color=\"#FF0042\">sim_dos_puntos</span> SENTENCIA_STARTUP res_exit");
            break;
        case 790:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO <span color=\"#FF0042\">rel_mayor sim_dos_puntos</span> SENTENCIA_STARTUP res_exit");
            break;
        case 791:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor <span color=\"#FF0042\">CASO</span> rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 792:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO rel_mayor <span color=\"#FF0042\">sim_dos_puntos SENTENCIA_STARTUP res_exit</span>");
            break;
        case 793:
            err_gramatica.add("SWITCH_ENTRADAS <span color=\"#FF0042\">rel_menor</span> CASO <span color=\"#FF0042\">rel_mayor sim_dos_puntos</span> SENTENCIA_STARTUP res_exit");
            break;
        case 794:
            err_gramatica.add("SWITCH_ENTRADAS <span color=\"#FF0042\">rel_menor</span> CASO <span color=\"#FF0042\">rel_mayor</span> sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 795:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 796:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO <span color=\"#FF0042\">rel_mayor</span> sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 797:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO rel_mayor <span color=\"#FF0042\">sim_dos_puntos</span> SENTENCIA_STARTUP res_exit");
            break;
        case 798:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO <span color=\"#FF0042\">rel_mayor sim_dos_puntos</span> SENTENCIA_STARTUP res_exit");
            break;
        case 799:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor <span color=\"#FF0042\">Identificador</span> rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit");
            break;
        case 7001:
            err_gramatica.add("SWITCH_ENTRADAS rel_menor CASO rel_mayor <span color=\"#FF0042\">sim_dos_puntos</span> SENTENCIA_STARTUP <span color=\"#FF0042\">res_exit</span>");
            break;
        case 7002:
            err_gramatica.add("SWITCH_ENTRADAS <span color=\"#FF0042\">rel_menor</span> CASO <span color=\"#FF0042\">rel_mayor sim_dos_puntos</span> SENTENCIA_STARTUP res_exit");
            break;
        
        // GRAMÁTICA: SWITCH
        
        case 7003:
            err_gramatica.add("SWITCH res_switch <span color=\"#FF0042\">par_abre</span> Identificador par_cierra llave_abre  <br>SWITCH_ENTRADAS<br> llave_cierra");
            break;
        case 7004:
            err_gramatica.add("SWITCH res_switch par_abre Identificador <span color=\"#FF0042\">par_cierra</span> llave_abre  <br>SWITCH_ENTRADAS<br> llave_cierra");
            break;
        case 7005:
            err_gramatica.add("SWITCH res_switch <span color=\"#FF0042\">par_abre</span> Identificador <span color=\"#FF0042\">par_cierra</span> llave_abre  <br>SWITCH_ENTRADAS<br> llave_cierra");
            break;
        case 7006:
            err_gramatica.add("SWITCH res_switch par_abre <span color=\"#FF0042\">Identificador</span> par_cierra llave_abre  <br>SWITCH_ENTRADAS<br> llave_cierra");
            break;
        case 7007:
            err_gramatica.add("SWITCH res_switch par_abre Identificador par_cierra <span color=\"#FF0042\">llave_abre</span> <br>SWITCH_ENTRADAS<br> llave_cierra");
            break;
        case 7008:
            err_gramatica.add("SWITCH res_switch par_abre Identificador par_cierra llave_abre  <span color=\"#FF0042\"><br>SWITCH_ENTRADAS<br></span> llave_cierra");
            break;
        case 7009:
            err_gramatica.add("SWITCH res_switch par_abre Identificador par_cierra llave_abre  <span color=\"#FF0042\"><br>SWITCH_FUNCION<br></span> llave_cierra");
            break;
        case 7010:
            err_gramatica.add("SWITCH res_switch par_abre Identificador par_cierra llave_abre  <br>SWITCH_ENTRADAS<br> <span color=\"#FF0042\">res_default</span> sim_dos_puntos llave_cierra");
            break;
        case 7011:
            err_gramatica.add("SWITCH res_switch par_abre Identificador par_cierra llave_abre  <br>SWITCH_ENTRADAS<br> res_default <span color=\"#FF0042\">sim_dos_puntos</span> llave_cierra");
            break;

        // GRAMÁTICA: IF
        case 7012:
            err_gramatica.add("IF res_if <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra llave_abre <br>SENTENCIA_STARTUP<br> llave_cierra");
            break;
        case 7013:
            err_gramatica.add("IF res_if par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> llave_abre <br>SENTENCIA_STARTUP<br> llave_cierra");
            break;
        case 7014:
            err_gramatica.add("IF res_if par_abre CONDICION par_cierra <span color=\"#FF0042\">llave_abre</span> <br>SENTENCIA_STARTUP<br> llave_cierra");
            break;    
        case 7015:
            err_gramatica.add("IF res_if par_abre CONDICION par_cierra llave_abre <br>SENTENCIA_STARTUP<br> llave_cierra res_else <span color=\"#FF0042\">llave_abre</span>      <br>SENTENCIA_STARTUP<br> llave_cierra");
            break;
        case 7016:
            err_gramatica.add("IF res_if par_abre CONDICION par_cierra llave_abre <br>SENTENCIA_STARTUP<br> llave_cierra <span color=\"#FF0042\">res_else</span> llave_abre      <br>SENTENCIA_STARTUP<br> llave_cierra");
            break;
        case 7017:
            err_gramatica.add("IF res_if par_abre CONDICION par_cierra llave_abre <br>SENTENCIA_STARTUP<br> llave_cierra");
            break;

        // GRAMÁTICA: PARAMETRO
        case 7018:
            err_gramatica.add("PARAMETRO::= PARAMETRO <span color=\"#FF0042\">coma</span> DECLARACION");
            break;

        // GRAMÁTICA: MODE
        case 7019:
            err_gramatica.add("MODE res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 7020:
            err_gramatica.add("MODE res_model par_abre VALOR_NUMERICO <span color=\"#FF0042\">coma</span> VALOR_NUMERICO par_cierra sig_punto_coma");
            break;
        case 7021:
            err_gramatica.add("MODE res_model par_abre VALOR_NUMERICO <span color=\"#FF0042\">coma</span> VALOR_NUMERICO <span color=\"#FF0042\">coma</span> VALOR_NUMERICO par_cierra sig_punto_coma");
            break;
        case 7022:
            err_gramatica.add("MODE res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 7023:
            err_gramatica.add("MODE res_model <span color=\"#FF0042\">par_abre</span> VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma");
            break;
        case 7024:
            err_gramatica.add("MODE res_model <span color=\"#FF0042\">par_abre</span> VALOR_NUMERICO coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 7025:
            err_gramatica.add("MODE res_model <span color=\"#FF0042\">par_abre</span> VALOR_NUMERICO coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
        case 7026:
            err_gramatica.add("MODE res_model <span color=\"#FF0042\">par_abre</span>VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra]sig_punto_coma");
            break;
        case 7027:
            err_gramatica.add("MODE res_model <span color=\"#FF0042\">par_abre</span>VALOR_NUMERICO <span color=\"#FF0042\">par_cierra]sig_punto_coma");
            break;
        case 7028:
            err_gramatica.add("MODE res_model <span color=\"#FF0042\">par_abre</span>VALOR_NUMERICO coma VALOR_NUMERICO <span color=\"#FF0042\">par_cierra]sig_punto_coma");
            break;

        
        //GRAMÁTICA: CONDICION
        case 7030:
            err_gramatica.add("CONDICION VALOR_NUMERICO OPERADOR_CONDICIONAL <span color=\"#FF0042\">VALOR_NUMERICO</span>");
            break;
        case 7031:
            err_gramatica.add("CONDICION <span color=\"#FF0042\">par_abre CONDICION par_cierra</span> OPERADOR_CONDICIONAL <span color=\"#FF0042\">par_abre CONDICION par_cierra</span>");
            break;
        case 7032:
            err_gramatica.add("CONDICION par_abre CONDICION par_cierra <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> par_abre CONDICION par_cierra");
            break;
        case 7033:
            err_gramatica.add("CONDICION VALOR_NUMERICO <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> VALOR_NUMERICO");
            break;
        case 7034:
            err_gramatica.add("CONDICION log_not <span color=\"#FF0042\">Identificador</span> OPERADOR_CONDICIONAL VALOR_NUMERICO");
            break;
        case 7035:
            err_gramatica.add("CONDICION <span color=\"#FF0042\">VALOR_NUMERICO</span> OPERADOR_CONDICIONAL <span color=\"#FF0042\">VALOR_NUMERICO</span>");
            break;
        case 7036:
            err_gramatica.add("CONDICION VALOR_NUMERICO <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> <span color=\"#FF0042\">OPERADOR_CONDICIONAL</span> VALOR_NUMERICO");
            break;
        case 7037:
            err_gramatica.add("CONDICION <span color=\"#FF0042\">cadena_caracter</span> OPERADOR_CONDICIONAL <span color=\"#FF0042\">cadena_caracter</span>");
            break;
        case 7038:
            err_gramatica.add("CONDICION <span color=\"#FF0042\">cadena_caracter</span> OPERADOR_CONDICIONAL VALOR_NUMERICO");
            break;

        //GRAMÁTICA: WAIT
        case 7039:
            err_gramatica.add("WAIT res_wait par_abre CONDICION par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
        case 7040:
            err_gramatica.add("WAIT res_wait <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra sig_punto_coma");
            break;
        case 7041:
            err_gramatica.add("WAIT res_wait par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
  // GRAMÁTICA: RETURN 

            case 717:
                err_gramatica.add("RETURN ::= res_return Identificador <span color=\"#FF0042\">sig_punto_coma</span>");
                break;
            case 718:
                err_gramatica.add("RETURN ::= res_return TIPO_DATO <span color=\"#FF0042\">sig_punto_coma</span>");
                break;            
// GRAMÁTICA: ESTRUCTURA_BASICA

            case 700:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">STARTUP_CONFIG</p>");
                break;
            case 701:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">CONFIG</p>");
                break;   
            case 702:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">STARTUP</p>");
                break;   
            case 703:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">FUNCIONES</p>");
                break;   
            case 704:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">FUNCIONES CONFIG</p>");
                break;           
            case 705:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">FUNCIONES STARTUP</p>");
                break;
            case 706:
                err_gramatica.add("ESTRUCTURA_BASICA ::= <p color=\"#FF0042\">STARTUP FUNCIONES</p>");
                break;  
   // GRAMÁTICA: CONFIG 
            case 21: 
                err_gramatica.add("CONFIG ::= res_config <span color=\"#FF0042\">llave_abre </span> SENTENCIA_CONFIG llave_cierra ");
                break;               
// GRAMÁTICA: DECLARACIÓN

            case 719:
                err_gramatica.add("DECLARACION ::= res_def TIPO_DATO Identificador VALOR <span color=\"#FF0042\">sig_punto_coma</span> ");
                break;
            case 720:
                err_gramatica.add("DECLARACION ::= <span color=\"#FF0042\">res_def</span> TIPO_DATO Identificador sig_punto_coma");
                break;    
            case 721:
                err_gramatica.add("DECLARACION ::= res_def TIPO_DATO Identificador asi_asignacion VALOR <span color=\"#FF0042\">sig_punto_coma</span>");
                break;  
            case 722:      
                err_gramatica.add("DECLARACION ::= <span color=\"#FF0042\">res_def</span> TIPO_DATO Identificador asi_asignacion VALOR sig_punto_coma");
                break;
            case 723:
                err_gramatica.add("DECLARACION ::=  res_def res_pin <span color=\"#FF0042\">par_abre Numero coma Identificador par_cierra</span> sig_punto_coma");
                break; 
            case 724:
                err_gramatica.add("DECLARACION ::= res_def res_pin <span color=\"#FF0042\">Identificador</span> asi_asignacion VALOR sig_punto_coma");
                break; 
            case 725:
                err_gramatica.add("DECLARACION ::= res_def res_pin par_abre Numero coma <span color=\"#FF0042\">Identificador</span> par_cierra sig_punto_coma");
                break; 
            case 726:
                err_gramatica.add("DECLARACION ::= res_def res_display par_abre <span color=\"#FF0042\">DISPLAY_PARAMS</span> par_cierra sig_punto_coma");
                break;
            case 727:
                err_gramatica.add("DECLARACION ::= res_def res_function <span color=\"#FF0042\">TIPO_DATO Identificador</span></span> par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION  llave_cierra");
                break;
            case 728:
                err_gramatica.add("DECLARACION ::= res_def res_function res_void <span color=\"#FF0042\">Identificador</span> par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION    llave_cierra");
                break;
            case 729:
                err_gramatica.add("DECLARACION ::= res_def res_type par_abre <span color=\"#FF0042\">Identificador coma TYPE_IO</span> par_cierra sig_punto_coma");
                break;
            case 730:
                err_gramatica.add("DECLARACION ::= res_def res_scale par_abre <span color=\"#FF0042\">Identificador coma Numero coma Numero</span> par_cierra sig_punto_coma");
                break;
            case 731:
                err_gramatica.add("DECLARACION ::= res_def res_volt par_abre <span color=\"#FF0042\">Identificador coma Numero</span> par_cierra sig_punto_coma");
                break;
            case 732:
                err_gramatica.add("DECLARACION ::= res_def res_volt par_abre <span color=\"#FF0042\">Identificador coma Numero coma Numero</span> par_cierra sig_punto_coma");
                break;
    //GRAMATICA: PIN 
            case 22:
            err_gramatica.add("PIN ::= res_pin par_abre Numero coma Identificador par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
            case 23:  
            err_gramatica.add("PIN ::= res_pin par_abre <span color=\"#FF0042\">Numero coma</span> Identificador par_cierra sig_punto_coma");
            break;
            case 24:
            err_gramatica.add("PIN ::= res_pin par_abre Numero <span color=\"#FF0042\"> coma Identificador </span> par_cierra sig_punto_coma");
            break;
            case 25:
            err_gramatica.add("PIN ::= res_pin par_abre <span color=\"#FF0042\"> Numero coma Identificador </span>par_cierra sig_punto_coma");
            break;
            case 26:
            err_gramatica.add("PIN ::= res_pin <span color=\"#FF0042\">par_abre</span> Numero coma Identificador par_cierra sig_punto_coma");
            break;
            case 27:
            err_gramatica.add("PIN ::= res_pin par_abre Numero coma Identificador <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
 // GRAMÁTICA: DISPLAY_PARAMS

            case 733:
                err_gramatica.add("DISPLAY_PARAMS ::= Numero coma <span color=\"#FF0042\">Numero</span>");
                break;
            case 734:
                err_gramatica.add("DISPLAY_PARAMS ::= Numero <span color=\"#FF0042\">coma</span> DISPLAY_PARAMS");
                break;    
            case 735:
                err_gramatica.add("DISPLAY_PARAMS ::= Numero coma<span color=\"#FF0042\"> Numero</span> coma <span color=\"#FF0042\"> Numero</span> coma <span color=\"#FF0042\"> Numero</span>");
                break;
            case 736:
                err_gramatica.add("DISPLAY_PARAMS ::= Numero coma <span color=\"#FF0042\"> Numero</span> coma Numero");
                break;   
//GRAMATICA: TYPE 
            case 28:
            err_gramatica.add("TYPE ::= res_type par_abre Identificador coma TYPE_IO par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break;
            case 29:
            err_gramatica.add("TYPE ::= res_type <span color=\"#FF0042\">par_abre</span> Identificador coma TYPE_IO par_cierra sig_punto_coma");
            break;
            case 201:
            err_gramatica.add("TYPE ::= res_type par_abre Identificador coma TYPE_IO <span color=\"#FF0042\"> par_cierra</span> sig_punto_coma");
            break;
            case 202:
            err_gramatica.add("TYPE ::= res_type <span color=\"#FF0042\">par_abre</span> Identificador coma TYPE_IO <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break;
            case 203:
            err_gramatica.add("TYPE ::= res_type par_abre Identificador <span color=\"#FF0042\">coma</span> TYPE_IO par_cierra sig_punto_coma");
            break;
            case 204:
            err_gramatica.add("TYPE ::= res_type par_abre <span color=\"#FF0042\">Identificador coma</span> TYPE_IO par_cierra sig_punto_coma");
            break;
            case 205:
            err_gramatica.add("TYPE ::= res_type par_abre Identificador coma <span color=\"#FF0042\">TYPE_IO</span> par_cierra sig_punto_coma");
            break;
            case 206:
            err_gramatica.add("TYPE ::= res_type par_abre <span color=\"#FF0042\">Identificador coma TYPE_IO </span> par_cierra sig_punto_coma");
            break;
            case 207:
            err_gramatica.add("TYPE ::= res_type par_abre <span color=\"#FF0042\">Identificador</span> coma TYPE_IO par_cierra sig_punto_coma");
            break;
            case 208:
            err_gramatica.add("TYPE ::= res_type par_abre Identificador coma <span color=\"#FF0042\"> TYPE_IO par_cierra</span> sig_punto_coma");
            break;   
            // GRAMÁTICA: SCALE
            case 737:
            err_gramatica.add("SCALE ::= res_scale par_abre Identificador coma Numero coma Numero par_cierra <span color=\"#FF0042\">sig_punto_coma</span>");
            break; 
            case 738:
            err_gramatica.add("SCALE ::= res_scale par_abre <span color=\"#FF0042\">Identificador</span> coma Numero coma Numero par_cierra sig_punto_coma");
            break; 
            case 739:
            err_gramatica.add("SCALE ::= res_scale par_abre Identificador <span color=\"#FF0042\">coma Numero coma Numero</span> par_cierra sig_punto_coma");
            break; 
            case 740:
            err_gramatica.add("SCALE ::= es_scale par_abre <span color=\"#FF0042\"> Numero coma Numero coma</span> Identificador par_cierra sig_punto_coma");
            break;
            case 741:
            err_gramatica.add("SCALE ::= res_scale par_abre <span color=\"#FF0042\"> Numero coma </span>  Identificador par_cierra sig_punto_coma");
            break; 
            case 742:
            err_gramatica.add("SCALE ::= res_scale <span color=\"#FF0042\"> par_abre </span> Identificador coma Numero coma Numero par_cierra sig_punto_coma");
            break; 
            case 743:
            err_gramatica.add("SCALE ::= res_scale par_abre Identificador coma Numero coma Numero <span color=\"#FF0042\"> par_cierra </span> sig_punto_coma");
            break; 
        case 500: 
            err_msj.add("res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma");
            break; 
        case 501: 
            err_msj.add("res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION <span color=\"#FF0042\">par_cierra</span> sig_punto_coma");
            break; 
        case 502: 
            err_msj.add("res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while <span color=\"#FF0042\">par_abre</span> CONDICION par_cierra sig_punto_coma");
            break; 
        case 503: 
            err_msj.add("res_do llave_abre SENTENCIA_STARTUP llave_cierra <span color=\"#FF0042\">res_while</span> par_abre CONDICION par_cierra sig_punto_coma");
            break; 
        case 504: 
            err_msj.add("res_do llave_abre SENTENCIA_STARTUP <span color=\"#FF0042\">llave_cierra</span> res_while par_abre CONDICION par_cierra sig_punto_coma");
            break; 
        case 505: 
            err_msj.add("res_do llave_abre <span color=\"#FF0042\">SENTENCIA_STARTUP</span> llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma");
            break; 
        case 506: 
            err_msj.add("res_do <span color=\"#FF0042\">llave_abre</span> SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma");
            break;      


        case 9999: // CASO DE ERROR GENERAL, GENERA UN NULL PARA NO PERDER LA RELACION ENTRE err_msj - err_linea y err_gramatica
            err_gramatica.add(null);
            break;
        case 10:// Identificador ya declarado en una declaración simple
            err_gramatica.add("res_def TIPO_DATO <span color=\"#FF0042\">Identificador</span> sig_punto_coma");
            break;  
        case 11:// Identificador ya declarado en una declaración con inicialización
            err_gramatica.add("res_def TIPO_DATO <span color=\"#FF0042\">Identificador</span> asi_asignacion VALOR sig_punto_coma");
            break; 
        case 12:// Identificador ya declarado en una declaración simple de parametro
            err_gramatica.add("res_def TIPO_DATO <span color=\"#FF0042\">Identificador</span>");
            break; 
        case 13:// Identificador ya declarado en una declaración con inicialización de parametro
            err_gramatica.add("res_def TIPO_DATO <span color=\"#FF0042\">Identificador</span> asi_asignacion VALOR");
            break;
        case 14:// Error falta parentesis izquierdo
            err_gramatica.add("recuerda que por cada parentesis abierto se tiene que cerrar como en la siguiente gramatica <br> <span color=\"#FF0042\">par_abre OPE par_cierra</span>");
            break; 
        case 15:// Error falta parentesis derecho
            err_gramatica.add("par_abre OPE <span color=\"#FF0042\">par_cierra</span>");
            break; 
        }
        
           
    }





  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // OPERACION_CONTRACCION ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // OPERACION_CONTRACCION ::= OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador antes del operador aritmetico");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(34);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un signo de asignación");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(33);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor numérico");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(32);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(31);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // OPERACION_CONTRACCION ::= Identificador INCREMENTO sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // OPERACION_CONTRACCION ::= Identificador OPERADOR_ARITMETICO asi_asignacion VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_CONTRACCION",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // OPERADOR_ARITMETICO ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // OPERADOR_ARITMETICO ::= ari_division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // OPERADOR_ARITMETICO ::= ari_multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // OPERADOR_ARITMETICO ::= ari_resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // OPERADOR_ARITMETICO ::= ari_suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_ARITMETICO",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // INCREMENTO ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // INCREMENTO ::= ari_resta ari_resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // INCREMENTO ::= ari_suma ari_suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INCREMENTO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // TIPO_DATO_FOR ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FOR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // TIPO_DATO_FOR ::= tip_char 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un tipo de dato numérico");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(38);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FOR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // TIPO_DATO_FOR ::= tip_boolean 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un tipo de dato numérico");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(37);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FOR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // TIPO_DATO_FOR ::= tip_tinyint 
            {
              Object RESULT =null;
		int tipfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipf;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FOR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // TIPO_DATO_FOR ::= tip_double 
            {
              Object RESULT =null;
		int tipfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipf;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FOR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // TIPO_DATO_FOR ::= tip_float 
            {
              Object RESULT =null;
		int tipfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipf;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FOR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // TIPO_DATO_FOR ::= tip_int 
            {
              Object RESULT =null;
		int tipfleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipfright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tipf = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tipf;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO_FOR",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // METODO_INCREMENTO ::= OPERACION_CONTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO_INCREMENTO",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // METODO_INCREMENTO ::= Identificador INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODO_INCREMENTO",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra def antes del tipo de dato");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(336);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre llave_abre llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba minimo una instrucción dentro de las llaves del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(324);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una llave de apertura despues del paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(323);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre antes de la primera llave del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(322);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un operador de incremento dentro de los parametros del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(321);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // FOR ::= res_for par_abre sig_punto_coma sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una condición dentro de los parametros del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(320);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre llave_abre llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba minimo una instrucción dentro de las llaves del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(319);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una llave de apertura despues del paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(318);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre antes de la primera llave del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(317);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un operador de incremento dentro de los parametros del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(316);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // FOR ::= res_for par_abre TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una condición dentro de los parametros del for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(315);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma antes de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(314);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor en el apartado de declaración de variables");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(313);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el operador de asignación en el apartado de declaración de variables");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(312);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // FOR ::= res_for par_abre res_def TIPO_DATO_FOR asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador después del tipo de dato");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(311);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // FOR ::= res_for par_abre Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el tipo de dato correspondiente al identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(310);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // FOR ::= res_for res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis después de la palabra reservada for");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(39);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // FOR ::= res_for par_abre sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // FOR ::= res_for par_abre res_def TIPO_DATO_FOR Identificador asi_asignacion VALOR_NUMERICO sig_punto_coma CONDICION sig_punto_coma METODO_INCREMENTO par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		
        rollist(id,"Parámetro",dato,iright+1,iright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // SLEEP ::= res_sleep par_abre VALOR_NUMERICO par_abre sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre antes del punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(335);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // SLEEP ::= res_sleep par_cierra VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura después de la palabra reservada sleep");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(334);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // SLEEP ::= res_sleep par_cierra VALOR_NUMERICO par_abre sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura después de la palabra reservada sleep");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(333);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // SLEEP ::= res_sleep par_abre VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre después del parámetro");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(332);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // SLEEP ::= res_sleep par_abre par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un parámetro");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(331);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // SLEEP ::= res_sleep sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura despues de la palabra reservada sleep");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(330);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // SLEEP ::= res_sleep par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura despues de la palabra reservada sleep");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(329);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // SLEEP ::= res_sleep VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura despues de la palabra reservada sleep");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(328);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // SLEEP ::= res_sleep par_abre par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor numérico o identificador como parámetro");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(327);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // SLEEP ::= res_sleep par_abre VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre antes del punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(326);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // SLEEP ::= res_sleep par_abre VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(325);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // SLEEP ::= res_sleep par_abre EXPRESION par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // SLEEP ::= res_sleep par_abre VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SLEEP",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // OUT ::= res_out coma cadena_caracter par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura después de la palabra out"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(764);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // OUT ::= res_out par_abre coma cadena_caracter par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la sentencia display como primer parámetro"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(763);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // OUT ::= res_out par_abre res_display cadena_caracter par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una coma"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(762);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // OUT ::= res_out par_abre res_display coma par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un parametro entes del paréntesis"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(761);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // OUT ::= res_out par_abre res_display coma cadena_caracter sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre antes del punto y coma"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(760);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // OUT ::= res_out par_abre res_display coma cadena_caracter par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(759);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // OUT ::= res_out Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura después del out"); 
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(758);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // OUT ::= res_out par_abre coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un Identificador después del paréntesis de apertura");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(757);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // OUT ::= res_out par_abre Identificador VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una coma después del Identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(756);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // OUT ::= res_out par_abre Identificador coma coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban dos parametros numéricos");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(755);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una coma entre los dos valores numéricos");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(754);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO coma par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un parámetro antes del paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(753);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(752);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(751);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // OUT ::= res_out par_abre par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una instrucción completa");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(750);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // OUT ::= res_out Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis después del out");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(749);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // OUT ::= res_out par_abre coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador después del paréntesis de apertura");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(748);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // OUT ::= res_out par_abre Identificador VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una coma despues del identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(747);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // OUT ::= res_out par_abre Identificador coma par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un parámetro numérico antes del paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(746);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(745);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(744);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // OUT ::= res_out par_abre res_display coma cadena_caracter par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // OUT ::= res_out par_abre Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OUT",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // IN ::= res_in sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(769);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // IN ::= res_in VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(768);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // IN ::= res_in par_abre par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un parámetro único");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(767);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // IN ::= res_in par_abre VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(766);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // IN ::= res_in par_abre VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(765);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // IN ::= res_in par_abre VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IN",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // OPERADOR ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // OPERADOR ::= ari_multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // OPERADOR ::= ari_suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // OPERADOR ::= ari_resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // OPERADOR ::= ari_division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // OPERADOR ::= OPERADOR_CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // OPERACION_PROC ::= VALOR OPERADOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION_PROC",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // FACTOR ::= ari_resta FACTOR 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //Obtener variables usadas
        var_idSem.add("-");
        var_linExp.add(lright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // FACTOR ::= par_abre OPE par_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // FACTOR ::= VALOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 //Obtener variable usadas
        //if(id.toString().matches("([(a-z)(A-Z)](\\w)*)")){
            var_idSem.add(id);
            var_linExp.add(idright+1);
        //}
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // TERM ::= FACTOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // TERM ::= TERM ari_division FACTOR 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //Obtener variables usadas
        var_idSem.add("/");
        var_linExp.add(lright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // TERM ::= TERM ari_multiplicacion FACTOR 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //Obtener variables usadas
        var_idSem.add("*");
        var_linExp.add(lright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERM",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // OPE ::= TERM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // OPE ::= OPE ari_resta TERM 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //Obtener variables usadas
        var_idSem.add("-");
        var_linExp.add(lright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // OPE ::= OPE ari_suma TERM 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //Obtener variables usadas
        var_idSem.add("+");
        var_linExp.add(lright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPE",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // EXPRESION ::= Identificador asi_asignacion error sig_punto_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        err_msj.add("Error semantico en la linea " + (idright+1) + " con el balanceo de parentesis");
        err_linea.add(idright+1);
        errores_gramatica(14);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // EXPRESION ::= Identificador asi_asignacion IN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 //Obtener variables usadas
        var_idSem.add(id);
        var_linExp.add(lright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // EXPRESION ::= Identificador asi_asignacion OPE sig_punto_coma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 //Obtener variables usadas
        var_idSem.add(id);
        var_linExp.add(lright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // DOWHILE ::= res_do SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una llave de apertura despues de la palabra do");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(506);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // DOWHILE ::= res_do llave_abre llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba como minimo una instrucción dentro de las llaves del do while");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(505);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP res_while par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una llave de cierre antes del while");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(504);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP llave_cierra par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra reservada while");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(503);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de apertura");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(502);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while par_abre par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un condición dentro del while");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(501);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(500);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(774);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // DOWHILE ::= res_do llave_abre SENTENCIA_STARTUP llave_cierra res_while par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DOWHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // WHILE ::= res_while par_abre par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba condición antes del bloque de código del while");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(778);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // WHILE ::= res_while par_abre CONDICION par_cierra SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura antes del bloque de código del while");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(777);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // WHILE ::= res_while par_abre CONDICION llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(776);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // WHILE ::= res_while CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura antes de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(775);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // WHILE ::= res_while par_abre CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // CASO ::= Numero coma Identificador 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // CASO ::= cadena_caracter coma cadena_caracter 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // CASO ::= Numero ari_suma Numero 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // CASO ::= Numero ari_suma cadena_caracter 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // CASO ::= cadena_caracter ari_suma cadena_caracter 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // CASO ::= Numero coma Numero 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // CASO ::= Numero Numero 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo número, cadena o valor booleano");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(430);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // CASO ::= res_false 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // CASO ::= res_true 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // CASO ::= cadena_caracter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // CASO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CASO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS CASO SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba que el case a evaluar estuviera entre <> seguido de :");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7002);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS rel_menor CASO rel_mayor llave_abre SENTENCIA_STARTUP llave_cierra res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban dos puntos al final del case a evaluar y exit al final del bloque de instrucciones del case");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7001);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS rel_menor Identificador rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un número, una cadena o un valor boleando como case a evaluar, no se admiten valores dinámicos");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(799);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS rel_menor CASO SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" |Se esperaba > seguida de : al final de case a evaluar");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(798);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS rel_menor CASO rel_mayor SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba : antes del bloque de instrucciones del case");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(797);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS rel_menor CASO sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba > al final de case a evaluar");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(796);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba < al inicio del case a evaluar");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(795);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS CASO sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba < al inicio del case a evaluar y > al final del mismo");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(794);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // SWITCH_ENTRADAS ::= CASO SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba que el case a evaluar estuviera entre <> seguido de :");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(793);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // SWITCH_ENTRADAS ::= rel_menor CASO rel_mayor llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban dos puntos al final del case a evaluar y exit al final del bloque de instrucciones del case");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(792);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // SWITCH_ENTRADAS ::= rel_menor Identificador rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un número, una cadena o un valor boleando como case a evaluar, no se admiten valores dinámicos");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(791);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // SWITCH_ENTRADAS ::= rel_menor CASO SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" |Se esperaba > seguida de : al final de case a evaluar");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(790);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // SWITCH_ENTRADAS ::= rel_menor CASO rel_mayor SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba : antes del bloque de instrucciones del case");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(789);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // SWITCH_ENTRADAS ::= rel_menor CASO sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba > al final de case a evaluar");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(788);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // SWITCH_ENTRADAS ::= CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba < al inicio del case a evaluar");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(787);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // SWITCH_ENTRADAS ::= CASO sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba < al inicio del case a evaluar y > al final del mismo");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(786);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // SWITCH_ENTRADAS ::= SWITCH_ENTRADAS rel_menor CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // SWITCH_ENTRADAS ::= rel_menor CASO rel_mayor sim_dos_puntos SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH_ENTRADAS",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SWITCH_ENTRADAS sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba palabra reservada default");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7010);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SWITCH_ENTRADAS res_default SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba : después de la palabra reservada default");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7011);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba al menos una sentencia dentro del default-case");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7010);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SENTENCIA_FUNCION res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban entradas validas dentro de la estructura switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7009);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban entradas dentro de la estructura switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7008);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // SWITCH ::= res_switch par_abre Identificador par_cierra SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura antes del bloque de entradas de la estructura switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7007);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // SWITCH ::= res_switch par_abre PARAMETRO par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // SWITCH ::= res_switch par_abre EXPRESION par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // SWITCH ::= res_switch par_abre res_false par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // SWITCH ::= res_switch par_abre res_true par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // SWITCH ::= res_switch par_abre cadena_caracter par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // SWITCH ::= res_switch par_abre Numero par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // SWITCH ::= res_switch par_abre par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // SWITCH ::= res_switch Identificador llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paréntesis encerrando identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // SWITCH ::= res_switch par_abre Identificador llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7004);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // SWITCH ::= res_switch Identificador par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7003);        
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban entradas validas dentro de la estructura switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7009);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban entradas dentro de la estructura switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7008);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // SWITCH ::= res_switch par_abre Identificador par_cierra SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura antes del bloque de entradas de la estructura switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7007);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // SWITCH ::= res_switch par_abre PARAMETRO par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // SWITCH ::= res_switch par_abre EXPRESION par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // SWITCH ::= res_switch par_abre res_false par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // SWITCH ::= res_switch par_abre res_true par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // SWITCH ::= res_switch par_abre cadena_caracter par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // SWITCH ::= res_switch par_abre Numero par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // SWITCH ::= res_switch par_abre par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador a evaluar encerrado entre paréntesis");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7006);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // SWITCH ::= res_switch Identificador llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paréntesis encerrando identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7005);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // SWITCH ::= res_switch par_abre Identificador llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7004);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // SWITCH ::= res_switch Identificador par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada switch");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7003);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SWITCH_ENTRADAS res_default sim_dos_puntos SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // SWITCH ::= res_switch par_abre Identificador par_cierra llave_abre SWITCH_ENTRADAS llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // IF ::= res_if par_abre CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba else del bloque de código de else");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7016);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // IF ::= res_if par_abre CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra res_else SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura antes del bloque de código de else");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7015);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // IF ::= res_if par_abre CONDICION par_cierra SENTENCIA_STARTUP llave_cierra res_else llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura antes del bloque de código de if");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7014);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // IF ::= res_if par_abre CONDICION llave_abre SENTENCIA_STARTUP llave_cierra res_else llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7013);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // IF ::= res_if CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra res_else llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura antes de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7012);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // IF ::= res_if par_abre CONDICION par_cierra SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura antes del bloque de código de if");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7014);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // IF ::= res_if par_abre CONDICION llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7013);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // IF ::= res_if CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura antes de la condición");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7012);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // IF ::= res_if par_abre CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra res_else llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // IF ::= res_if par_abre CONDICION par_cierra llave_abre SENTENCIA_STARTUP llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // DECLARACION_PARAMETRO ::= res_def res_volt par_abre Identificador coma Numero coma Numero par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // DECLARACION_PARAMETRO ::= res_def res_volt par_abre Identificador coma Numero par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // DECLARACION_PARAMETRO ::= res_def res_scale par_abre Identificador coma Numero coma Numero par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // DECLARACION_PARAMETRO ::= res_def res_type par_abre Identificador coma TYPE_IO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // DECLARACION_PARAMETRO ::= res_def res_function res_void Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis para la creación de funciones");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // DECLARACION_PARAMETRO ::= res_def res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis para la creación de funciones");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // DECLARACION_PARAMETRO ::= res_def res_display par_abre DISPLAY_PARAMS par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método display");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // DECLARACION_PARAMETRO ::= res_def res_pin par_abre Numero coma Identificador par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // DECLARACION_PARAMETRO ::= res_def res_pin Identificador asi_asignacion VALOR 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // DECLARACION_PARAMETRO ::= res_def res_pin Identificador 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // DECLARACION_PARAMETRO ::= TIPO_DATO Identificador asi_asignacion VALOR 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada def al inicio de la declaración");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // DECLARACION_PARAMETRO ::= TIPO_DATO Identificador 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea # | Se esperaba la palabra reservada def al inicio de la declaración");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // DECLARACION_PARAMETRO ::= res_def TIPO_DATO Identificador asi_asignacion VALOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 //vamos a validar cuando aparecen estas expresiones
        if(!idExiste(id+"")){
            System.out.println("tipo: "+ dato + " identificador: "+ id + " valor "+val);
            var_identificador.add(id);
            var_tipo_dato.add(dato);
            var_valor.add(val);
            var_idSem.add(val);
            var_linExp.add(iright+1); 
            var_idSem.add(id);
            var_linExp.add(iright+1);
            rollist(id, "Parámetro", dato, iright+1,iright+1);
            System.out.println(var_identificador.size());
        }else{
            err_msj.add("Error Semantico en la línea " + (iright+1) + " variable " + id + " ya declarada");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(13);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // DECLARACION_PARAMETRO ::= res_def TIPO_DATO Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 //vamos a validar cuando aparecen estas expresiones
        if(!idExiste(id+"")){
            System.out.println("tipo: "+ dato + " identificador: "+ id + " valor null ");
            var_identificador.add(id);
            var_tipo_dato.add(dato);
            var_valor.add(null);
            rollist(id, "Parámetro", dato, iright+1, iright+1);
            System.out.println(var_identificador.size());
        }else{
            err_msj.add("Error Semantico en la línea " + (iright+1) + " variable " + id + " ya declarada");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(12);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_PARAMETRO",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // PARAMETRO ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // PARAMETRO ::= PARAMETRO DECLARACION_PARAMETRO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban parámetros separados por coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7018);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // PARAMETRO ::= PARAMETRO coma DECLARACION_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // PARAMETRO ::= DECLARACION_PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // VALOR_NUMERICO ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_NUMERICO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // VALOR_NUMERICO ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR_NUMERICO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // VALOR ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // VALOR ::= cadena_caracter 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // VALOR ::= Identificador 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // VALOR ::= Numero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // TIPO_DATO ::= tip_char 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // TIPO_DATO ::= tip_double 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // TIPO_DATO ::= tip_float 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // TIPO_DATO ::= tip_boolean 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // TIPO_DATO ::= tip_int 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // TIPO_DATO ::= tip_tinyint 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object tip = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = tip;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma cadena_caracter coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7028);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // MODE ::= res_model par_abre VALOR_NUMERICO coma cadena_caracter coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7028);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // MODE ::= res_model par_abre cadena_caracter coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7028);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // MODE ::= res_model par_abre VALOR_NUMERICO coma cadena_caracter coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7028);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // MODE ::= res_model par_abre cadena_caracter coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7028);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // MODE ::= res_model par_abre VALOR_NUMERICO coma cadena_caracter par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
         errores_gramatica(7027);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // MODE ::= res_model par_abre cadena_caracter coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban valores numéricos como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7027);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // MODE ::= res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paréntesis encerrando los parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7026);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // MODE ::= res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura antes de parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7023);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
    errores_gramatica(7022);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // MODE ::= res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paréntesis encerrando los parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7025);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // MODE ::= res_model VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura antes de parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7023);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7022);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // MODE ::= res_model VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paréntesis encerrando los parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7024);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // MODE ::= res_model VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura antes de parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7023);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7022);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7021);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7021);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // MODE ::= res_model par_abre VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7021);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // MODE ::= res_model par_abre VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7021);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // MODE ::= res_model par_abre VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7021);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7021);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // MODE ::= res_model par_abre VALOR_NUMERICO VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7020);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // MODE ::= res_model par_abre VALOR_NUMERICO VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7020);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // MODE ::= res_model par_abre VALOR_NUMERICO VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma entre parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7020);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método mode");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7019);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método mode");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7019);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método mode");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7019);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // MODE ::= res_model par_abre VALOR_NUMERICO coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MODE",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // OPERADOR_CONDICIONAL ::= asi_asignacion 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un operador condicional");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(421);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // OPERADOR_CONDICIONAL ::= coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un operador condicional");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(421);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // OPERADOR_CONDICIONAL ::= rel_menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // OPERADOR_CONDICIONAL ::= rel_menor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // OPERADOR_CONDICIONAL ::= rel_mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // OPERADOR_CONDICIONAL ::= rel_mayor_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // OPERADOR_CONDICIONAL ::= rel_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // OPERADOR_CONDICIONAL ::= rel_diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // OPERADOR_CONDICIONAL ::= log_or 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // OPERADOR_CONDICIONAL ::= log_and 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // OPERADOR_CONDICIONAL ::= log_xor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADOR_CONDICIONAL",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // CONDICION ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // CONDICION ::= cadena_caracter OPERADOR_CONDICIONAL VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una condición válida, no se admiten cadenas");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7037);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // CONDICION ::= cadena_caracter OPERADOR_CONDICIONAL cadena_caracter 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una condición válida, no se admiten cadenas");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7037);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // CONDICION ::= cadena_caracter 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una condición válida, no se admiten cadenas");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7037);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // CONDICION ::= VALOR_NUMERICO OPERADOR_CONDICIONAL OPERADOR_CONDICIONAL VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo operador condicional");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7036);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CONDICION ::= OPERADOR_CONDICIONAL VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor antes del operador condicional");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7035);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CONDICION ::= OPERADOR_CONDICIONAL 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor antes y después del operador condicional");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7035);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // CONDICION ::= log_not OPERADOR_CONDICIONAL VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador después de símbolo de negación lógica");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7034);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // CONDICION ::= VALOR_NUMERICO VALOR_NUMERICO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una condición, imposible comparar valores");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7033);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // CONDICION ::= res_true CONDICION 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba a cada condición separada por paréntesis y con un operardor condicional entre ambas");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7032);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // CONDICION ::= res_false CONDICION 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba a cada condición separada por paréntesis y con un operardor condicional entre ambas");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7031);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CONDICION ::= VALOR_NUMERICO OPERADOR_CONDICIONAL 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor después del operador condicional");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7030);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CONDICION ::= res_true 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // CONDICION ::= res_false 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // CONDICION ::= VALOR_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // CONDICION ::= log_not Identificador OPERADOR_CONDICIONAL CONDICION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // CONDICION ::= log_not Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // CONDICION ::= par_abre CONDICION par_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // CONDICION ::= VALOR_NUMERICO OPERADOR_CONDICIONAL VALOR_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // WAIT ::= res_wait par_abre CONDICION sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de la condición del método wait");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7041);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WAIT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // WAIT ::= res_wait CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada wait");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7040);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WAIT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // WAIT ::= res_wait par_abre CONDICION par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método sleep");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(7039);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WAIT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // WAIT ::= res_wait par_abre CONDICION par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WAIT",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // MAX_VOLT ::= res_max_volt asi_asignacion par_abre VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor numérico encerrado entre paréntesis, no se admite asignación");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(420);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // MAX_VOLT ::= res_max_volt asi_asignacion VALOR_NUMERICO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor numérico encerrado entre paréntesis como parámetro único");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(420);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // MAX_VOLT ::= res_max_volt par_abre cadena_caracter par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor numérico como parámetro único del método max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(419);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // MAX_VOLT ::= res_max_volt par_abre Numero sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después del parámetro del método max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(418);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // MAX_VOLT ::= res_max_volt Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(417);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // MAX_VOLT ::= res_max_volt par_abre Identificador sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después del parámetro del método max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(416);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // MAX_VOLT ::= res_max_volt Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(415);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // MAX_VOLT ::= res_max_volt par_abre Numero par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(414);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // MAX_VOLT ::= res_max_volt par_abre Identificador par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método max_volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(413);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // MAX_VOLT ::= res_max_volt par_abre Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // MAX_VOLT ::= res_max_volt par_abre Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAX_VOLT",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // VOLT ::= res_volt par_abre coma Numero par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador después del paréntesis de apertura");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(348);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // VOLT ::= res_volt par_abre Identificador coma par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un parámtetro antes del paréntesis de cierre");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(347);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // VOLT ::= res_volt par_abre Identificador coma Numero coma Numero sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(346);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // VOLT ::= res_volt Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(345);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // VOLT ::= res_volt par_abre Identificador coma Numero sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(344);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // VOLT ::= res_volt Identificador coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(343);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // VOLT ::= res_volt par_abre Identificador Numero Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba , entre los parámetros del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(342);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // VOLT ::= res_volt par_abre Identificador Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba , entre los parámetros del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(342);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // VOLT ::= res_volt par_abre Identificador coma Numero Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba , entre los parámetros del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(342);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // VOLT ::= res_volt par_abre Identificador Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba , entre los parámetros del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(341);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // VOLT ::= res_volt par_abre Numero coma Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador como primer parámetro del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(340);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // VOLT ::= res_volt par_abre Numero coma Identificador coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador como primer parámetro del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(340);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // VOLT ::= res_volt par_abre Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador como primer parámetro del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(339);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // VOLT ::= res_volt par_abre Identificador coma Numero coma Numero par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(338);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // VOLT ::= res_volt par_abre Identificador coma Numero par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(337);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // VOLT ::= res_volt par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // VOLT ::= res_volt par_abre Identificador coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VOLT",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // SCALE ::= res_scale par_abre Identificador coma Numero coma Numero sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(743);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // SCALE ::= res_scale Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(742);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // SCALE ::= res_scale par_abre Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador del pin como primer parámetro del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(741);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SCALE ::= res_scale par_abre Numero coma Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador del pin como primer parámetro del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(740);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SCALE ::= res_scale par_abre Identificador coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban dos parámetros numéricos después del identificador del pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(739);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SCALE ::= res_scale par_abre Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador del pin como primer parámetro del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(738);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // SCALE ::= res_scale par_abre Identificador coma Numero coma Numero par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(737);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // SCALE ::= res_scale par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCALE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TYPE_IO ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_IO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TYPE_IO ::= res_output res_input 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo parámetro input/output");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(412);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_IO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TYPE_IO ::= res_input res_output 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un solo parámetro input/output");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(412);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_IO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TYPE_IO ::= res_output 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_IO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TYPE_IO ::= res_input 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE_IO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TYPE ::= res_type par_abre Identificador coma TYPE_IO coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban sólo dos parámetros dentro del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(208);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TYPE ::= res_type par_abre Numero coma TYPE_IO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador como primer parámetro del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(207);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TYPE ::= res_type par_abre par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador y INPUT o OUTPUT como parámetros del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(206);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TYPE ::= res_type par_abre Identificador coma VALOR_NUMERICO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba INPUT o OUTPUT como segundo parámetro del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(205);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TYPE ::= res_type par_abre TYPE_IO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador como primer parámetro del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(204);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TYPE ::= res_type par_abre Identificador TYPE_IO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba coma separando los parámetros del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(203);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TYPE ::= res_type Identificador coma TYPE_IO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paréntesis encerrando los parámetros del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(202);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TYPE ::= res_type par_abre Identificador coma TYPE_IO sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(201);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TYPE ::= res_type Identificador coma TYPE_IO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después la palabra reservada type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(29);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TYPE ::= res_type par_abre Identificador coma TYPE_IO par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(28);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TYPE ::= res_type par_abre Identificador coma TYPE_IO par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TYPE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DISPLAY_PARAMS ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DISPLAY_PARAMS ::= Numero coma coma Numero 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor entero después de cada coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(736);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // DISPLAY_PARAMS ::= Numero coma coma coma coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor entero después de cada coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(736);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // DISPLAY_PARAMS ::= Numero coma coma coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor entero después de cada coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(736);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // DISPLAY_PARAMS ::= Numero coma coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor entero después de cada coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(735);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // DISPLAY_PARAMS ::= Numero DISPLAY_PARAMS 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba una coma entre cada parámetro");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(734);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // DISPLAY_PARAMS ::= Numero coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un valor entero después de la coma");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(733);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DISPLAY_PARAMS ::= Numero coma DISPLAY_PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DISPLAY_PARAMS ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY_PARAMS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DISPLAY ::= res_display par_abre DISPLAY_PARAMS sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros del método display");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(411);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DISPLAY ::= res_display DISPLAY_PARAMS par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada display");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(410);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DISPLAY ::= res_display par_abre par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba número(s) de pin para display como parámetros");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(409);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DISPLAY ::= res_display par_abre DISPLAY_PARAMS par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método display");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(408);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DISPLAY ::= res_display par_abre DISPLAY_PARAMS par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DISPLAY",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // PIN ::= res_pin Numero par_abre coma Identificador sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(27);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // PIN ::= res_pin Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después de la palabra reservada pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(26);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // PIN ::= res_pin par_abre Identificador coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba número de pin como primer parámetro del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(25);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // PIN ::= res_pin par_abre Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba identificador de pin después del número de pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(24);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // PIN ::= res_pin par_abre Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba número de pin antes de identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(23);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // PIN ::= res_pin par_abre Numero coma Identificador par_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(22);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PIN ::= res_pin par_abre Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        rollist(id,"Pin",null,iright+1,fright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PIN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DECLARACION ::= res_def res_volt par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(732);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DECLARACION ::= res_def res_volt par_abre Identificador coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método volt");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(731);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DECLARACION ::= res_def res_scale par_abre Identificador coma Numero coma Numero par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método scale");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(730);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DECLARACION ::= res_def res_type par_abre Identificador coma TYPE_IO par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método type");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(729);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DECLARACION ::= res_def res_function res_void Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis para la creación de funciones");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)); 
        errores_gramatica(728);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DECLARACION ::= res_def res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis para la creación de funciones");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(728);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLARACION ::= res_def res_display par_abre DISPLAY_PARAMS par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método display");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(726);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DECLARACION ::= res_def res_pin par_abre Numero coma Identificador par_cierra sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(725);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DECLARACION ::= res_def res_pin Identificador asi_asignacion VALOR sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(724);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DECLARACION ::= res_def res_pin Identificador sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba tipo de dato e identificador, consulte la sintaxis del método pin");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(723);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DECLARACION ::= TIPO_DATO Identificador asi_asignacion VALOR sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra reservada def al inicio de la declaración");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(722);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DECLARACION ::= res_def TIPO_DATO Identificador asi_asignacion VALOR 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final de la declaración");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(721);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECLARACION ::= TIPO_DATO Identificador sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra reservada def al inicio de la declaración");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(720);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECLARACION ::= res_def TIPO_DATO Identificador 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; al final de la declaración");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(719);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DECLARACION ::= res_def TIPO_DATO Identificador asi_asignacion CALL_FUNCTION sig_punto_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 //vamos a validar cuando aparecen estas expresiones
        if(!idExiste(id+"")){
            System.out.println("tipo: "+ dato + " identificador: "+ id + " valor null ");
            var_identificador.add(id);
            var_tipo_dato.add(dato);
            //var_valor.add(val);
            rollist(id, "Variable", dato, iright+1, fright+1);
            System.out.println(var_identificador.size());
        }else{
            err_msj.add("Error Semantico en la línea " + (fright+1) + " variable " + id + " ya declarada");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(10);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DECLARACION ::= res_def TIPO_DATO Identificador asi_asignacion VALOR sig_punto_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 //vamos a validar cuando aparecen estas expresiones
        if(!idExiste(id+"")){
            System.out.println("tipo: "+ dato + " identificador: "+ id + " valor null ");
            var_identificador.add(id);
            var_tipo_dato.add(dato);
            var_valor.add(val);
            var_idSem.add(val);
            var_linExp.add(iright+1);
            var_idSem.add(id);
            var_linExp.add(iright+1);
            rollist(id, "Variable", dato, iright+1, fright+1);
            System.out.println(var_identificador.size());
        }else{
            err_msj.add("Error Semantico en la línea " + (fright+1) + " variable " + id + " ya declarada");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(10);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DECLARACION ::= res_def TIPO_DATO Identificador sig_punto_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int datoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int datoright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object dato = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 //vamos a validar cuando aparecen estas expresiones
        if(!idExiste(id+"")){
            System.out.println("tipo: "+ dato + " identificador: "+ id + " valor null ");
            var_identificador.add(id);
            var_tipo_dato.add(dato);
            var_valor.add(null);
            rollist(id, "Variable", dato, iright+1, fright+1);
            System.out.println(var_identificador.size());
        }else{
            err_msj.add("Error Semantico en la línea " + (fright+1) + " variable " + id + " ya declarada");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(10);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION OPERADORES_CONTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SENTENCIA_FUNCION ::= OPERADORES_CONTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // SENTENCIA_FUNCION ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // SENTENCIA_FUNCION ::= SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SENTENCIA_FUNCION ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION IN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SENTENCIA_FUNCION ::= IN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SENTENCIA_FUNCION ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SENTENCIA_FUNCION ::= DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // SENTENCIA_FUNCION ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SENTENCIA_FUNCION ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SENTENCIA_FUNCION ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SENTENCIA_FUNCION ::= res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // SENTENCIA_FUNCION ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION WAIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SENTENCIA_FUNCION ::= WAIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SENTENCIA_FUNCION ::= VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SENTENCIA_FUNCION ::= SENTENCIA_FUNCION DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SENTENCIA_FUNCION ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FUNCION",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP CALL_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SENTENCIA_STARTUP ::= CALL_FUNCTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP OPERADORES_CONTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SENTENCIA_STARTUP ::= OPERADORES_CONTRACCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SENTENCIA_STARTUP ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SENTENCIA_STARTUP ::= SLEEP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SENTENCIA_STARTUP ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP IN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SENTENCIA_STARTUP ::= IN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SENTENCIA_STARTUP ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SENTENCIA_STARTUP ::= DOWHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SENTENCIA_STARTUP ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SENTENCIA_STARTUP ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SENTENCIA_STARTUP ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SENTENCIA_STARTUP ::= res_exit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_STARTUP ::= RETURN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP WAIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_STARTUP ::= WAIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_STARTUP ::= VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_STARTUP ::= SENTENCIA_STARTUP DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_STARTUP ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_STARTUP",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_CONFIG ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG MODE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_CONFIG ::= MODE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG MAX_VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_CONFIG ::= MAX_VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_CONFIG ::= VOLT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG SCALE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SENTENCIA_CONFIG ::= SCALE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA_CONFIG ::= TYPE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG DISPLAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_CONFIG ::= DISPLAY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG PIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_CONFIG ::= PIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_CONFIG ::= SENTENCIA_CONFIG DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_CONFIG ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_CONFIG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // STARTUP ::= res_start SENTENCIA_STARTUP res_end sig_punto_coma 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba punto y coma después de la palabra reservada start");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(407);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STARTUP",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // STARTUP ::= res_start sig_punto_coma SENTENCIA_STARTUP res_end 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba punto y coma después de la palabra reservada end");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(406);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STARTUP",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // STARTUP ::= res_start SENTENCIA_STARTUP res_end 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba punto y coma después de las palabras reservadas start y end");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(405);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STARTUP",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // STARTUP ::= res_start sig_punto_coma SENTENCIA_STARTUP res_end sig_punto_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        var_inicioStart.add(iright+1);
        var_finStart.add(fright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STARTUP",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONFIG ::= error llave_cierra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONFIG",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONFIG ::= error sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONFIG",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONFIG ::= res_config SENTENCIA_CONFIG llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura al inicio del bloque config");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(21);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONFIG",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONFIG ::= res_config llave_abre SENTENCIA_CONFIG llave_cierra 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        var_inicioConfig.add(iright+1);
        var_finConfig.add(fright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONFIG",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RETURN ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RETURN ::= res_return TIPO_DATO 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; después del tipo de dato");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(718);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RETURN ::= res_return Identificador 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba ; después de identificador");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(717);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RETURN ::= res_return sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RETURN ::= res_return Identificador sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETURN",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETRO_CALL_FUNCTION ::= PARAMETRO_CALL_FUNCTION coma VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_CALL_FUNCTION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PARAMETRO_CALL_FUNCTION ::= VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO_CALL_FUNCTION",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CALL_FUNCTION ::= Identificador par_abre PARAMETRO_CALL_FUNCTION par_cierra sig_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCION ::= res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba llave de apertura después de los parámetros de la función");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(404);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCION ::= Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra reservada function y el tipo de dato de retorno antes del identificador de la función");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(403);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCION ::= TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra reservada function antes del tipo de dato de retorno");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(402);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCION ::= res_function TIPO_DATO Identificador PARAMETRO llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban paretesis de apertura y cierre en la especificación de parámetros de la función");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(401);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCION ::= res_function TIPO_DATO Identificador par_abre PARAMETRO llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de cierre después de los parámetros de la función");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(49);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FUNCION ::= res_function TIPO_DATO Identificador PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba paréntesis de apertura después del identificador de la función");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(48);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= res_function par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un tipo de dato retorno e identificador para la función");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(47);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= res_function TIPO_DATO par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador para la función después del tipo de dato a retorno");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(46);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= res_function Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la especificación del tipo de dato de retorno después de function");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(45);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCION ::= res_function res_void Identificador par_abre par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        rollist(id,"Funcion",null,iright+1,fright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCION ::= res_function res_void Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        rollist(id,"Funcion",null,iright+1,fright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCION ::= res_function TIPO_DATO Identificador par_abre PARAMETRO par_cierra llave_abre SENTENCIA_FUNCION llave_cierra 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        rollist(id,"Funcion",null,iright+1,fright+1);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCIONES ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCIONES ::= FUNCIONES FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCIONES",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ESTRUCTURA_BASICA ::= STARTUP FUNCIONES 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el bloque CONFIG antes del bloque START-END");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
         errores_gramatica(706);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ESTRUCTURA_BASICA ::= FUNCIONES STARTUP 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el bloque CONFIG antes del bloque START-END");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(706);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTRUCTURA_BASICA ::= CONFIG FUNCIONES 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el bloque START-END después del bloque CONFIG");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(705);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el bloque START-END después del bloque CONFIG");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(704);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ESTRUCTURA_BASICA ::= FUNCIONES 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaban los bloques CONFIG y START-END");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(703);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ESTRUCTURA_BASICA ::= STARTUP 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el bloque CONFIG antes del bloque START-END");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(702);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESTRUCTURA_BASICA ::= CONFIG 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba el bloque START-END después del bloque CONFIG");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(701);
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESTRUCTURA_BASICA ::= STARTUP CONFIG 
            {
              Object RESULT =null;
		
        err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba que bloque CONFIG se situara antes del bloque START-END");
        err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
        errores_gramatica(700);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESTRUCTURA_BASICA ::= CONFIG STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG FUNCIONES STARTUP FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG FUNCIONES STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG STARTUP FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURA_BASICA ::= CONFIG FUNCIONES STARTUP FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURA_BASICA ::= CONFIG FUNCIONES STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA_BASICA ::= CONFIG STARTUP FUNCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRUCTURA_BASICA ::= FUNCIONES CONFIG STARTUP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BASICA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= error sig_punto_coma 
            {
              Object RESULT =null;
		
       err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Sintaxis invalida, favor de verificar la estructura en el manual del lenguaje");
       err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
       errores_gramatica(9999);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= res_name ESTRUCTURA_BASICA 
            {
              Object RESULT =null;
		
            err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador despues de la palabra reservada name");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(44);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Identificador sig_punto_coma ESTRUCTURA_BASICA 
            {
              Object RESULT =null;
		
            err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba la palabra reservada name antes del identificador");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(43);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= res_name sig_punto_coma ESTRUCTURA_BASICA 
            {
              Object RESULT =null;
		
            err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un identificador antes del punto y coma");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(42);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= res_name Identificador ESTRUCTURA_BASICA 
            {
              Object RESULT =null;
		
            err_msj.add("Error Sintáctico en la línea "+(((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1)+" | Se esperaba un punto y coma");
            err_linea.add((((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top)).right +1));
            errores_gramatica(41);
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= res_name Identificador sig_punto_coma ESTRUCTURA_BASICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

